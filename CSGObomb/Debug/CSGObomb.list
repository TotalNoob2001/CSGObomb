
CSGObomb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08007700  08007700  00008700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079d4  080079d4  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  080079d4  080079d4  000089d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079dc  080079dc  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079dc  080079dc  000089dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079e0  080079e0  000089e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080079e4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  20000074  08007a58  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08007a58  00009438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc06  00000000  00000000  0000909d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c93  00000000  00000000  00018ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0001b938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ccc  00000000  00000000  0001c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019832  00000000  00000000  0001d6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015452  00000000  00000000  00036ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e58e  00000000  00000000  0004c328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da8b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004968  00000000  00000000  000da8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000df264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080076e8 	.word	0x080076e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080076e8 	.word	0x080076e8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <planting>:
#include "functions.h"

void planting(void){
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0

}
 8000160:	bf00      	nop
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr

08000168 <defusing>:

void defusing(void){
 8000168:	b480      	push	{r7}
 800016a:	af00      	add	r7, sp, #0

}
 800016c:	bf00      	nop
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr

08000174 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000174:	b40f      	push	{r0, r1, r2, r3}
 8000176:	b580      	push	{r7, lr}
 8000178:	b082      	sub	sp, #8
 800017a:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 800017c:	f107 0314 	add.w	r3, r7, #20
 8000180:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000182:	683b      	ldr	r3, [r7, #0]
 8000184:	693a      	ldr	r2, [r7, #16]
 8000186:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800018a:	4807      	ldr	r0, [pc, #28]	@ (80001a8 <myprintf+0x34>)
 800018c:	f006 fe0e 	bl	8006dac <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8000190:	4805      	ldr	r0, [pc, #20]	@ (80001a8 <myprintf+0x34>)
 8000192:	f7ff ffdb 	bl	800014c <strlen>
 8000196:	4603      	mov	r3, r0
 8000198:	607b      	str	r3, [r7, #4]
}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr
 80001a8:	200001a8 	.word	0x200001a8

080001ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ac:	b5b0      	push	{r4, r5, r7, lr}
 80001ae:	f5ad 6d93 	sub.w	sp, sp, #1176	@ 0x498
 80001b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b4:	f000 fcd2 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b8:	f000 f920 	bl	80003fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001bc:	f000 fa68 	bl	8000690 <MX_GPIO_Init>
  MX_DMA_Init();
 80001c0:	f000 fa48 	bl	8000654 <MX_DMA_Init>
  MX_ADC1_Init();
 80001c4:	f000 f97e 	bl	80004c4 <MX_ADC1_Init>
  MX_SPI1_Init();
 80001c8:	f000 f9ba 	bl	8000540 <MX_SPI1_Init>
  MX_TIM1_Init();
 80001cc:	f000 f9f0 	bl	80005b0 <MX_TIM1_Init>
  MX_FATFS_Init();
 80001d0:	f003 f9c6 	bl	8003560 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 80001d4:	4878      	ldr	r0, [pc, #480]	@ (80003b8 <main+0x20c>)
 80001d6:	f002 fe2f 	bl	8002e38 <HAL_TIM_Base_Start_IT>

	myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80001da:	4878      	ldr	r0, [pc, #480]	@ (80003bc <main+0x210>)
 80001dc:	f7ff ffca 	bl	8000174 <myprintf>

	HAL_Delay(1000); //a short delay is important to let the SD card settle
 80001e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001e4:	f000 fd1c 	bl	8000c20 <HAL_Delay>
	FATFS FatFs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres; //Result after operations

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 80001e8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80001ec:	2201      	movs	r2, #1
 80001ee:	4974      	ldr	r1, [pc, #464]	@ (80003c0 <main+0x214>)
 80001f0:	4618      	mov	r0, r3
 80001f2:	f005 fd95 	bl	8005d20 <f_mount>
 80001f6:	4603      	mov	r3, r0
 80001f8:	f887 3497 	strb.w	r3, [r7, #1175]	@ 0x497
	if (fres != FR_OK) {
 80001fc:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 8000200:	2b00      	cmp	r3, #0
 8000202:	d007      	beq.n	8000214 <main+0x68>
		myprintf("f_mount error (%i)\r\n", fres);
 8000204:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 8000208:	4619      	mov	r1, r3
 800020a:	486e      	ldr	r0, [pc, #440]	@ (80003c4 <main+0x218>)
 800020c:	f7ff ffb2 	bl	8000174 <myprintf>
		while (1)
 8000210:	bf00      	nop
 8000212:	e7fd      	b.n	8000210 <main+0x64>
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS *getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8000214:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000218:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800021c:	4619      	mov	r1, r3
 800021e:	4868      	ldr	r0, [pc, #416]	@ (80003c0 <main+0x214>)
 8000220:	f006 fc35 	bl	8006a8e <f_getfree>
 8000224:	4603      	mov	r3, r0
 8000226:	f887 3497 	strb.w	r3, [r7, #1175]	@ 0x497
	if (fres != FR_OK) {
 800022a:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 800022e:	2b00      	cmp	r3, #0
 8000230:	d007      	beq.n	8000242 <main+0x96>
		myprintf("f_getfree error (%i)\r\n", fres);
 8000232:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 8000236:	4619      	mov	r1, r3
 8000238:	4863      	ldr	r0, [pc, #396]	@ (80003c8 <main+0x21c>)
 800023a:	f7ff ff9b 	bl	8000174 <myprintf>
		while (1)
 800023e:	bf00      	nop
 8000240:	e7fd      	b.n	800023e <main+0x92>
			;
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000242:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8000246:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000250:	3b02      	subs	r3, #2
 8000252:	f507 6293 	add.w	r2, r7, #1176	@ 0x498
 8000256:	f2a2 4274 	subw	r2, r2, #1140	@ 0x474
 800025a:	6812      	ldr	r2, [r2, #0]
 800025c:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8000260:	fb02 f303 	mul.w	r3, r2, r3
 8000264:	f8c7 3490 	str.w	r3, [r7, #1168]	@ 0x490
	free_sectors = free_clusters * getFreeFs->csize;
 8000268:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 800026c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8000276:	461a      	mov	r2, r3
 8000278:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 800027c:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	fb02 f303 	mul.w	r3, r2, r3
 8000286:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c

	myprintf(
 800028a:	f8d7 3490 	ldr.w	r3, [r7, #1168]	@ 0x490
 800028e:	0859      	lsrs	r1, r3, #1
 8000290:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8000294:	085b      	lsrs	r3, r3, #1
 8000296:	461a      	mov	r2, r3
 8000298:	484c      	ldr	r0, [pc, #304]	@ (80003cc <main+0x220>)
 800029a:	f7ff ff6b 	bl	8000174 <myprintf>
			"SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n",
			total_sectors / 2, free_sectors / 2);

	//Now let's try to open file "test.txt"
	fres = f_open(&fil, "test.txt", FA_READ);
 800029e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80002a2:	2201      	movs	r2, #1
 80002a4:	494a      	ldr	r1, [pc, #296]	@ (80003d0 <main+0x224>)
 80002a6:	4618      	mov	r0, r3
 80002a8:	f005 fd82 	bl	8005db0 <f_open>
 80002ac:	4603      	mov	r3, r0
 80002ae:	f887 3497 	strb.w	r3, [r7, #1175]	@ 0x497
	if (fres != FR_OK) {
 80002b2:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d004      	beq.n	80002c4 <main+0x118>
		myprintf("f_open error (%i)\r\n");
 80002ba:	4846      	ldr	r0, [pc, #280]	@ (80003d4 <main+0x228>)
 80002bc:	f7ff ff5a 	bl	8000174 <myprintf>
		while (1)
 80002c0:	bf00      	nop
 80002c2:	e7fd      	b.n	80002c0 <main+0x114>
			;
	}
	myprintf("I was able to open 'test.txt' for reading!\r\n");
 80002c4:	4844      	ldr	r0, [pc, #272]	@ (80003d8 <main+0x22c>)
 80002c6:	f7ff ff55 	bl	8000174 <myprintf>
	//Read 30 bytes from "test.txt" on the SD card
	BYTE readBuf[30];

	//We can either use f_read OR f_gets to get data out of files
	//f_gets is a wrapper on f_read that does some string formatting for us
	TCHAR *rres = f_gets((TCHAR*) readBuf, 30, &fil);
 80002ca:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	211e      	movs	r1, #30
 80002d2:	4618      	mov	r0, r3
 80002d4:	f006 fca8 	bl	8006c28 <f_gets>
 80002d8:	f8c7 0488 	str.w	r0, [r7, #1160]	@ 0x488
	if (rres != 0) {
 80002dc:	f8d7 3488 	ldr.w	r3, [r7, #1160]	@ 0x488
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d005      	beq.n	80002f0 <main+0x144>
		myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	4619      	mov	r1, r3
 80002e8:	483c      	ldr	r0, [pc, #240]	@ (80003dc <main+0x230>)
 80002ea:	f7ff ff43 	bl	8000174 <myprintf>
 80002ee:	e005      	b.n	80002fc <main+0x150>
	} else {
		myprintf("f_gets error (%i)\r\n", fres);
 80002f0:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 80002f4:	4619      	mov	r1, r3
 80002f6:	483a      	ldr	r0, [pc, #232]	@ (80003e0 <main+0x234>)
 80002f8:	f7ff ff3c 	bl	8000174 <myprintf>
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 80002fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000300:	4618      	mov	r0, r3
 8000302:	f006 fb9c 	bl	8006a3e <f_close>

	//Now let's try and write a file "write.txt"
	fres = f_open(&fil, "write.txt",
 8000306:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800030a:	221a      	movs	r2, #26
 800030c:	4935      	ldr	r1, [pc, #212]	@ (80003e4 <main+0x238>)
 800030e:	4618      	mov	r0, r3
 8000310:	f005 fd4e 	bl	8005db0 <f_open>
 8000314:	4603      	mov	r3, r0
 8000316:	f887 3497 	strb.w	r3, [r7, #1175]	@ 0x497
			FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
	if (fres == FR_OK) {
 800031a:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 800031e:	2b00      	cmp	r3, #0
 8000320:	d103      	bne.n	800032a <main+0x17e>
		myprintf("I was able to open 'write.txt' for writing\r\n");
 8000322:	4831      	ldr	r0, [pc, #196]	@ (80003e8 <main+0x23c>)
 8000324:	f7ff ff26 	bl	8000174 <myprintf>
 8000328:	e005      	b.n	8000336 <main+0x18a>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
 800032a:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 800032e:	4619      	mov	r1, r3
 8000330:	4828      	ldr	r0, [pc, #160]	@ (80003d4 <main+0x228>)
 8000332:	f7ff ff1f 	bl	8000174 <myprintf>
	}

	//Copy in a string
	strncpy((char*) readBuf, "a new file is made!", 19);
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4a2c      	ldr	r2, [pc, #176]	@ (80003ec <main+0x240>)
 800033a:	461c      	mov	r4, r3
 800033c:	4615      	mov	r5, r2
 800033e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000342:	682b      	ldr	r3, [r5, #0]
 8000344:	461a      	mov	r2, r3
 8000346:	8022      	strh	r2, [r4, #0]
 8000348:	3402      	adds	r4, #2
 800034a:	0c1b      	lsrs	r3, r3, #16
 800034c:	7023      	strb	r3, [r4, #0]
	UINT bytesWrote;
	fres = f_write(&fil, readBuf, 19, &bytesWrote);
 800034e:	463b      	mov	r3, r7
 8000350:	1d39      	adds	r1, r7, #4
 8000352:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000356:	2213      	movs	r2, #19
 8000358:	f006 f90a 	bl	8006570 <f_write>
 800035c:	4603      	mov	r3, r0
 800035e:	f887 3497 	strb.w	r3, [r7, #1175]	@ 0x497
	if (fres == FR_OK) {
 8000362:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 8000366:	2b00      	cmp	r3, #0
 8000368:	d109      	bne.n	800037e <main+0x1d2>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 800036a:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 800036e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4619      	mov	r1, r3
 8000376:	481e      	ldr	r0, [pc, #120]	@ (80003f0 <main+0x244>)
 8000378:	f7ff fefc 	bl	8000174 <myprintf>
 800037c:	e002      	b.n	8000384 <main+0x1d8>
	} else {
		myprintf("f_write error (%i)\r\n");
 800037e:	481d      	ldr	r0, [pc, #116]	@ (80003f4 <main+0x248>)
 8000380:	f7ff fef8 	bl	8000174 <myprintf>
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 8000384:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000388:	4618      	mov	r0, r3
 800038a:	f006 fb58 	bl	8006a3e <f_close>

	//We're done, so de-mount the drive
	f_mount(NULL, "", 0);
 800038e:	2200      	movs	r2, #0
 8000390:	490b      	ldr	r1, [pc, #44]	@ (80003c0 <main+0x214>)
 8000392:	2000      	movs	r0, #0
 8000394:	f005 fcc4 	bl	8005d20 <f_mount>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		// Platning
		while (!changeState) {
 8000398:	e001      	b.n	800039e <main+0x1f2>
			planting();
 800039a:	f7ff fedf 	bl	800015c <planting>
		while (!changeState) {
 800039e:	4b16      	ldr	r3, [pc, #88]	@ (80003f8 <main+0x24c>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f9      	beq.n	800039a <main+0x1ee>
		}

		//Defusing
		while (changeState) {
 80003a6:	e001      	b.n	80003ac <main+0x200>
			defusing();
 80003a8:	f7ff fede 	bl	8000168 <defusing>
		while (changeState) {
 80003ac:	4b12      	ldr	r3, [pc, #72]	@ (80003f8 <main+0x24c>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d1f9      	bne.n	80003a8 <main+0x1fc>
		while (!changeState) {
 80003b4:	e7f3      	b.n	800039e <main+0x1f2>
 80003b6:	bf00      	nop
 80003b8:	2000015c 	.word	0x2000015c
 80003bc:	08007700 	.word	0x08007700
 80003c0:	08007720 	.word	0x08007720
 80003c4:	08007724 	.word	0x08007724
 80003c8:	0800773c 	.word	0x0800773c
 80003cc:	08007754 	.word	0x08007754
 80003d0:	0800779c 	.word	0x0800779c
 80003d4:	080077a8 	.word	0x080077a8
 80003d8:	080077bc 	.word	0x080077bc
 80003dc:	080077ec 	.word	0x080077ec
 80003e0:	08007818 	.word	0x08007818
 80003e4:	0800782c 	.word	0x0800782c
 80003e8:	08007838 	.word	0x08007838
 80003ec:	08007868 	.word	0x08007868
 80003f0:	0800787c 	.word	0x0800787c
 80003f4:	080078a0 	.word	0x080078a0
 80003f8:	200001a4 	.word	0x200001a4

080003fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b094      	sub	sp, #80	@ 0x50
 8000400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000402:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000406:	2228      	movs	r2, #40	@ 0x28
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f006 fcdc 	bl	8006dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000410:	f107 0314 	add.w	r3, r7, #20
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800042c:	2303      	movs	r3, #3
 800042e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000430:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000434:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043a:	2301      	movs	r3, #1
 800043c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800043e:	2310      	movs	r3, #16
 8000440:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000442:	2302      	movs	r3, #2
 8000444:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000446:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800044a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800044c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000450:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000456:	4618      	mov	r0, r3
 8000458:	f001 faac 	bl	80019b4 <HAL_RCC_OscConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000462:	f000 f9b3 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	230f      	movs	r3, #15
 8000468:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046a:	2302      	movs	r3, #2
 800046c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000476:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	2102      	movs	r1, #2
 8000482:	4618      	mov	r0, r3
 8000484:	f001 fd18 	bl	8001eb8 <HAL_RCC_ClockConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800048e:	f000 f99d 	bl	80007cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000492:	2302      	movs	r3, #2
 8000494:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000496:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800049a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 fe9e 	bl	80021e0 <HAL_RCCEx_PeriphCLKConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004aa:	f000 f98f 	bl	80007cc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f04f 61a0 	mov.w	r1, #83886080	@ 0x5000000
 80004b4:	2000      	movs	r0, #0
 80004b6:	f001 fde9 	bl	800208c <HAL_RCC_MCOConfig>
}
 80004ba:	bf00      	nop
 80004bc:	3750      	adds	r7, #80	@ 0x50
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d4:	4b18      	ldr	r3, [pc, #96]	@ (8000538 <MX_ADC1_Init+0x74>)
 80004d6:	4a19      	ldr	r2, [pc, #100]	@ (800053c <MX_ADC1_Init+0x78>)
 80004d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004da:	4b17      	ldr	r3, [pc, #92]	@ (8000538 <MX_ADC1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e0:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <MX_ADC1_Init+0x74>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004e6:	4b14      	ldr	r3, [pc, #80]	@ (8000538 <MX_ADC1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ec:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <MX_ADC1_Init+0x74>)
 80004ee:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80004f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f4:	4b10      	ldr	r3, [pc, #64]	@ (8000538 <MX_ADC1_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <MX_ADC1_Init+0x74>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000500:	480d      	ldr	r0, [pc, #52]	@ (8000538 <MX_ADC1_Init+0x74>)
 8000502:	f000 fbb1 	bl	8000c68 <HAL_ADC_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800050c:	f000 f95e 	bl	80007cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000510:	2308      	movs	r3, #8
 8000512:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000514:	2301      	movs	r3, #1
 8000516:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	4619      	mov	r1, r3
 8000520:	4805      	ldr	r0, [pc, #20]	@ (8000538 <MX_ADC1_Init+0x74>)
 8000522:	f000 fc79 	bl	8000e18 <HAL_ADC_ConfigChannel>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800052c:	f000 f94e 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000090 	.word	0x20000090
 800053c:	40012400 	.word	0x40012400

08000540 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000544:	4b18      	ldr	r3, [pc, #96]	@ (80005a8 <MX_SPI1_Init+0x68>)
 8000546:	4a19      	ldr	r2, [pc, #100]	@ (80005ac <MX_SPI1_Init+0x6c>)
 8000548:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800054a:	4b17      	ldr	r3, [pc, #92]	@ (80005a8 <MX_SPI1_Init+0x68>)
 800054c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000550:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000552:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <MX_SPI1_Init+0x68>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000558:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <MX_SPI1_Init+0x68>)
 800055a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800055e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000560:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <MX_SPI1_Init+0x68>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_SPI1_Init+0x68>)
 8000568:	2200      	movs	r2, #0
 800056a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800056c:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <MX_SPI1_Init+0x68>)
 800056e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000572:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000574:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <MX_SPI1_Init+0x68>)
 8000576:	2208      	movs	r2, #8
 8000578:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <MX_SPI1_Init+0x68>)
 800057c:	2200      	movs	r2, #0
 800057e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <MX_SPI1_Init+0x68>)
 8000582:	2200      	movs	r2, #0
 8000584:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000586:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <MX_SPI1_Init+0x68>)
 8000588:	2200      	movs	r2, #0
 800058a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <MX_SPI1_Init+0x68>)
 800058e:	220a      	movs	r2, #10
 8000590:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <MX_SPI1_Init+0x68>)
 8000594:	f001 feda 	bl	800234c <HAL_SPI_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800059e:	f000 f915 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000c0 	.word	0x200000c0
 80005ac:	40013000 	.word	0x40013000

080005b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b6:	f107 0308 	add.w	r3, r7, #8
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <MX_TIM1_Init+0x9c>)
 80005ce:	4a20      	ldr	r2, [pc, #128]	@ (8000650 <MX_TIM1_Init+0xa0>)
 80005d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1151;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <MX_TIM1_Init+0x9c>)
 80005d4:	f240 427f 	movw	r2, #1151	@ 0x47f
 80005d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005da:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <MX_TIM1_Init+0x9c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62499;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <MX_TIM1_Init+0x9c>)
 80005e2:	f24f 4223 	movw	r2, #62499	@ 0xf423
 80005e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e8:	4b18      	ldr	r3, [pc, #96]	@ (800064c <MX_TIM1_Init+0x9c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005ee:	4b17      	ldr	r3, [pc, #92]	@ (800064c <MX_TIM1_Init+0x9c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f4:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_TIM1_Init+0x9c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005fa:	4814      	ldr	r0, [pc, #80]	@ (800064c <MX_TIM1_Init+0x9c>)
 80005fc:	f002 fbcd 	bl	8002d9a <HAL_TIM_Base_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000606:	f000 f8e1 	bl	80007cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	4619      	mov	r1, r3
 8000616:	480d      	ldr	r0, [pc, #52]	@ (800064c <MX_TIM1_Init+0x9c>)
 8000618:	f002 fd4a 	bl	80030b0 <HAL_TIM_ConfigClockSource>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000622:	f000 f8d3 	bl	80007cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	4806      	ldr	r0, [pc, #24]	@ (800064c <MX_TIM1_Init+0x9c>)
 8000634:	f002 ff2a 	bl	800348c <HAL_TIMEx_MasterConfigSynchronization>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800063e:	f000 f8c5 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000015c 	.word	0x2000015c
 8000650:	40012c00 	.word	0x40012c00

08000654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065a:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <MX_DMA_Init+0x38>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a0b      	ldr	r2, [pc, #44]	@ (800068c <MX_DMA_Init+0x38>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <MX_DMA_Init+0x38>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	200d      	movs	r0, #13
 8000678:	f000 fddf 	bl	800123a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800067c:	200d      	movs	r0, #13
 800067e:	f000 fdf8 	bl	8001272 <HAL_NVIC_EnableIRQ>

}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a4:	4b45      	ldr	r3, [pc, #276]	@ (80007bc <MX_GPIO_Init+0x12c>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a44      	ldr	r2, [pc, #272]	@ (80007bc <MX_GPIO_Init+0x12c>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b42      	ldr	r3, [pc, #264]	@ (80007bc <MX_GPIO_Init+0x12c>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0310 	and.w	r3, r3, #16
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006bc:	4b3f      	ldr	r3, [pc, #252]	@ (80007bc <MX_GPIO_Init+0x12c>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a3e      	ldr	r2, [pc, #248]	@ (80007bc <MX_GPIO_Init+0x12c>)
 80006c2:	f043 0320 	orr.w	r3, r3, #32
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b3c      	ldr	r3, [pc, #240]	@ (80007bc <MX_GPIO_Init+0x12c>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0320 	and.w	r3, r3, #32
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b39      	ldr	r3, [pc, #228]	@ (80007bc <MX_GPIO_Init+0x12c>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a38      	ldr	r2, [pc, #224]	@ (80007bc <MX_GPIO_Init+0x12c>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b36      	ldr	r3, [pc, #216]	@ (80007bc <MX_GPIO_Init+0x12c>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b33      	ldr	r3, [pc, #204]	@ (80007bc <MX_GPIO_Init+0x12c>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a32      	ldr	r2, [pc, #200]	@ (80007bc <MX_GPIO_Init+0x12c>)
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b30      	ldr	r3, [pc, #192]	@ (80007bc <MX_GPIO_Init+0x12c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0308 	and.w	r3, r3, #8
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800070a:	482d      	ldr	r0, [pc, #180]	@ (80007c0 <MX_GPIO_Init+0x130>)
 800070c:	f001 f920 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC_CS_Pin|SD_CS_Pin, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2118      	movs	r1, #24
 8000714:	482b      	ldr	r0, [pc, #172]	@ (80007c4 <MX_GPIO_Init+0x134>)
 8000716:	f001 f91b 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000720:	4829      	ldr	r0, [pc, #164]	@ (80007c8 <MX_GPIO_Init+0x138>)
 8000722:	f001 f915 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILDIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILDIN_Pin;
 8000726:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2302      	movs	r3, #2
 8000736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILDIN_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	4820      	ldr	r0, [pc, #128]	@ (80007c0 <MX_GPIO_Init+0x130>)
 8000740:	f000 ff8a 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : DAC_CS_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = DAC_CS_Pin|SD_CS_Pin;
 8000744:	2318      	movs	r3, #24
 8000746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2302      	movs	r3, #2
 8000752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	481a      	ldr	r0, [pc, #104]	@ (80007c4 <MX_GPIO_Init+0x134>)
 800075c:	f000 ff7c 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_YELLOW_Pin LED_WHITE_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin;
 8000760:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2302      	movs	r3, #2
 8000770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	4619      	mov	r1, r3
 8000778:	4813      	ldr	r0, [pc, #76]	@ (80007c8 <MX_GPIO_Init+0x138>)
 800077a:	f000 ff6d 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800077e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000788:	2302      	movs	r3, #2
 800078a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4619      	mov	r1, r3
 8000792:	480d      	ldr	r0, [pc, #52]	@ (80007c8 <MX_GPIO_Init+0x138>)
 8000794:	f000 ff60 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000798:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800079c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_GPIO_Init+0x134>)
 80007ae:	f000 ff53 	bl	8001658 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b2:	bf00      	nop
 80007b4:	3720      	adds	r7, #32
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40011000 	.word	0x40011000
 80007c4:	40010800 	.word	0x40010800
 80007c8:	40010c00 	.word	0x40010c00

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <Error_Handler+0x8>

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007de:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <HAL_MspInit+0x5c>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a14      	ldr	r2, [pc, #80]	@ (8000834 <HAL_MspInit+0x5c>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <HAL_MspInit+0x5c>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <HAL_MspInit+0x5c>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000834 <HAL_MspInit+0x5c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <HAL_MspInit+0x5c>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <HAL_MspInit+0x60>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	4a04      	ldr	r2, [pc, #16]	@ (8000838 <HAL_MspInit+0x60>)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000
 8000838:	40010000 	.word	0x40010000

0800083c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a14      	ldr	r2, [pc, #80]	@ (80008a8 <HAL_ADC_MspInit+0x6c>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d121      	bne.n	80008a0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <HAL_ADC_MspInit+0x70>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <HAL_ADC_MspInit+0x70>)
 8000862:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <HAL_ADC_MspInit+0x70>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000874:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <HAL_ADC_MspInit+0x70>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a0c      	ldr	r2, [pc, #48]	@ (80008ac <HAL_ADC_MspInit+0x70>)
 800087a:	f043 0308 	orr.w	r3, r3, #8
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <HAL_ADC_MspInit+0x70>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0308 	and.w	r3, r3, #8
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BOOM_COUNTDOWN_Pin;
 800088c:	2301      	movs	r3, #1
 800088e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000890:	2303      	movs	r3, #3
 8000892:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BOOM_COUNTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4619      	mov	r1, r3
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <HAL_ADC_MspInit+0x74>)
 800089c:	f000 fedc 	bl	8001658 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40012400 	.word	0x40012400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010c00 	.word	0x40010c00

080008b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a32      	ldr	r2, [pc, #200]	@ (8000998 <HAL_SPI_MspInit+0xe4>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d15d      	bne.n	8000990 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008d4:	4b31      	ldr	r3, [pc, #196]	@ (800099c <HAL_SPI_MspInit+0xe8>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a30      	ldr	r2, [pc, #192]	@ (800099c <HAL_SPI_MspInit+0xe8>)
 80008da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b2e      	ldr	r3, [pc, #184]	@ (800099c <HAL_SPI_MspInit+0xe8>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b2b      	ldr	r3, [pc, #172]	@ (800099c <HAL_SPI_MspInit+0xe8>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a2a      	ldr	r2, [pc, #168]	@ (800099c <HAL_SPI_MspInit+0xe8>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b28      	ldr	r3, [pc, #160]	@ (800099c <HAL_SPI_MspInit+0xe8>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000904:	23a0      	movs	r3, #160	@ 0xa0
 8000906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	4619      	mov	r1, r3
 8000916:	4822      	ldr	r0, [pc, #136]	@ (80009a0 <HAL_SPI_MspInit+0xec>)
 8000918:	f000 fe9e 	bl	8001658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800091c:	2340      	movs	r3, #64	@ 0x40
 800091e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	481c      	ldr	r0, [pc, #112]	@ (80009a0 <HAL_SPI_MspInit+0xec>)
 8000930:	f000 fe92 	bl	8001658 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000934:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <HAL_SPI_MspInit+0xf0>)
 8000936:	4a1c      	ldr	r2, [pc, #112]	@ (80009a8 <HAL_SPI_MspInit+0xf4>)
 8000938:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800093a:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <HAL_SPI_MspInit+0xf0>)
 800093c:	2210      	movs	r2, #16
 800093e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000940:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <HAL_SPI_MspInit+0xf0>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000946:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <HAL_SPI_MspInit+0xf0>)
 8000948:	2280      	movs	r2, #128	@ 0x80
 800094a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800094c:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <HAL_SPI_MspInit+0xf0>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <HAL_SPI_MspInit+0xf0>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <HAL_SPI_MspInit+0xf0>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <HAL_SPI_MspInit+0xf0>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000964:	480f      	ldr	r0, [pc, #60]	@ (80009a4 <HAL_SPI_MspInit+0xf0>)
 8000966:	f000 fc9f 	bl	80012a8 <HAL_DMA_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8000970:	f7ff ff2c 	bl	80007cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a0b      	ldr	r2, [pc, #44]	@ (80009a4 <HAL_SPI_MspInit+0xf0>)
 8000978:	649a      	str	r2, [r3, #72]	@ 0x48
 800097a:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <HAL_SPI_MspInit+0xf0>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2023      	movs	r0, #35	@ 0x23
 8000986:	f000 fc58 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800098a:	2023      	movs	r0, #35	@ 0x23
 800098c:	f000 fc71 	bl	8001272 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000990:	bf00      	nop
 8000992:	3720      	adds	r7, #32
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40013000 	.word	0x40013000
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010800 	.word	0x40010800
 80009a4:	20000118 	.word	0x20000118
 80009a8:	40020030 	.word	0x40020030

080009ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <HAL_TIM_Base_MspInit+0x44>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d113      	bne.n	80009e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009be:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <HAL_TIM_Base_MspInit+0x48>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	4a0c      	ldr	r2, [pc, #48]	@ (80009f4 <HAL_TIM_Base_MspInit+0x48>)
 80009c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009c8:	6193      	str	r3, [r2, #24]
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <HAL_TIM_Base_MspInit+0x48>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2019      	movs	r0, #25
 80009dc:	f000 fc2d 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80009e0:	2019      	movs	r0, #25
 80009e2:	f000 fc46 	bl	8001272 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40012c00 	.word	0x40012c00
 80009f4:	40021000 	.word	0x40021000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <NMI_Handler+0x4>

08000a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <MemManage_Handler+0x4>

08000a10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f8ce 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000a54:	4802      	ldr	r0, [pc, #8]	@ (8000a60 <DMA1_Channel3_IRQHandler+0x10>)
 8000a56:	f000 fcf9 	bl	800144c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000118 	.word	0x20000118

08000a64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 8000a68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a6c:	4803      	ldr	r0, [pc, #12]	@ (8000a7c <TIM1_UP_IRQHandler+0x18>)
 8000a6e:	f000 ff87 	bl	8001980 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a72:	4803      	ldr	r0, [pc, #12]	@ (8000a80 <TIM1_UP_IRQHandler+0x1c>)
 8000a74:	f002 fa2c 	bl	8002ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40011000 	.word	0x40011000
 8000a80:	2000015c 	.word	0x2000015c

08000a84 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000a88:	4802      	ldr	r0, [pc, #8]	@ (8000a94 <SPI1_IRQHandler+0x10>)
 8000a8a:	f001 ffd1 	bl	8002a30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000c0 	.word	0x200000c0

08000a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa0:	4a14      	ldr	r2, [pc, #80]	@ (8000af4 <_sbrk+0x5c>)
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <_sbrk+0x60>)
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <_sbrk+0x64>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <_sbrk+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d207      	bcs.n	8000ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac8:	f006 f986 	bl	8006dd8 <__errno>
 8000acc:	4603      	mov	r3, r0
 8000ace:	220c      	movs	r2, #12
 8000ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	e009      	b.n	8000aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ade:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a05      	ldr	r2, [pc, #20]	@ (8000afc <_sbrk+0x64>)
 8000ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20002800 	.word	0x20002800
 8000af8:	00000400 	.word	0x00000400
 8000afc:	200002a8 	.word	0x200002a8
 8000b00:	20000438 	.word	0x20000438

08000b04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b10:	f7ff fff8 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480b      	ldr	r0, [pc, #44]	@ (8000b44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b16:	490c      	ldr	r1, [pc, #48]	@ (8000b48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b18:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a09      	ldr	r2, [pc, #36]	@ (8000b50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b2c:	4c09      	ldr	r4, [pc, #36]	@ (8000b54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f006 f953 	bl	8006de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3e:	f7ff fb35 	bl	80001ac <main>
  bx lr
 8000b42:	4770      	bx	lr
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b4c:	080079e4 	.word	0x080079e4
  ldr r2, =_sbss
 8000b50:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b54:	20000438 	.word	0x20000438

08000b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_2_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <HAL_Init+0x28>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	@ (8000b84 <HAL_Init+0x28>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 fb59 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	200f      	movs	r0, #15
 8000b74:	f000 f808 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b78:	f7ff fe2e 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40022000 	.word	0x40022000

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <HAL_InitTick+0x54>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_InitTick+0x58>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 fb71 	bl	800128e <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00e      	b.n	8000bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d80a      	bhi.n	8000bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f000 fb39 	bl	800123a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc8:	4a06      	ldr	r2, [pc, #24]	@ (8000be4 <HAL_InitTick+0x5c>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000004 	.word	0x20000004

08000be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <HAL_IncTick+0x1c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <HAL_IncTick+0x20>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a03      	ldr	r2, [pc, #12]	@ (8000c08 <HAL_IncTick+0x20>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	20000008 	.word	0x20000008
 8000c08:	200002ac 	.word	0x200002ac

08000c0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b02      	ldr	r3, [pc, #8]	@ (8000c1c <HAL_GetTick+0x10>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	200002ac 	.word	0x200002ac

08000c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff fff0 	bl	8000c0c <HAL_GetTick>
 8000c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d005      	beq.n	8000c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <HAL_Delay+0x44>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c46:	bf00      	nop
 8000c48:	f7ff ffe0 	bl	8000c0c <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f7      	bhi.n	8000c48 <HAL_Delay+0x28>
  {
  }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008

08000c68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e0be      	b.n	8000e08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d109      	bne.n	8000cac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff fdc8 	bl	800083c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f000 f9ab 	bl	8001008 <ADC_ConversionStop_Disable>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8099 	bne.w	8000df6 <HAL_ADC_Init+0x18e>
 8000cc4:	7dfb      	ldrb	r3, [r7, #23]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 8095 	bne.w	8000df6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cd0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000cd4:	f023 0302 	bic.w	r3, r3, #2
 8000cd8:	f043 0202 	orr.w	r2, r3, #2
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ce8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7b1b      	ldrb	r3, [r3, #12]
 8000cee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cf0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d00:	d003      	beq.n	8000d0a <HAL_ADC_Init+0xa2>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d102      	bne.n	8000d10 <HAL_ADC_Init+0xa8>
 8000d0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d0e:	e000      	b.n	8000d12 <HAL_ADC_Init+0xaa>
 8000d10:	2300      	movs	r3, #0
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7d1b      	ldrb	r3, [r3, #20]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d119      	bne.n	8000d54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7b1b      	ldrb	r3, [r3, #12]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d109      	bne.n	8000d3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	035a      	lsls	r2, r3, #13
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	e00b      	b.n	8000d54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d40:	f043 0220 	orr.w	r2, r3, #32
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d4c:	f043 0201 	orr.w	r2, r3, #1
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	430a      	orrs	r2, r1
 8000d66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	4b28      	ldr	r3, [pc, #160]	@ (8000e10 <HAL_ADC_Init+0x1a8>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d84:	d003      	beq.n	8000d8e <HAL_ADC_Init+0x126>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d104      	bne.n	8000d98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	051b      	lsls	r3, r3, #20
 8000d96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d9e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <HAL_ADC_Init+0x1ac>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d10b      	bne.n	8000dd4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc6:	f023 0303 	bic.w	r3, r3, #3
 8000dca:	f043 0201 	orr.w	r2, r3, #1
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dd2:	e018      	b.n	8000e06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd8:	f023 0312 	bic.w	r3, r3, #18
 8000ddc:	f043 0210 	orr.w	r2, r3, #16
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de8:	f043 0201 	orr.w	r2, r3, #1
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000df4:	e007      	b.n	8000e06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dfa:	f043 0210 	orr.w	r2, r3, #16
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	ffe1f7fd 	.word	0xffe1f7fd
 8000e14:	ff1f0efe 	.word	0xff1f0efe

08000e18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d101      	bne.n	8000e38 <HAL_ADC_ConfigChannel+0x20>
 8000e34:	2302      	movs	r3, #2
 8000e36:	e0dc      	b.n	8000ff2 <HAL_ADC_ConfigChannel+0x1da>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b06      	cmp	r3, #6
 8000e46:	d81c      	bhi.n	8000e82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	3b05      	subs	r3, #5
 8000e5a:	221f      	movs	r2, #31
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	4019      	ands	r1, r3
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	6818      	ldr	r0, [r3, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	3b05      	subs	r3, #5
 8000e74:	fa00 f203 	lsl.w	r2, r0, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e80:	e03c      	b.n	8000efc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b0c      	cmp	r3, #12
 8000e88:	d81c      	bhi.n	8000ec4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	3b23      	subs	r3, #35	@ 0x23
 8000e9c:	221f      	movs	r2, #31
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	4019      	ands	r1, r3
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	6818      	ldr	r0, [r3, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3b23      	subs	r3, #35	@ 0x23
 8000eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ec2:	e01b      	b.n	8000efc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3b41      	subs	r3, #65	@ 0x41
 8000ed6:	221f      	movs	r2, #31
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	4019      	ands	r1, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	3b41      	subs	r3, #65	@ 0x41
 8000ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b09      	cmp	r3, #9
 8000f02:	d91c      	bls.n	8000f3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68d9      	ldr	r1, [r3, #12]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	3b1e      	subs	r3, #30
 8000f16:	2207      	movs	r2, #7
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	4019      	ands	r1, r3
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	6898      	ldr	r0, [r3, #8]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	3b1e      	subs	r3, #30
 8000f30:	fa00 f203 	lsl.w	r2, r0, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	e019      	b.n	8000f72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6919      	ldr	r1, [r3, #16]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	2207      	movs	r2, #7
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	4019      	ands	r1, r3
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	6898      	ldr	r0, [r3, #8]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	fa00 f203 	lsl.w	r2, r0, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b10      	cmp	r3, #16
 8000f78:	d003      	beq.n	8000f82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f7e:	2b11      	cmp	r3, #17
 8000f80:	d132      	bne.n	8000fe8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a1d      	ldr	r2, [pc, #116]	@ (8000ffc <HAL_ADC_ConfigChannel+0x1e4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d125      	bne.n	8000fd8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d126      	bne.n	8000fe8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000fa8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b10      	cmp	r3, #16
 8000fb0:	d11a      	bne.n	8000fe8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fb2:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <HAL_ADC_ConfigChannel+0x1e8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a13      	ldr	r2, [pc, #76]	@ (8001004 <HAL_ADC_ConfigChannel+0x1ec>)
 8000fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbc:	0c9a      	lsrs	r2, r3, #18
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fc8:	e002      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f9      	bne.n	8000fca <HAL_ADC_ConfigChannel+0x1b2>
 8000fd6:	e007      	b.n	8000fe8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fdc:	f043 0220 	orr.w	r2, r3, #32
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	40012400 	.word	0x40012400
 8001000:	20000000 	.word	0x20000000
 8001004:	431bde83 	.word	0x431bde83

08001008 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b01      	cmp	r3, #1
 8001020:	d12e      	bne.n	8001080 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0201 	bic.w	r2, r2, #1
 8001030:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001032:	f7ff fdeb 	bl	8000c0c <HAL_GetTick>
 8001036:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001038:	e01b      	b.n	8001072 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800103a:	f7ff fde7 	bl	8000c0c <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d914      	bls.n	8001072 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b01      	cmp	r3, #1
 8001054:	d10d      	bne.n	8001072 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800105a:	f043 0210 	orr.w	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001066:	f043 0201 	orr.w	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e007      	b.n	8001082 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b01      	cmp	r3, #1
 800107e:	d0dc      	beq.n	800103a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4906      	ldr	r1, [pc, #24]	@ (8001124 <__NVIC_EnableIRQ+0x34>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	@ (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	@ (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	@ 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	@ 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff90 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff2d 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff42 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff90 	bl	800117c <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5f 	bl	8001128 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff35 	bl	80010f0 <__NVIC_EnableIRQ>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffa2 	bl	80011e0 <SysTick_Config>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e043      	b.n	8001346 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <HAL_DMA_Init+0xa8>)
 80012c6:	4413      	add	r3, r2
 80012c8:	4a22      	ldr	r2, [pc, #136]	@ (8001354 <HAL_DMA_Init+0xac>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	009a      	lsls	r2, r3, #2
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001358 <HAL_DMA_Init+0xb0>)
 80012da:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2202      	movs	r2, #2
 80012e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80012f2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001300:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800130c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001318:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	bffdfff8 	.word	0xbffdfff8
 8001354:	cccccccd 	.word	0xcccccccd
 8001358:	40020000 	.word	0x40020000

0800135c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d005      	beq.n	8001380 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2204      	movs	r2, #4
 8001378:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
 800137e:	e051      	b.n	8001424 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 020e 	bic.w	r2, r2, #14
 800138e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a22      	ldr	r2, [pc, #136]	@ (8001430 <HAL_DMA_Abort_IT+0xd4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d029      	beq.n	80013fe <HAL_DMA_Abort_IT+0xa2>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a21      	ldr	r2, [pc, #132]	@ (8001434 <HAL_DMA_Abort_IT+0xd8>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d022      	beq.n	80013fa <HAL_DMA_Abort_IT+0x9e>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001438 <HAL_DMA_Abort_IT+0xdc>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01a      	beq.n	80013f4 <HAL_DMA_Abort_IT+0x98>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a1e      	ldr	r2, [pc, #120]	@ (800143c <HAL_DMA_Abort_IT+0xe0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d012      	beq.n	80013ee <HAL_DMA_Abort_IT+0x92>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001440 <HAL_DMA_Abort_IT+0xe4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00a      	beq.n	80013e8 <HAL_DMA_Abort_IT+0x8c>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001444 <HAL_DMA_Abort_IT+0xe8>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d102      	bne.n	80013e2 <HAL_DMA_Abort_IT+0x86>
 80013dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013e0:	e00e      	b.n	8001400 <HAL_DMA_Abort_IT+0xa4>
 80013e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013e6:	e00b      	b.n	8001400 <HAL_DMA_Abort_IT+0xa4>
 80013e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ec:	e008      	b.n	8001400 <HAL_DMA_Abort_IT+0xa4>
 80013ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f2:	e005      	b.n	8001400 <HAL_DMA_Abort_IT+0xa4>
 80013f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013f8:	e002      	b.n	8001400 <HAL_DMA_Abort_IT+0xa4>
 80013fa:	2310      	movs	r3, #16
 80013fc:	e000      	b.n	8001400 <HAL_DMA_Abort_IT+0xa4>
 80013fe:	2301      	movs	r3, #1
 8001400:	4a11      	ldr	r2, [pc, #68]	@ (8001448 <HAL_DMA_Abort_IT+0xec>)
 8001402:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	4798      	blx	r3
    } 
  }
  return status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40020008 	.word	0x40020008
 8001434:	4002001c 	.word	0x4002001c
 8001438:	40020030 	.word	0x40020030
 800143c:	40020044 	.word	0x40020044
 8001440:	40020058 	.word	0x40020058
 8001444:	4002006c 	.word	0x4002006c
 8001448:	40020000 	.word	0x40020000

0800144c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	2204      	movs	r2, #4
 800146a:	409a      	lsls	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4013      	ands	r3, r2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d04f      	beq.n	8001514 <HAL_DMA_IRQHandler+0xc8>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d04a      	beq.n	8001514 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	2b00      	cmp	r3, #0
 800148a:	d107      	bne.n	800149c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0204 	bic.w	r2, r2, #4
 800149a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a66      	ldr	r2, [pc, #408]	@ (800163c <HAL_DMA_IRQHandler+0x1f0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d029      	beq.n	80014fa <HAL_DMA_IRQHandler+0xae>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a65      	ldr	r2, [pc, #404]	@ (8001640 <HAL_DMA_IRQHandler+0x1f4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d022      	beq.n	80014f6 <HAL_DMA_IRQHandler+0xaa>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a63      	ldr	r2, [pc, #396]	@ (8001644 <HAL_DMA_IRQHandler+0x1f8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d01a      	beq.n	80014f0 <HAL_DMA_IRQHandler+0xa4>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a62      	ldr	r2, [pc, #392]	@ (8001648 <HAL_DMA_IRQHandler+0x1fc>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d012      	beq.n	80014ea <HAL_DMA_IRQHandler+0x9e>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a60      	ldr	r2, [pc, #384]	@ (800164c <HAL_DMA_IRQHandler+0x200>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00a      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x98>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001650 <HAL_DMA_IRQHandler+0x204>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d102      	bne.n	80014de <HAL_DMA_IRQHandler+0x92>
 80014d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014dc:	e00e      	b.n	80014fc <HAL_DMA_IRQHandler+0xb0>
 80014de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80014e2:	e00b      	b.n	80014fc <HAL_DMA_IRQHandler+0xb0>
 80014e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80014e8:	e008      	b.n	80014fc <HAL_DMA_IRQHandler+0xb0>
 80014ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014ee:	e005      	b.n	80014fc <HAL_DMA_IRQHandler+0xb0>
 80014f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014f4:	e002      	b.n	80014fc <HAL_DMA_IRQHandler+0xb0>
 80014f6:	2340      	movs	r3, #64	@ 0x40
 80014f8:	e000      	b.n	80014fc <HAL_DMA_IRQHandler+0xb0>
 80014fa:	2304      	movs	r3, #4
 80014fc:	4a55      	ldr	r2, [pc, #340]	@ (8001654 <HAL_DMA_IRQHandler+0x208>)
 80014fe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 8094 	beq.w	8001632 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001512:	e08e      	b.n	8001632 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001518:	2202      	movs	r2, #2
 800151a:	409a      	lsls	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4013      	ands	r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d056      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x186>
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d051      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10b      	bne.n	8001554 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 020a 	bic.w	r2, r2, #10
 800154a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a38      	ldr	r2, [pc, #224]	@ (800163c <HAL_DMA_IRQHandler+0x1f0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d029      	beq.n	80015b2 <HAL_DMA_IRQHandler+0x166>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a37      	ldr	r2, [pc, #220]	@ (8001640 <HAL_DMA_IRQHandler+0x1f4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d022      	beq.n	80015ae <HAL_DMA_IRQHandler+0x162>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a35      	ldr	r2, [pc, #212]	@ (8001644 <HAL_DMA_IRQHandler+0x1f8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d01a      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x15c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a34      	ldr	r2, [pc, #208]	@ (8001648 <HAL_DMA_IRQHandler+0x1fc>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d012      	beq.n	80015a2 <HAL_DMA_IRQHandler+0x156>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a32      	ldr	r2, [pc, #200]	@ (800164c <HAL_DMA_IRQHandler+0x200>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00a      	beq.n	800159c <HAL_DMA_IRQHandler+0x150>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a31      	ldr	r2, [pc, #196]	@ (8001650 <HAL_DMA_IRQHandler+0x204>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d102      	bne.n	8001596 <HAL_DMA_IRQHandler+0x14a>
 8001590:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001594:	e00e      	b.n	80015b4 <HAL_DMA_IRQHandler+0x168>
 8001596:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800159a:	e00b      	b.n	80015b4 <HAL_DMA_IRQHandler+0x168>
 800159c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015a0:	e008      	b.n	80015b4 <HAL_DMA_IRQHandler+0x168>
 80015a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015a6:	e005      	b.n	80015b4 <HAL_DMA_IRQHandler+0x168>
 80015a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015ac:	e002      	b.n	80015b4 <HAL_DMA_IRQHandler+0x168>
 80015ae:	2320      	movs	r3, #32
 80015b0:	e000      	b.n	80015b4 <HAL_DMA_IRQHandler+0x168>
 80015b2:	2302      	movs	r3, #2
 80015b4:	4a27      	ldr	r2, [pc, #156]	@ (8001654 <HAL_DMA_IRQHandler+0x208>)
 80015b6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d034      	beq.n	8001632 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015d0:	e02f      	b.n	8001632 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	2208      	movs	r2, #8
 80015d8:	409a      	lsls	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d028      	beq.n	8001634 <HAL_DMA_IRQHandler+0x1e8>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d023      	beq.n	8001634 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 020e 	bic.w	r2, r2, #14
 80015fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001604:	2101      	movs	r1, #1
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
    }
  }
  return;
 8001632:	bf00      	nop
 8001634:	bf00      	nop
}
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40020008 	.word	0x40020008
 8001640:	4002001c 	.word	0x4002001c
 8001644:	40020030 	.word	0x40020030
 8001648:	40020044 	.word	0x40020044
 800164c:	40020058 	.word	0x40020058
 8001650:	4002006c 	.word	0x4002006c
 8001654:	40020000 	.word	0x40020000

08001658 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001658:	b480      	push	{r7}
 800165a:	b08b      	sub	sp, #44	@ 0x2c
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166a:	e161      	b.n	8001930 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800166c:	2201      	movs	r2, #1
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	429a      	cmp	r2, r3
 8001686:	f040 8150 	bne.w	800192a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4a97      	ldr	r2, [pc, #604]	@ (80018ec <HAL_GPIO_Init+0x294>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d05e      	beq.n	8001752 <HAL_GPIO_Init+0xfa>
 8001694:	4a95      	ldr	r2, [pc, #596]	@ (80018ec <HAL_GPIO_Init+0x294>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d875      	bhi.n	8001786 <HAL_GPIO_Init+0x12e>
 800169a:	4a95      	ldr	r2, [pc, #596]	@ (80018f0 <HAL_GPIO_Init+0x298>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d058      	beq.n	8001752 <HAL_GPIO_Init+0xfa>
 80016a0:	4a93      	ldr	r2, [pc, #588]	@ (80018f0 <HAL_GPIO_Init+0x298>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d86f      	bhi.n	8001786 <HAL_GPIO_Init+0x12e>
 80016a6:	4a93      	ldr	r2, [pc, #588]	@ (80018f4 <HAL_GPIO_Init+0x29c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d052      	beq.n	8001752 <HAL_GPIO_Init+0xfa>
 80016ac:	4a91      	ldr	r2, [pc, #580]	@ (80018f4 <HAL_GPIO_Init+0x29c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d869      	bhi.n	8001786 <HAL_GPIO_Init+0x12e>
 80016b2:	4a91      	ldr	r2, [pc, #580]	@ (80018f8 <HAL_GPIO_Init+0x2a0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d04c      	beq.n	8001752 <HAL_GPIO_Init+0xfa>
 80016b8:	4a8f      	ldr	r2, [pc, #572]	@ (80018f8 <HAL_GPIO_Init+0x2a0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d863      	bhi.n	8001786 <HAL_GPIO_Init+0x12e>
 80016be:	4a8f      	ldr	r2, [pc, #572]	@ (80018fc <HAL_GPIO_Init+0x2a4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d046      	beq.n	8001752 <HAL_GPIO_Init+0xfa>
 80016c4:	4a8d      	ldr	r2, [pc, #564]	@ (80018fc <HAL_GPIO_Init+0x2a4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d85d      	bhi.n	8001786 <HAL_GPIO_Init+0x12e>
 80016ca:	2b12      	cmp	r3, #18
 80016cc:	d82a      	bhi.n	8001724 <HAL_GPIO_Init+0xcc>
 80016ce:	2b12      	cmp	r3, #18
 80016d0:	d859      	bhi.n	8001786 <HAL_GPIO_Init+0x12e>
 80016d2:	a201      	add	r2, pc, #4	@ (adr r2, 80016d8 <HAL_GPIO_Init+0x80>)
 80016d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d8:	08001753 	.word	0x08001753
 80016dc:	0800172d 	.word	0x0800172d
 80016e0:	0800173f 	.word	0x0800173f
 80016e4:	08001781 	.word	0x08001781
 80016e8:	08001787 	.word	0x08001787
 80016ec:	08001787 	.word	0x08001787
 80016f0:	08001787 	.word	0x08001787
 80016f4:	08001787 	.word	0x08001787
 80016f8:	08001787 	.word	0x08001787
 80016fc:	08001787 	.word	0x08001787
 8001700:	08001787 	.word	0x08001787
 8001704:	08001787 	.word	0x08001787
 8001708:	08001787 	.word	0x08001787
 800170c:	08001787 	.word	0x08001787
 8001710:	08001787 	.word	0x08001787
 8001714:	08001787 	.word	0x08001787
 8001718:	08001787 	.word	0x08001787
 800171c:	08001735 	.word	0x08001735
 8001720:	08001749 	.word	0x08001749
 8001724:	4a76      	ldr	r2, [pc, #472]	@ (8001900 <HAL_GPIO_Init+0x2a8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d013      	beq.n	8001752 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800172a:	e02c      	b.n	8001786 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	623b      	str	r3, [r7, #32]
          break;
 8001732:	e029      	b.n	8001788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	3304      	adds	r3, #4
 800173a:	623b      	str	r3, [r7, #32]
          break;
 800173c:	e024      	b.n	8001788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	3308      	adds	r3, #8
 8001744:	623b      	str	r3, [r7, #32]
          break;
 8001746:	e01f      	b.n	8001788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	330c      	adds	r3, #12
 800174e:	623b      	str	r3, [r7, #32]
          break;
 8001750:	e01a      	b.n	8001788 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800175a:	2304      	movs	r3, #4
 800175c:	623b      	str	r3, [r7, #32]
          break;
 800175e:	e013      	b.n	8001788 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d105      	bne.n	8001774 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001768:	2308      	movs	r3, #8
 800176a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	611a      	str	r2, [r3, #16]
          break;
 8001772:	e009      	b.n	8001788 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001774:	2308      	movs	r3, #8
 8001776:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	615a      	str	r2, [r3, #20]
          break;
 800177e:	e003      	b.n	8001788 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
          break;
 8001784:	e000      	b.n	8001788 <HAL_GPIO_Init+0x130>
          break;
 8001786:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2bff      	cmp	r3, #255	@ 0xff
 800178c:	d801      	bhi.n	8001792 <HAL_GPIO_Init+0x13a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	e001      	b.n	8001796 <HAL_GPIO_Init+0x13e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3304      	adds	r3, #4
 8001796:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2bff      	cmp	r3, #255	@ 0xff
 800179c:	d802      	bhi.n	80017a4 <HAL_GPIO_Init+0x14c>
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	e002      	b.n	80017aa <HAL_GPIO_Init+0x152>
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a6:	3b08      	subs	r3, #8
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	210f      	movs	r1, #15
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	401a      	ands	r2, r3
 80017bc:	6a39      	ldr	r1, [r7, #32]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	431a      	orrs	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 80a9 	beq.w	800192a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001904 <HAL_GPIO_Init+0x2ac>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a49      	ldr	r2, [pc, #292]	@ (8001904 <HAL_GPIO_Init+0x2ac>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b47      	ldr	r3, [pc, #284]	@ (8001904 <HAL_GPIO_Init+0x2ac>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017f0:	4a45      	ldr	r2, [pc, #276]	@ (8001908 <HAL_GPIO_Init+0x2b0>)
 80017f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	220f      	movs	r2, #15
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4013      	ands	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a3d      	ldr	r2, [pc, #244]	@ (800190c <HAL_GPIO_Init+0x2b4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00d      	beq.n	8001838 <HAL_GPIO_Init+0x1e0>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a3c      	ldr	r2, [pc, #240]	@ (8001910 <HAL_GPIO_Init+0x2b8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d007      	beq.n	8001834 <HAL_GPIO_Init+0x1dc>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a3b      	ldr	r2, [pc, #236]	@ (8001914 <HAL_GPIO_Init+0x2bc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d101      	bne.n	8001830 <HAL_GPIO_Init+0x1d8>
 800182c:	2302      	movs	r3, #2
 800182e:	e004      	b.n	800183a <HAL_GPIO_Init+0x1e2>
 8001830:	2303      	movs	r3, #3
 8001832:	e002      	b.n	800183a <HAL_GPIO_Init+0x1e2>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <HAL_GPIO_Init+0x1e2>
 8001838:	2300      	movs	r3, #0
 800183a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800183c:	f002 0203 	and.w	r2, r2, #3
 8001840:	0092      	lsls	r2, r2, #2
 8001842:	4093      	lsls	r3, r2
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800184a:	492f      	ldr	r1, [pc, #188]	@ (8001908 <HAL_GPIO_Init+0x2b0>)
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3302      	adds	r3, #2
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001864:	4b2c      	ldr	r3, [pc, #176]	@ (8001918 <HAL_GPIO_Init+0x2c0>)
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	492b      	ldr	r1, [pc, #172]	@ (8001918 <HAL_GPIO_Init+0x2c0>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	608b      	str	r3, [r1, #8]
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001872:	4b29      	ldr	r3, [pc, #164]	@ (8001918 <HAL_GPIO_Init+0x2c0>)
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	43db      	mvns	r3, r3
 800187a:	4927      	ldr	r1, [pc, #156]	@ (8001918 <HAL_GPIO_Init+0x2c0>)
 800187c:	4013      	ands	r3, r2
 800187e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800188c:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <HAL_GPIO_Init+0x2c0>)
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	4921      	ldr	r1, [pc, #132]	@ (8001918 <HAL_GPIO_Init+0x2c0>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	60cb      	str	r3, [r1, #12]
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800189a:	4b1f      	ldr	r3, [pc, #124]	@ (8001918 <HAL_GPIO_Init+0x2c0>)
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	491d      	ldr	r1, [pc, #116]	@ (8001918 <HAL_GPIO_Init+0x2c0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b4:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <HAL_GPIO_Init+0x2c0>)
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4917      	ldr	r1, [pc, #92]	@ (8001918 <HAL_GPIO_Init+0x2c0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c2:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <HAL_GPIO_Init+0x2c0>)
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	4913      	ldr	r1, [pc, #76]	@ (8001918 <HAL_GPIO_Init+0x2c0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d01f      	beq.n	800191c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <HAL_GPIO_Init+0x2c0>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	490d      	ldr	r1, [pc, #52]	@ (8001918 <HAL_GPIO_Init+0x2c0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
 80018e8:	e01f      	b.n	800192a <HAL_GPIO_Init+0x2d2>
 80018ea:	bf00      	nop
 80018ec:	10320000 	.word	0x10320000
 80018f0:	10310000 	.word	0x10310000
 80018f4:	10220000 	.word	0x10220000
 80018f8:	10210000 	.word	0x10210000
 80018fc:	10120000 	.word	0x10120000
 8001900:	10110000 	.word	0x10110000
 8001904:	40021000 	.word	0x40021000
 8001908:	40010000 	.word	0x40010000
 800190c:	40010800 	.word	0x40010800
 8001910:	40010c00 	.word	0x40010c00
 8001914:	40011000 	.word	0x40011000
 8001918:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800191c:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <HAL_GPIO_Init+0x2f4>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	43db      	mvns	r3, r3
 8001924:	4909      	ldr	r1, [pc, #36]	@ (800194c <HAL_GPIO_Init+0x2f4>)
 8001926:	4013      	ands	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	3301      	adds	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	f47f ae96 	bne.w	800166c <HAL_GPIO_Init+0x14>
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	372c      	adds	r7, #44	@ 0x2c
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	40010400 	.word	0x40010400

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	611a      	str	r2, [r3, #16]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4013      	ands	r3, r2
 8001998:	041a      	lsls	r2, r3, #16
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43d9      	mvns	r1, r3
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	400b      	ands	r3, r1
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	611a      	str	r2, [r3, #16]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
	...

080019b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e272      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 8087 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d4:	4b92      	ldr	r3, [pc, #584]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d00c      	beq.n	80019fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d112      	bne.n	8001a12 <HAL_RCC_OscConfig+0x5e>
 80019ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f8:	d10b      	bne.n	8001a12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fa:	4b89      	ldr	r3, [pc, #548]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d06c      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x12c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d168      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e24c      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x76>
 8001a1c:	4b80      	ldr	r3, [pc, #512]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a7f      	ldr	r2, [pc, #508]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	e02e      	b.n	8001a88 <HAL_RCC_OscConfig+0xd4>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x98>
 8001a32:	4b7b      	ldr	r3, [pc, #492]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a7a      	ldr	r2, [pc, #488]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	4b78      	ldr	r3, [pc, #480]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a77      	ldr	r2, [pc, #476]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e01d      	b.n	8001a88 <HAL_RCC_OscConfig+0xd4>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0xbc>
 8001a56:	4b72      	ldr	r3, [pc, #456]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a71      	ldr	r2, [pc, #452]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b6f      	ldr	r3, [pc, #444]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6e      	ldr	r2, [pc, #440]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e00b      	b.n	8001a88 <HAL_RCC_OscConfig+0xd4>
 8001a70:	4b6b      	ldr	r3, [pc, #428]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a6a      	ldr	r2, [pc, #424]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b68      	ldr	r3, [pc, #416]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a67      	ldr	r2, [pc, #412]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d013      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff f8bc 	bl	8000c0c <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a98:	f7ff f8b8 	bl	8000c0c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	@ 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e200      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0xe4>
 8001ab6:	e014      	b.n	8001ae2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f8a8 	bl	8000c0c <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7ff f8a4 	bl	8000c0c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	@ 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e1ec      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	4b53      	ldr	r3, [pc, #332]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d063      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aee:	4b4c      	ldr	r3, [pc, #304]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00b      	beq.n	8001b12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001afa:	4b49      	ldr	r3, [pc, #292]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d11c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x18c>
 8001b06:	4b46      	ldr	r3, [pc, #280]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d116      	bne.n	8001b40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	4b43      	ldr	r3, [pc, #268]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d005      	beq.n	8001b2a <HAL_RCC_OscConfig+0x176>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e1c0      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4939      	ldr	r1, [pc, #228]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	e03a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d020      	beq.n	8001b8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b48:	4b36      	ldr	r3, [pc, #216]	@ (8001c24 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff f85d 	bl	8000c0c <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b56:	f7ff f859 	bl	8000c0c <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e1a1      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b68:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b74:	4b2a      	ldr	r3, [pc, #168]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4927      	ldr	r1, [pc, #156]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
 8001b88:	e015      	b.n	8001bb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8a:	4b26      	ldr	r3, [pc, #152]	@ (8001c24 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff f83c 	bl	8000c0c <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b98:	f7ff f838 	bl	8000c0c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e180      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d03a      	beq.n	8001c38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d019      	beq.n	8001bfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bca:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd0:	f7ff f81c 	bl	8000c0c <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff f818 	bl	8000c0c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e160      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f000 fad4 	bl	80021a4 <RCC_Delay>
 8001bfc:	e01c      	b.n	8001c38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c04:	f7ff f802 	bl	8000c0c <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0a:	e00f      	b.n	8001c2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7fe fffe 	bl	8000c0c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d908      	bls.n	8001c2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e146      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	42420000 	.word	0x42420000
 8001c28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	4b92      	ldr	r3, [pc, #584]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1e9      	bne.n	8001c0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80a6 	beq.w	8001d92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4a:	4b8b      	ldr	r3, [pc, #556]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10d      	bne.n	8001c72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b88      	ldr	r3, [pc, #544]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4a87      	ldr	r2, [pc, #540]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	61d3      	str	r3, [r2, #28]
 8001c62:	4b85      	ldr	r3, [pc, #532]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c72:	4b82      	ldr	r3, [pc, #520]	@ (8001e7c <HAL_RCC_OscConfig+0x4c8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e7c <HAL_RCC_OscConfig+0x4c8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a7e      	ldr	r2, [pc, #504]	@ (8001e7c <HAL_RCC_OscConfig+0x4c8>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7fe ffbf 	bl	8000c0c <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c92:	f7fe ffbb 	bl	8000c0c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b64      	cmp	r3, #100	@ 0x64
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e103      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	4b75      	ldr	r3, [pc, #468]	@ (8001e7c <HAL_RCC_OscConfig+0x4c8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x312>
 8001cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4a6e      	ldr	r2, [pc, #440]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6213      	str	r3, [r2, #32]
 8001cc4:	e02d      	b.n	8001d22 <HAL_RCC_OscConfig+0x36e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x334>
 8001cce:	4b6a      	ldr	r3, [pc, #424]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a69      	ldr	r2, [pc, #420]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	4b67      	ldr	r3, [pc, #412]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4a66      	ldr	r2, [pc, #408]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	f023 0304 	bic.w	r3, r3, #4
 8001ce4:	6213      	str	r3, [r2, #32]
 8001ce6:	e01c      	b.n	8001d22 <HAL_RCC_OscConfig+0x36e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d10c      	bne.n	8001d0a <HAL_RCC_OscConfig+0x356>
 8001cf0:	4b61      	ldr	r3, [pc, #388]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4a60      	ldr	r2, [pc, #384]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6213      	str	r3, [r2, #32]
 8001cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4a5d      	ldr	r2, [pc, #372]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6213      	str	r3, [r2, #32]
 8001d08:	e00b      	b.n	8001d22 <HAL_RCC_OscConfig+0x36e>
 8001d0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a5a      	ldr	r2, [pc, #360]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	6213      	str	r3, [r2, #32]
 8001d16:	4b58      	ldr	r3, [pc, #352]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a57      	ldr	r2, [pc, #348]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d015      	beq.n	8001d56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7fe ff6f 	bl	8000c0c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7fe ff6b 	bl	8000c0c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e0b1      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d48:	4b4b      	ldr	r3, [pc, #300]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0ee      	beq.n	8001d32 <HAL_RCC_OscConfig+0x37e>
 8001d54:	e014      	b.n	8001d80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d56:	f7fe ff59 	bl	8000c0c <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7fe ff55 	bl	8000c0c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e09b      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d74:	4b40      	ldr	r3, [pc, #256]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1ee      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d105      	bne.n	8001d92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d86:	4b3c      	ldr	r3, [pc, #240]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8087 	beq.w	8001eaa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9c:	4b36      	ldr	r3, [pc, #216]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d061      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d146      	bne.n	8001e3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db0:	4b33      	ldr	r3, [pc, #204]	@ (8001e80 <HAL_RCC_OscConfig+0x4cc>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7fe ff29 	bl	8000c0c <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7fe ff25 	bl	8000c0c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e06d      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd0:	4b29      	ldr	r3, [pc, #164]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de4:	d108      	bne.n	8001df8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001de6:	4b24      	ldr	r3, [pc, #144]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	4921      	ldr	r1, [pc, #132]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a19      	ldr	r1, [r3, #32]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	491b      	ldr	r1, [pc, #108]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e10:	4b1b      	ldr	r3, [pc, #108]	@ (8001e80 <HAL_RCC_OscConfig+0x4cc>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7fe fef9 	bl	8000c0c <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7fe fef5 	bl	8000c0c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e03d      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x46a>
 8001e3c:	e035      	b.n	8001eaa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <HAL_RCC_OscConfig+0x4cc>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7fe fee2 	bl	8000c0c <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7fe fede 	bl	8000c0c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e026      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x498>
 8001e6a:	e01e      	b.n	8001eaa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e019      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e84:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <HAL_RCC_OscConfig+0x500>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d106      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0d0      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b6a      	ldr	r3, [pc, #424]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d910      	bls.n	8001efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b67      	ldr	r3, [pc, #412]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 0207 	bic.w	r2, r3, #7
 8001ee2:	4965      	ldr	r1, [pc, #404]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	4b63      	ldr	r3, [pc, #396]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0b8      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d020      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f14:	4b59      	ldr	r3, [pc, #356]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4a58      	ldr	r2, [pc, #352]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f2c:	4b53      	ldr	r3, [pc, #332]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a52      	ldr	r2, [pc, #328]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f38:	4b50      	ldr	r3, [pc, #320]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	494d      	ldr	r1, [pc, #308]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d040      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	4b47      	ldr	r3, [pc, #284]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d115      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e07f      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f76:	4b41      	ldr	r3, [pc, #260]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e073      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f86:	4b3d      	ldr	r3, [pc, #244]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e06b      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f96:	4b39      	ldr	r3, [pc, #228]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f023 0203 	bic.w	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4936      	ldr	r1, [pc, #216]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fe30 	bl	8000c0c <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7fe fe2c 	bl	8000c0c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e053      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 020c 	and.w	r2, r3, #12
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d1eb      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b27      	ldr	r3, [pc, #156]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d210      	bcs.n	8002008 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b24      	ldr	r3, [pc, #144]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	4922      	ldr	r1, [pc, #136]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e032      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002014:	4b19      	ldr	r3, [pc, #100]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4916      	ldr	r1, [pc, #88]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d009      	beq.n	8002046 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002032:	4b12      	ldr	r3, [pc, #72]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	490e      	ldr	r1, [pc, #56]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002046:	f000 f859 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 800204a:	4602      	mov	r2, r0
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	490a      	ldr	r1, [pc, #40]	@ (8002080 <HAL_RCC_ClockConfig+0x1c8>)
 8002058:	5ccb      	ldrb	r3, [r1, r3]
 800205a:	fa22 f303 	lsr.w	r3, r2, r3
 800205e:	4a09      	ldr	r2, [pc, #36]	@ (8002084 <HAL_RCC_ClockConfig+0x1cc>)
 8002060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002062:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <HAL_RCC_ClockConfig+0x1d0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fd8e 	bl	8000b88 <HAL_InitTick>

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40022000 	.word	0x40022000
 800207c:	40021000 	.word	0x40021000
 8002080:	080078fc 	.word	0x080078fc
 8002084:	20000000 	.word	0x20000000
 8002088:	20000004 	.word	0x20000004

0800208c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	@ 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002098:	f107 0318 	add.w	r3, r7, #24
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80020b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020b6:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80020b8:	4b0e      	ldr	r3, [pc, #56]	@ (80020f4 <HAL_RCC_MCOConfig+0x68>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4a0d      	ldr	r2, [pc, #52]	@ (80020f4 <HAL_RCC_MCOConfig+0x68>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	6193      	str	r3, [r2, #24]
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <HAL_RCC_MCOConfig+0x68>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80020d0:	f107 0318 	add.w	r3, r7, #24
 80020d4:	4619      	mov	r1, r3
 80020d6:	4808      	ldr	r0, [pc, #32]	@ (80020f8 <HAL_RCC_MCOConfig+0x6c>)
 80020d8:	f7ff fabe 	bl	8001658 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80020dc:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <HAL_RCC_MCOConfig+0x68>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80020e4:	4903      	ldr	r1, [pc, #12]	@ (80020f4 <HAL_RCC_MCOConfig+0x68>)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
}
 80020ec:	bf00      	nop
 80020ee:	3728      	adds	r7, #40	@ 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010800 	.word	0x40010800

080020fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002116:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x94>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b04      	cmp	r3, #4
 8002124:	d002      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x30>
 8002126:	2b08      	cmp	r3, #8
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x36>
 800212a:	e027      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800212c:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800212e:	613b      	str	r3, [r7, #16]
      break;
 8002130:	e027      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	0c9b      	lsrs	r3, r3, #18
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	4a17      	ldr	r2, [pc, #92]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x9c>)
 800213c:	5cd3      	ldrb	r3, [r2, r3]
 800213e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d010      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800214a:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x94>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	0c5b      	lsrs	r3, r3, #17
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	4a11      	ldr	r2, [pc, #68]	@ (800219c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a0d      	ldr	r2, [pc, #52]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800215e:	fb03 f202 	mul.w	r2, r3, r2
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e004      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a0c      	ldr	r2, [pc, #48]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	613b      	str	r3, [r7, #16]
      break;
 800217a:	e002      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800217e:	613b      	str	r3, [r7, #16]
      break;
 8002180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002182:	693b      	ldr	r3, [r7, #16]
}
 8002184:	4618      	mov	r0, r3
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	007a1200 	.word	0x007a1200
 8002198:	0800790c 	.word	0x0800790c
 800219c:	0800791c 	.word	0x0800791c
 80021a0:	003d0900 	.word	0x003d0900

080021a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021ac:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <RCC_Delay+0x34>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <RCC_Delay+0x38>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	0a5b      	lsrs	r3, r3, #9
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021c0:	bf00      	nop
  }
  while (Delay --);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1e5a      	subs	r2, r3, #1
 80021c6:	60fa      	str	r2, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f9      	bne.n	80021c0 <RCC_Delay+0x1c>
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	20000000 	.word	0x20000000
 80021dc:	10624dd3 	.word	0x10624dd3

080021e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d07d      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80021fc:	2300      	movs	r3, #0
 80021fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002200:	4b4f      	ldr	r3, [pc, #316]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10d      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220c:	4b4c      	ldr	r3, [pc, #304]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	4a4b      	ldr	r2, [pc, #300]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002216:	61d3      	str	r3, [r2, #28]
 8002218:	4b49      	ldr	r3, [pc, #292]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002224:	2301      	movs	r3, #1
 8002226:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	4b46      	ldr	r3, [pc, #280]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d118      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002234:	4b43      	ldr	r3, [pc, #268]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a42      	ldr	r2, [pc, #264]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800223a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002240:	f7fe fce4 	bl	8000c0c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	e008      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002248:	f7fe fce0 	bl	8000c0c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	@ 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e06d      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225a:	4b3a      	ldr	r3, [pc, #232]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002266:	4b36      	ldr	r3, [pc, #216]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800226e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d02e      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	429a      	cmp	r2, r3
 8002282:	d027      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002284:	4b2e      	ldr	r3, [pc, #184]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800228c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800228e:	4b2e      	ldr	r3, [pc, #184]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002290:	2201      	movs	r2, #1
 8002292:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002294:	4b2c      	ldr	r3, [pc, #176]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800229a:	4a29      	ldr	r2, [pc, #164]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d014      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7fe fcaf 	bl	8000c0c <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7fe fcab 	bl	8000c0c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e036      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ee      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4917      	ldr	r1, [pc, #92]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022e6:	7dfb      	ldrb	r3, [r7, #23]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ec:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	4a13      	ldr	r2, [pc, #76]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002304:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	490b      	ldr	r1, [pc, #44]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002322:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	4904      	ldr	r1, [pc, #16]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	40007000 	.word	0x40007000
 8002348:	42420440 	.word	0x42420440

0800234c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e076      	b.n	800244c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	2b00      	cmp	r3, #0
 8002364:	d108      	bne.n	8002378 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800236e:	d009      	beq.n	8002384 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
 8002376:	e005      	b.n	8002384 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fa88 	bl	80008b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002408:	ea42 0103 	orr.w	r1, r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	0c1a      	lsrs	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f002 0204 	and.w	r2, r2, #4
 800242a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800243a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	4613      	mov	r3, r2
 8002462:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002464:	f7fe fbd2 	bl	8000c0c <HAL_GetTick>
 8002468:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d001      	beq.n	800247e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800247a:	2302      	movs	r3, #2
 800247c:	e12a      	b.n	80026d4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_SPI_Transmit+0x36>
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e122      	b.n	80026d4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_SPI_Transmit+0x48>
 8002498:	2302      	movs	r3, #2
 800249a:	e11b      	b.n	80026d4 <HAL_SPI_Transmit+0x280>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2203      	movs	r2, #3
 80024a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	88fa      	ldrh	r2, [r7, #6]
 80024bc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	88fa      	ldrh	r2, [r7, #6]
 80024c2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024ea:	d10f      	bne.n	800250c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800250a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002516:	2b40      	cmp	r3, #64	@ 0x40
 8002518:	d007      	beq.n	800252a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002532:	d152      	bne.n	80025da <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_SPI_Transmit+0xee>
 800253c:	8b7b      	ldrh	r3, [r7, #26]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d145      	bne.n	80025ce <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	881a      	ldrh	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	1c9a      	adds	r2, r3, #2
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002566:	e032      	b.n	80025ce <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b02      	cmp	r3, #2
 8002574:	d112      	bne.n	800259c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	881a      	ldrh	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	1c9a      	adds	r2, r3, #2
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	86da      	strh	r2, [r3, #54]	@ 0x36
 800259a:	e018      	b.n	80025ce <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800259c:	f7fe fb36 	bl	8000c0c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d803      	bhi.n	80025b4 <HAL_SPI_Transmit+0x160>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b2:	d102      	bne.n	80025ba <HAL_SPI_Transmit+0x166>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e082      	b.n	80026d4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1c7      	bne.n	8002568 <HAL_SPI_Transmit+0x114>
 80025d8:	e053      	b.n	8002682 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_SPI_Transmit+0x194>
 80025e2:	8b7b      	ldrh	r3, [r7, #26]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d147      	bne.n	8002678 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	330c      	adds	r3, #12
 80025f2:	7812      	ldrb	r2, [r2, #0]
 80025f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800260e:	e033      	b.n	8002678 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b02      	cmp	r3, #2
 800261c:	d113      	bne.n	8002646 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	330c      	adds	r3, #12
 8002628:	7812      	ldrb	r2, [r2, #0]
 800262a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002644:	e018      	b.n	8002678 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002646:	f7fe fae1 	bl	8000c0c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d803      	bhi.n	800265e <HAL_SPI_Transmit+0x20a>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d102      	bne.n	8002664 <HAL_SPI_Transmit+0x210>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e02d      	b.n	80026d4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1c6      	bne.n	8002610 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fb56 	bl	8002d38 <SPI_EndRxTxTransaction>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80026d2:	2300      	movs	r3, #0
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3720      	adds	r7, #32
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026ea:	2301      	movs	r3, #1
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026ee:	f7fe fa8d 	bl	8000c0c <HAL_GetTick>
 80026f2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026fa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002706:	7ffb      	ldrb	r3, [r7, #31]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d00c      	beq.n	8002726 <HAL_SPI_TransmitReceive+0x4a>
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002712:	d106      	bne.n	8002722 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <HAL_SPI_TransmitReceive+0x46>
 800271c:	7ffb      	ldrb	r3, [r7, #31]
 800271e:	2b04      	cmp	r3, #4
 8002720:	d001      	beq.n	8002726 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002722:	2302      	movs	r3, #2
 8002724:	e17f      	b.n	8002a26 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_SPI_TransmitReceive+0x5c>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_SPI_TransmitReceive+0x5c>
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e174      	b.n	8002a26 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_SPI_TransmitReceive+0x6e>
 8002746:	2302      	movs	r3, #2
 8002748:	e16d      	b.n	8002a26 <HAL_SPI_TransmitReceive+0x34a>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b04      	cmp	r3, #4
 800275c:	d003      	beq.n	8002766 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2205      	movs	r2, #5
 8002762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	887a      	ldrh	r2, [r7, #2]
 8002776:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	887a      	ldrh	r2, [r7, #2]
 800277c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	887a      	ldrh	r2, [r7, #2]
 800278e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a6:	2b40      	cmp	r3, #64	@ 0x40
 80027a8:	d007      	beq.n	80027ba <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027c2:	d17e      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_SPI_TransmitReceive+0xf6>
 80027cc:	8afb      	ldrh	r3, [r7, #22]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d16c      	bne.n	80028ac <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	881a      	ldrh	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	1c9a      	adds	r2, r3, #2
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027f6:	e059      	b.n	80028ac <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d11b      	bne.n	800283e <HAL_SPI_TransmitReceive+0x162>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d016      	beq.n	800283e <HAL_SPI_TransmitReceive+0x162>
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	2b01      	cmp	r3, #1
 8002814:	d113      	bne.n	800283e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	881a      	ldrh	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	1c9a      	adds	r2, r3, #2
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d119      	bne.n	8002880 <HAL_SPI_TransmitReceive+0x1a4>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d014      	beq.n	8002880 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002860:	b292      	uxth	r2, r2
 8002862:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002868:	1c9a      	adds	r2, r3, #2
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800287c:	2301      	movs	r3, #1
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002880:	f7fe f9c4 	bl	8000c0c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800288c:	429a      	cmp	r2, r3
 800288e:	d80d      	bhi.n	80028ac <HAL_SPI_TransmitReceive+0x1d0>
 8002890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002896:	d009      	beq.n	80028ac <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e0bc      	b.n	8002a26 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1a0      	bne.n	80027f8 <HAL_SPI_TransmitReceive+0x11c>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d19b      	bne.n	80027f8 <HAL_SPI_TransmitReceive+0x11c>
 80028c0:	e082      	b.n	80029c8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <HAL_SPI_TransmitReceive+0x1f4>
 80028ca:	8afb      	ldrh	r3, [r7, #22]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d171      	bne.n	80029b4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	330c      	adds	r3, #12
 80028da:	7812      	ldrb	r2, [r2, #0]
 80028dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028f6:	e05d      	b.n	80029b4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d11c      	bne.n	8002940 <HAL_SPI_TransmitReceive+0x264>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d017      	beq.n	8002940 <HAL_SPI_TransmitReceive+0x264>
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	2b01      	cmp	r3, #1
 8002914:	d114      	bne.n	8002940 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	7812      	ldrb	r2, [r2, #0]
 8002922:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d119      	bne.n	8002982 <HAL_SPI_TransmitReceive+0x2a6>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d014      	beq.n	8002982 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800297e:	2301      	movs	r3, #1
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002982:	f7fe f943 	bl	8000c0c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800298e:	429a      	cmp	r2, r3
 8002990:	d803      	bhi.n	800299a <HAL_SPI_TransmitReceive+0x2be>
 8002992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d102      	bne.n	80029a0 <HAL_SPI_TransmitReceive+0x2c4>
 800299a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e038      	b.n	8002a26 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d19c      	bne.n	80028f8 <HAL_SPI_TransmitReceive+0x21c>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d197      	bne.n	80028f8 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029c8:	6a3a      	ldr	r2, [r7, #32]
 80029ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f9b3 	bl	8002d38 <SPI_EndRxTxTransaction>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e01d      	b.n	8002a26 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10a      	bne.n	8002a08 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002a24:	2300      	movs	r3, #0
  }
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3728      	adds	r7, #40	@ 0x28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10e      	bne.n	8002a70 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d009      	beq.n	8002a70 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d004      	beq.n	8002a70 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4798      	blx	r3
    return;
 8002a6e:	e0b7      	b.n	8002be0 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_SPI_IRQHandler+0x5e>
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
    return;
 8002a8c:	e0a8      	b.n	8002be0 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d105      	bne.n	8002aa4 <HAL_SPI_IRQHandler+0x74>
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 809e 	beq.w	8002be0 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8098 	beq.w	8002be0 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d023      	beq.n	8002b02 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d011      	beq.n	8002aea <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aca:	f043 0204 	orr.w	r2, r3, #4
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	e00b      	b.n	8002b02 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	693b      	ldr	r3, [r7, #16]
        return;
 8002b00:	e06e      	b.n	8002be0 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d014      	beq.n	8002b36 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d04f      	beq.n	8002bde <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b4c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d104      	bne.n	8002b6a <HAL_SPI_IRQHandler+0x13a>
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d034      	beq.n	8002bd4 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0203 	bic.w	r2, r2, #3
 8002b78:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d011      	beq.n	8002ba6 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b86:	4a18      	ldr	r2, [pc, #96]	@ (8002be8 <HAL_SPI_IRQHandler+0x1b8>)
 8002b88:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fbe4 	bl	800135c <HAL_DMA_Abort_IT>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d016      	beq.n	8002bdc <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8002be8 <HAL_SPI_IRQHandler+0x1b8>)
 8002bb4:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fbce 	bl	800135c <HAL_DMA_Abort_IT>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002bd2:	e003      	b.n	8002bdc <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f809 	bl	8002bec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002bda:	e000      	b.n	8002bde <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8002bdc:	bf00      	nop
    return;
 8002bde:	bf00      	nop
  }
}
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	08002bff 	.word	0x08002bff

08002bec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f7ff ffe7 	bl	8002bec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c38:	f7fd ffe8 	bl	8000c0c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	4413      	add	r3, r2
 8002c46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c48:	f7fd ffe0 	bl	8000c0c <HAL_GetTick>
 8002c4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c4e:	4b39      	ldr	r3, [pc, #228]	@ (8002d34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	015b      	lsls	r3, r3, #5
 8002c54:	0d1b      	lsrs	r3, r3, #20
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	fb02 f303 	mul.w	r3, r2, r3
 8002c5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c5e:	e054      	b.n	8002d0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c66:	d050      	beq.n	8002d0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c68:	f7fd ffd0 	bl	8000c0c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d902      	bls.n	8002c7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d13d      	bne.n	8002cfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c96:	d111      	bne.n	8002cbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca0:	d004      	beq.n	8002cac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002caa:	d107      	bne.n	8002cbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cc4:	d10f      	bne.n	8002ce6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ce4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e017      	b.n	8002d2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d19b      	bne.n	8002c60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000000 	.word	0x20000000

08002d38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7ff ff6a 	bl	8002c28 <SPI_WaitFlagStateUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5e:	f043 0220 	orr.w	r2, r3, #32
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e013      	b.n	8002d92 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2200      	movs	r2, #0
 8002d72:	2180      	movs	r1, #128	@ 0x80
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f7ff ff57 	bl	8002c28 <SPI_WaitFlagStateUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d007      	beq.n	8002d90 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e000      	b.n	8002d92 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e041      	b.n	8002e30 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d106      	bne.n	8002dc6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7fd fdf3 	bl	80009ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	f000 fa5d 	bl	8003298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d001      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e035      	b.n	8002ebc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a16      	ldr	r2, [pc, #88]	@ (8002ec8 <HAL_TIM_Base_Start_IT+0x90>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d009      	beq.n	8002e86 <HAL_TIM_Base_Start_IT+0x4e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e7a:	d004      	beq.n	8002e86 <HAL_TIM_Base_Start_IT+0x4e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a12      	ldr	r2, [pc, #72]	@ (8002ecc <HAL_TIM_Base_Start_IT+0x94>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d111      	bne.n	8002eaa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b06      	cmp	r3, #6
 8002e96:	d010      	beq.n	8002eba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea8:	e007      	b.n	8002eba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0201 	orr.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40012c00 	.word	0x40012c00
 8002ecc:	40000400 	.word	0x40000400

08002ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d020      	beq.n	8002f34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01b      	beq.n	8002f34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0202 	mvn.w	r2, #2
 8002f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f9a1 	bl	8003262 <HAL_TIM_IC_CaptureCallback>
 8002f20:	e005      	b.n	8002f2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f994 	bl	8003250 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f9a3 	bl	8003274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d020      	beq.n	8002f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01b      	beq.n	8002f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0204 	mvn.w	r2, #4
 8002f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2202      	movs	r2, #2
 8002f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f97b 	bl	8003262 <HAL_TIM_IC_CaptureCallback>
 8002f6c:	e005      	b.n	8002f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f96e 	bl	8003250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f97d 	bl	8003274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d020      	beq.n	8002fcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01b      	beq.n	8002fcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0208 	mvn.w	r2, #8
 8002f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f955 	bl	8003262 <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f948 	bl	8003250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f957 	bl	8003274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d020      	beq.n	8003018 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01b      	beq.n	8003018 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0210 	mvn.w	r2, #16
 8002fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2208      	movs	r2, #8
 8002fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f92f 	bl	8003262 <HAL_TIM_IC_CaptureCallback>
 8003004:	e005      	b.n	8003012 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f922 	bl	8003250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f931 	bl	8003274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00c      	beq.n	800303c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0201 	mvn.w	r2, #1
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f901 	bl	800323e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00c      	beq.n	8003060 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fa77 	bl	800354e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00c      	beq.n	8003084 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800307c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f901 	bl	8003286 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00c      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0220 	mvn.w	r2, #32
 80030a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fa4a 	bl	800353c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_TIM_ConfigClockSource+0x1c>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e0b4      	b.n	8003236 <HAL_TIM_ConfigClockSource+0x186>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003104:	d03e      	beq.n	8003184 <HAL_TIM_ConfigClockSource+0xd4>
 8003106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800310a:	f200 8087 	bhi.w	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800310e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003112:	f000 8086 	beq.w	8003222 <HAL_TIM_ConfigClockSource+0x172>
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800311a:	d87f      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800311c:	2b70      	cmp	r3, #112	@ 0x70
 800311e:	d01a      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0xa6>
 8003120:	2b70      	cmp	r3, #112	@ 0x70
 8003122:	d87b      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 8003124:	2b60      	cmp	r3, #96	@ 0x60
 8003126:	d050      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x11a>
 8003128:	2b60      	cmp	r3, #96	@ 0x60
 800312a:	d877      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b50      	cmp	r3, #80	@ 0x50
 800312e:	d03c      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0xfa>
 8003130:	2b50      	cmp	r3, #80	@ 0x50
 8003132:	d873      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	2b40      	cmp	r3, #64	@ 0x40
 8003136:	d058      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x13a>
 8003138:	2b40      	cmp	r3, #64	@ 0x40
 800313a:	d86f      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800313c:	2b30      	cmp	r3, #48	@ 0x30
 800313e:	d064      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15a>
 8003140:	2b30      	cmp	r3, #48	@ 0x30
 8003142:	d86b      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 8003144:	2b20      	cmp	r3, #32
 8003146:	d060      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15a>
 8003148:	2b20      	cmp	r3, #32
 800314a:	d867      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d05c      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15a>
 8003150:	2b10      	cmp	r3, #16
 8003152:	d05a      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15a>
 8003154:	e062      	b.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003166:	f000 f972 	bl	800344e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003178:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	609a      	str	r2, [r3, #8]
      break;
 8003182:	e04f      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003194:	f000 f95b 	bl	800344e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031a6:	609a      	str	r2, [r3, #8]
      break;
 80031a8:	e03c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b6:	461a      	mov	r2, r3
 80031b8:	f000 f8d2 	bl	8003360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2150      	movs	r1, #80	@ 0x50
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f929 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 80031c8:	e02c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031d6:	461a      	mov	r2, r3
 80031d8:	f000 f8f0 	bl	80033bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2160      	movs	r1, #96	@ 0x60
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f919 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 80031e8:	e01c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f6:	461a      	mov	r2, r3
 80031f8:	f000 f8b2 	bl	8003360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2140      	movs	r1, #64	@ 0x40
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f909 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 8003208:	e00c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f000 f900 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 800321a:	e003      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      break;
 8003220:	e000      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003222:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003358 <TIM_Base_SetConfig+0xc0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d007      	beq.n	80032c0 <TIM_Base_SetConfig+0x28>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b6:	d003      	beq.n	80032c0 <TIM_Base_SetConfig+0x28>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a28      	ldr	r2, [pc, #160]	@ (800335c <TIM_Base_SetConfig+0xc4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d108      	bne.n	80032d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a20      	ldr	r2, [pc, #128]	@ (8003358 <TIM_Base_SetConfig+0xc0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <TIM_Base_SetConfig+0x52>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e0:	d003      	beq.n	80032ea <TIM_Base_SetConfig+0x52>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1d      	ldr	r2, [pc, #116]	@ (800335c <TIM_Base_SetConfig+0xc4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d108      	bne.n	80032fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a0d      	ldr	r2, [pc, #52]	@ (8003358 <TIM_Base_SetConfig+0xc0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d103      	bne.n	8003330 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f023 0201 	bic.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	611a      	str	r2, [r3, #16]
  }
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40000400 	.word	0x40000400

08003360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f023 0201 	bic.w	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800338a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f023 030a 	bic.w	r3, r3, #10
 800339c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f023 0210 	bic.w	r2, r3, #16
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	031b      	lsls	r3, r3, #12
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	621a      	str	r2, [r3, #32]
}
 8003410:	bf00      	nop
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	f043 0307 	orr.w	r3, r3, #7
 800343c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	609a      	str	r2, [r3, #8]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800344e:	b480      	push	{r7}
 8003450:	b087      	sub	sp, #28
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003468:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	021a      	lsls	r2, r3, #8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	431a      	orrs	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4313      	orrs	r3, r2
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	609a      	str	r2, [r3, #8]
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e041      	b.n	8003528 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a14      	ldr	r2, [pc, #80]	@ (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d009      	beq.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f0:	d004      	beq.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a10      	ldr	r2, [pc, #64]	@ (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d10c      	bne.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003502:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	4313      	orrs	r3, r2
 800350c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40012c00 	.word	0x40012c00
 8003538:	40000400 	.word	0x40000400

0800353c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003564:	4904      	ldr	r1, [pc, #16]	@ (8003578 <MX_FATFS_Init+0x18>)
 8003566:	4805      	ldr	r0, [pc, #20]	@ (800357c <MX_FATFS_Init+0x1c>)
 8003568:	f003 fbe6 	bl	8006d38 <FATFS_LinkDriver>
 800356c:	4603      	mov	r3, r0
 800356e:	461a      	mov	r2, r3
 8003570:	4b03      	ldr	r3, [pc, #12]	@ (8003580 <MX_FATFS_Init+0x20>)
 8003572:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003574:	bf00      	nop
 8003576:	bd80      	pop	{r7, pc}
 8003578:	200002b4 	.word	0x200002b4
 800357c:	2000000c 	.word	0x2000000c
 8003580:	200002b0 	.word	0x200002b0

08003584 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003588:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800358a:	4618      	mov	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
	...

08003594 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = USER_SPI_initialize(pdrv);
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 f9e3 	bl	800396c <USER_SPI_initialize>
 80035a6:	4603      	mov	r3, r0
 80035a8:	461a      	mov	r2, r3
 80035aa:	4b04      	ldr	r3, [pc, #16]	@ (80035bc <USER_initialize+0x28>)
 80035ac:	701a      	strb	r2, [r3, #0]
    return Stat;
 80035ae:	4b03      	ldr	r3, [pc, #12]	@ (80035bc <USER_initialize+0x28>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000009 	.word	0x20000009

080035c0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = USER_SPI_status(pdrv);;
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fab7 	bl	8003b40 <USER_SPI_status>
 80035d2:	4603      	mov	r3, r0
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b04      	ldr	r3, [pc, #16]	@ (80035e8 <USER_status+0x28>)
 80035d8:	701a      	strb	r2, [r3, #0]
    return Stat;
 80035da:	4b03      	ldr	r3, [pc, #12]	@ (80035e8 <USER_status+0x28>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000009 	.word	0x20000009

080035ec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	4603      	mov	r3, r0
 80035fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80035fc:	7bf8      	ldrb	r0, [r7, #15]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	f000 fab0 	bl	8003b68 <USER_SPI_read>
 8003608:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	4603      	mov	r3, r0
 8003620:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8003622:	7bf8      	ldrb	r0, [r7, #15]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	f000 fb03 	bl	8003c34 <USER_SPI_write>
 800362e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	603a      	str	r2, [r7, #0]
 8003642:	71fb      	strb	r3, [r7, #7]
 8003644:	460b      	mov	r3, r1
 8003646:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8003648:	79b9      	ldrb	r1, [r7, #6]
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fb6c 	bl	8003d2c <USER_SPI_ioctl>
 8003654:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003668:	f7fd fad0 	bl	8000c0c <HAL_GetTick>
 800366c:	4603      	mov	r3, r0
 800366e:	4a04      	ldr	r2, [pc, #16]	@ (8003680 <SPI_Timer_On+0x20>)
 8003670:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003672:	4a04      	ldr	r2, [pc, #16]	@ (8003684 <SPI_Timer_On+0x24>)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6013      	str	r3, [r2, #0]
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	200002bc 	.word	0x200002bc
 8003684:	200002c0 	.word	0x200002c0

08003688 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800368c:	f7fd fabe 	bl	8000c0c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <SPI_Timer_Status+0x24>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	1ad2      	subs	r2, r2, r3
 8003698:	4b05      	ldr	r3, [pc, #20]	@ (80036b0 <SPI_Timer_Status+0x28>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	bf34      	ite	cc
 80036a0:	2301      	movcc	r3, #1
 80036a2:	2300      	movcs	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	200002bc 	.word	0x200002bc
 80036b0:	200002c0 	.word	0x200002c0

080036b4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80036be:	f107 020f 	add.w	r2, r7, #15
 80036c2:	1df9      	adds	r1, r7, #7
 80036c4:	2332      	movs	r3, #50	@ 0x32
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	2301      	movs	r3, #1
 80036ca:	4804      	ldr	r0, [pc, #16]	@ (80036dc <xchg_spi+0x28>)
 80036cc:	f7ff f806 	bl	80026dc <HAL_SPI_TransmitReceive>
    return rxDat;
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	200000c0 	.word	0x200000c0

080036e0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80036e0:	b590      	push	{r4, r7, lr}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	e00a      	b.n	8003706 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	18d4      	adds	r4, r2, r3
 80036f6:	20ff      	movs	r0, #255	@ 0xff
 80036f8:	f7ff ffdc 	bl	80036b4 <xchg_spi>
 80036fc:	4603      	mov	r3, r0
 80036fe:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3301      	adds	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d3f0      	bcc.n	80036f0 <rcvr_spi_multi+0x10>
	}
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	bd90      	pop	{r4, r7, pc}

08003718 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	b29a      	uxth	r2, r3
 8003726:	f04f 33ff 	mov.w	r3, #4294967295
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4803      	ldr	r0, [pc, #12]	@ (800373c <xmit_spi_multi+0x24>)
 800372e:	f7fe fe91 	bl	8002454 <HAL_SPI_Transmit>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	200000c0 	.word	0x200000c0

08003740 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003748:	f7fd fa60 	bl	8000c0c <HAL_GetTick>
 800374c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003752:	20ff      	movs	r0, #255	@ 0xff
 8003754:	f7ff ffae 	bl	80036b4 <xchg_spi>
 8003758:	4603      	mov	r3, r0
 800375a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2bff      	cmp	r3, #255	@ 0xff
 8003760:	d007      	beq.n	8003772 <wait_ready+0x32>
 8003762:	f7fd fa53 	bl	8000c0c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	429a      	cmp	r2, r3
 8003770:	d8ef      	bhi.n	8003752 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2bff      	cmp	r3, #255	@ 0xff
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800378c:	2201      	movs	r2, #1
 800378e:	2110      	movs	r1, #16
 8003790:	4803      	ldr	r0, [pc, #12]	@ (80037a0 <despiselect+0x18>)
 8003792:	f7fe f8dd 	bl	8001950 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003796:	20ff      	movs	r0, #255	@ 0xff
 8003798:	f7ff ff8c 	bl	80036b4 <xchg_spi>

}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40010800 	.word	0x40010800

080037a4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80037a8:	2200      	movs	r2, #0
 80037aa:	2110      	movs	r1, #16
 80037ac:	4809      	ldr	r0, [pc, #36]	@ (80037d4 <spiselect+0x30>)
 80037ae:	f7fe f8cf 	bl	8001950 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80037b2:	20ff      	movs	r0, #255	@ 0xff
 80037b4:	f7ff ff7e 	bl	80036b4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80037b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80037bc:	f7ff ffc0 	bl	8003740 <wait_ready>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <spiselect+0x26>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e002      	b.n	80037d0 <spiselect+0x2c>

	despiselect();
 80037ca:	f7ff ffdd 	bl	8003788 <despiselect>
	return 0;	/* Timeout */
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40010800 	.word	0x40010800

080037d8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80037e2:	20c8      	movs	r0, #200	@ 0xc8
 80037e4:	f7ff ff3c 	bl	8003660 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80037e8:	20ff      	movs	r0, #255	@ 0xff
 80037ea:	f7ff ff63 	bl	80036b4 <xchg_spi>
 80037ee:	4603      	mov	r3, r0
 80037f0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	2bff      	cmp	r3, #255	@ 0xff
 80037f6:	d104      	bne.n	8003802 <rcvr_datablock+0x2a>
 80037f8:	f7ff ff46 	bl	8003688 <SPI_Timer_Status>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f2      	bne.n	80037e8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	2bfe      	cmp	r3, #254	@ 0xfe
 8003806:	d001      	beq.n	800380c <rcvr_datablock+0x34>
 8003808:	2300      	movs	r3, #0
 800380a:	e00a      	b.n	8003822 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800380c:	6839      	ldr	r1, [r7, #0]
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ff66 	bl	80036e0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003814:	20ff      	movs	r0, #255	@ 0xff
 8003816:	f7ff ff4d 	bl	80036b4 <xchg_spi>
 800381a:	20ff      	movs	r0, #255	@ 0xff
 800381c:	f7ff ff4a 	bl	80036b4 <xchg_spi>

	return 1;						/* Function succeeded */
 8003820:	2301      	movs	r3, #1
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	460b      	mov	r3, r1
 8003834:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003836:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800383a:	f7ff ff81 	bl	8003740 <wait_ready>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <xmit_datablock+0x1e>
 8003844:	2300      	movs	r3, #0
 8003846:	e01e      	b.n	8003886 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff ff32 	bl	80036b4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	2bfd      	cmp	r3, #253	@ 0xfd
 8003854:	d016      	beq.n	8003884 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003856:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff ff5c 	bl	8003718 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003860:	20ff      	movs	r0, #255	@ 0xff
 8003862:	f7ff ff27 	bl	80036b4 <xchg_spi>
 8003866:	20ff      	movs	r0, #255	@ 0xff
 8003868:	f7ff ff24 	bl	80036b4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800386c:	20ff      	movs	r0, #255	@ 0xff
 800386e:	f7ff ff21 	bl	80036b4 <xchg_spi>
 8003872:	4603      	mov	r3, r0
 8003874:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	2b05      	cmp	r3, #5
 800387e:	d001      	beq.n	8003884 <xmit_datablock+0x5a>
 8003880:	2300      	movs	r3, #0
 8003882:	e000      	b.n	8003886 <xmit_datablock+0x5c>
	}
	return 1;
 8003884:	2301      	movs	r3, #1
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	4603      	mov	r3, r0
 8003896:	6039      	str	r1, [r7, #0]
 8003898:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	da0e      	bge.n	80038c0 <send_cmd+0x32>
		cmd &= 0x7F;
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038a8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80038aa:	2100      	movs	r1, #0
 80038ac:	2037      	movs	r0, #55	@ 0x37
 80038ae:	f7ff ffee 	bl	800388e <send_cmd>
 80038b2:	4603      	mov	r3, r0
 80038b4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d901      	bls.n	80038c0 <send_cmd+0x32>
 80038bc:	7bbb      	ldrb	r3, [r7, #14]
 80038be:	e051      	b.n	8003964 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	2b0c      	cmp	r3, #12
 80038c4:	d008      	beq.n	80038d8 <send_cmd+0x4a>
		despiselect();
 80038c6:	f7ff ff5f 	bl	8003788 <despiselect>
		if (!spiselect()) return 0xFF;
 80038ca:	f7ff ff6b 	bl	80037a4 <spiselect>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <send_cmd+0x4a>
 80038d4:	23ff      	movs	r3, #255	@ 0xff
 80038d6:	e045      	b.n	8003964 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff fee7 	bl	80036b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	0e1b      	lsrs	r3, r3, #24
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fee1 	bl	80036b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fedb 	bl	80036b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	0a1b      	lsrs	r3, r3, #8
 8003902:	b2db      	uxtb	r3, r3
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fed5 	bl	80036b4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fed0 	bl	80036b4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003914:	2301      	movs	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <send_cmd+0x94>
 800391e:	2395      	movs	r3, #149	@ 0x95
 8003920:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d101      	bne.n	800392c <send_cmd+0x9e>
 8003928:	2387      	movs	r3, #135	@ 0x87
 800392a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fec0 	bl	80036b4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d102      	bne.n	8003940 <send_cmd+0xb2>
 800393a:	20ff      	movs	r0, #255	@ 0xff
 800393c:	f7ff feba 	bl	80036b4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003940:	230a      	movs	r3, #10
 8003942:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003944:	20ff      	movs	r0, #255	@ 0xff
 8003946:	f7ff feb5 	bl	80036b4 <xchg_spi>
 800394a:	4603      	mov	r3, r0
 800394c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800394e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003952:	2b00      	cmp	r3, #0
 8003954:	da05      	bge.n	8003962 <send_cmd+0xd4>
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	3b01      	subs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003962:	7bbb      	ldrb	r3, [r7, #14]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800396c:	b590      	push	{r4, r7, lr}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <USER_SPI_initialize+0x14>
 800397c:	2301      	movs	r3, #1
 800397e:	e0d4      	b.n	8003b2a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003980:	4b6c      	ldr	r3, [pc, #432]	@ (8003b34 <USER_SPI_initialize+0x1c8>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <USER_SPI_initialize+0x2a>
 800398e:	4b69      	ldr	r3, [pc, #420]	@ (8003b34 <USER_SPI_initialize+0x1c8>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	e0c9      	b.n	8003b2a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8003996:	4b68      	ldr	r3, [pc, #416]	@ (8003b38 <USER_SPI_initialize+0x1cc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b66      	ldr	r3, [pc, #408]	@ (8003b38 <USER_SPI_initialize+0x1cc>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0238 	orr.w	r2, r2, #56	@ 0x38
 80039a4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80039a6:	230a      	movs	r3, #10
 80039a8:	73fb      	strb	r3, [r7, #15]
 80039aa:	e005      	b.n	80039b8 <USER_SPI_initialize+0x4c>
 80039ac:	20ff      	movs	r0, #255	@ 0xff
 80039ae:	f7ff fe81 	bl	80036b4 <xchg_spi>
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f6      	bne.n	80039ac <USER_SPI_initialize+0x40>

	ty = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80039c2:	2100      	movs	r1, #0
 80039c4:	2000      	movs	r0, #0
 80039c6:	f7ff ff62 	bl	800388e <send_cmd>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	f040 808b 	bne.w	8003ae8 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80039d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039d6:	f7ff fe43 	bl	8003660 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80039da:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80039de:	2008      	movs	r0, #8
 80039e0:	f7ff ff55 	bl	800388e <send_cmd>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d151      	bne.n	8003a8e <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80039ea:	2300      	movs	r3, #0
 80039ec:	73fb      	strb	r3, [r7, #15]
 80039ee:	e00d      	b.n	8003a0c <USER_SPI_initialize+0xa0>
 80039f0:	7bfc      	ldrb	r4, [r7, #15]
 80039f2:	20ff      	movs	r0, #255	@ 0xff
 80039f4:	f7ff fe5e 	bl	80036b4 <xchg_spi>
 80039f8:	4603      	mov	r3, r0
 80039fa:	461a      	mov	r2, r3
 80039fc:	f104 0310 	add.w	r3, r4, #16
 8003a00:	443b      	add	r3, r7
 8003a02:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d9ee      	bls.n	80039f0 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003a12:	7abb      	ldrb	r3, [r7, #10]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d167      	bne.n	8003ae8 <USER_SPI_initialize+0x17c>
 8003a18:	7afb      	ldrb	r3, [r7, #11]
 8003a1a:	2baa      	cmp	r3, #170	@ 0xaa
 8003a1c:	d164      	bne.n	8003ae8 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003a1e:	bf00      	nop
 8003a20:	f7ff fe32 	bl	8003688 <SPI_Timer_Status>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <USER_SPI_initialize+0xce>
 8003a2a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003a2e:	20a9      	movs	r0, #169	@ 0xa9
 8003a30:	f7ff ff2d 	bl	800388e <send_cmd>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f2      	bne.n	8003a20 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003a3a:	f7ff fe25 	bl	8003688 <SPI_Timer_Status>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d051      	beq.n	8003ae8 <USER_SPI_initialize+0x17c>
 8003a44:	2100      	movs	r1, #0
 8003a46:	203a      	movs	r0, #58	@ 0x3a
 8003a48:	f7ff ff21 	bl	800388e <send_cmd>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d14a      	bne.n	8003ae8 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003a52:	2300      	movs	r3, #0
 8003a54:	73fb      	strb	r3, [r7, #15]
 8003a56:	e00d      	b.n	8003a74 <USER_SPI_initialize+0x108>
 8003a58:	7bfc      	ldrb	r4, [r7, #15]
 8003a5a:	20ff      	movs	r0, #255	@ 0xff
 8003a5c:	f7ff fe2a 	bl	80036b4 <xchg_spi>
 8003a60:	4603      	mov	r3, r0
 8003a62:	461a      	mov	r2, r3
 8003a64:	f104 0310 	add.w	r3, r4, #16
 8003a68:	443b      	add	r3, r7
 8003a6a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	3301      	adds	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d9ee      	bls.n	8003a58 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003a7a:	7a3b      	ldrb	r3, [r7, #8]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <USER_SPI_initialize+0x11c>
 8003a84:	230c      	movs	r3, #12
 8003a86:	e000      	b.n	8003a8a <USER_SPI_initialize+0x11e>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	737b      	strb	r3, [r7, #13]
 8003a8c:	e02c      	b.n	8003ae8 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003a8e:	2100      	movs	r1, #0
 8003a90:	20a9      	movs	r0, #169	@ 0xa9
 8003a92:	f7ff fefc 	bl	800388e <send_cmd>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d804      	bhi.n	8003aa6 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	737b      	strb	r3, [r7, #13]
 8003aa0:	23a9      	movs	r3, #169	@ 0xa9
 8003aa2:	73bb      	strb	r3, [r7, #14]
 8003aa4:	e003      	b.n	8003aae <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	737b      	strb	r3, [r7, #13]
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003aae:	bf00      	nop
 8003ab0:	f7ff fdea 	bl	8003688 <SPI_Timer_Status>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <USER_SPI_initialize+0x15e>
 8003aba:	7bbb      	ldrb	r3, [r7, #14]
 8003abc:	2100      	movs	r1, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fee5 	bl	800388e <send_cmd>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f2      	bne.n	8003ab0 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003aca:	f7ff fddd 	bl	8003688 <SPI_Timer_Status>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <USER_SPI_initialize+0x178>
 8003ad4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ad8:	2010      	movs	r0, #16
 8003ada:	f7ff fed8 	bl	800388e <send_cmd>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <USER_SPI_initialize+0x17c>
				ty = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003ae8:	4a14      	ldr	r2, [pc, #80]	@ (8003b3c <USER_SPI_initialize+0x1d0>)
 8003aea:	7b7b      	ldrb	r3, [r7, #13]
 8003aec:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003aee:	f7ff fe4b 	bl	8003788 <despiselect>

	if (ty) {			/* OK */
 8003af2:	7b7b      	ldrb	r3, [r7, #13]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d012      	beq.n	8003b1e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8003af8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b38 <USER_SPI_initialize+0x1cc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003b02:	4b0d      	ldr	r3, [pc, #52]	@ (8003b38 <USER_SPI_initialize+0x1cc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0208 	orr.w	r2, r2, #8
 8003b0a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003b0c:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <USER_SPI_initialize+0x1c8>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <USER_SPI_initialize+0x1c8>)
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	e002      	b.n	8003b24 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003b1e:	4b05      	ldr	r3, [pc, #20]	@ (8003b34 <USER_SPI_initialize+0x1c8>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003b24:	4b03      	ldr	r3, [pc, #12]	@ (8003b34 <USER_SPI_initialize+0x1c8>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	b2db      	uxtb	r3, r3
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd90      	pop	{r4, r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000020 	.word	0x20000020
 8003b38:	200000c0 	.word	0x200000c0
 8003b3c:	200002b8 	.word	0x200002b8

08003b40 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <USER_SPI_status+0x14>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e002      	b.n	8003b5a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003b54:	4b03      	ldr	r3, [pc, #12]	@ (8003b64 <USER_SPI_status+0x24>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	b2db      	uxtb	r3, r3
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	20000020 	.word	0x20000020

08003b68 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4603      	mov	r3, r0
 8003b76:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <USER_SPI_read+0x1c>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <USER_SPI_read+0x20>
 8003b84:	2304      	movs	r3, #4
 8003b86:	e04d      	b.n	8003c24 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003b88:	4b28      	ldr	r3, [pc, #160]	@ (8003c2c <USER_SPI_read+0xc4>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <USER_SPI_read+0x32>
 8003b96:	2303      	movs	r3, #3
 8003b98:	e044      	b.n	8003c24 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003b9a:	4b25      	ldr	r3, [pc, #148]	@ (8003c30 <USER_SPI_read+0xc8>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <USER_SPI_read+0x44>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	025b      	lsls	r3, r3, #9
 8003baa:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d111      	bne.n	8003bd6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	2011      	movs	r0, #17
 8003bb6:	f7ff fe6a 	bl	800388e <send_cmd>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d129      	bne.n	8003c14 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003bc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003bc4:	68b8      	ldr	r0, [r7, #8]
 8003bc6:	f7ff fe07 	bl	80037d8 <rcvr_datablock>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d021      	beq.n	8003c14 <USER_SPI_read+0xac>
			count = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	e01e      	b.n	8003c14 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	2012      	movs	r0, #18
 8003bda:	f7ff fe58 	bl	800388e <send_cmd>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d117      	bne.n	8003c14 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003be4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003be8:	68b8      	ldr	r0, [r7, #8]
 8003bea:	f7ff fdf5 	bl	80037d8 <rcvr_datablock>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <USER_SPI_read+0xa2>
				buff += 512;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003bfa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	603b      	str	r3, [r7, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1ed      	bne.n	8003be4 <USER_SPI_read+0x7c>
 8003c08:	e000      	b.n	8003c0c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003c0a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	200c      	movs	r0, #12
 8003c10:	f7ff fe3d 	bl	800388e <send_cmd>
		}
	}
	despiselect();
 8003c14:	f7ff fdb8 	bl	8003788 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000020 	.word	0x20000020
 8003c30:	200002b8 	.word	0x200002b8

08003c34 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	4603      	mov	r3, r0
 8003c42:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <USER_SPI_write+0x1c>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <USER_SPI_write+0x20>
 8003c50:	2304      	movs	r3, #4
 8003c52:	e063      	b.n	8003d1c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003c54:	4b33      	ldr	r3, [pc, #204]	@ (8003d24 <USER_SPI_write+0xf0>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <USER_SPI_write+0x32>
 8003c62:	2303      	movs	r3, #3
 8003c64:	e05a      	b.n	8003d1c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003c66:	4b2f      	ldr	r3, [pc, #188]	@ (8003d24 <USER_SPI_write+0xf0>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <USER_SPI_write+0x44>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e051      	b.n	8003d1c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003c78:	4b2b      	ldr	r3, [pc, #172]	@ (8003d28 <USER_SPI_write+0xf4>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <USER_SPI_write+0x56>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	025b      	lsls	r3, r3, #9
 8003c88:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d110      	bne.n	8003cb2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	2018      	movs	r0, #24
 8003c94:	f7ff fdfb 	bl	800388e <send_cmd>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d136      	bne.n	8003d0c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003c9e:	21fe      	movs	r1, #254	@ 0xfe
 8003ca0:	68b8      	ldr	r0, [r7, #8]
 8003ca2:	f7ff fdc2 	bl	800382a <xmit_datablock>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d02f      	beq.n	8003d0c <USER_SPI_write+0xd8>
			count = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	e02c      	b.n	8003d0c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d28 <USER_SPI_write+0xf4>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	f003 0306 	and.w	r3, r3, #6
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <USER_SPI_write+0x92>
 8003cbe:	6839      	ldr	r1, [r7, #0]
 8003cc0:	2097      	movs	r0, #151	@ 0x97
 8003cc2:	f7ff fde4 	bl	800388e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	2019      	movs	r0, #25
 8003cca:	f7ff fde0 	bl	800388e <send_cmd>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d11b      	bne.n	8003d0c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003cd4:	21fc      	movs	r1, #252	@ 0xfc
 8003cd6:	68b8      	ldr	r0, [r7, #8]
 8003cd8:	f7ff fda7 	bl	800382a <xmit_datablock>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <USER_SPI_write+0xc4>
				buff += 512;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003ce8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ee      	bne.n	8003cd4 <USER_SPI_write+0xa0>
 8003cf6:	e000      	b.n	8003cfa <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003cf8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003cfa:	21fd      	movs	r1, #253	@ 0xfd
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f7ff fd94 	bl	800382a <xmit_datablock>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <USER_SPI_write+0xd8>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003d0c:	f7ff fd3c 	bl	8003788 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bf14      	ite	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	2300      	moveq	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000020 	.word	0x20000020
 8003d28:	200002b8 	.word	0x200002b8

08003d2c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08c      	sub	sp, #48	@ 0x30
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	603a      	str	r2, [r7, #0]
 8003d36:	71fb      	strb	r3, [r7, #7]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <USER_SPI_ioctl+0x1a>
 8003d42:	2304      	movs	r3, #4
 8003d44:	e15a      	b.n	8003ffc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003d46:	4baf      	ldr	r3, [pc, #700]	@ (8004004 <USER_SPI_ioctl+0x2d8>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <USER_SPI_ioctl+0x2c>
 8003d54:	2303      	movs	r3, #3
 8003d56:	e151      	b.n	8003ffc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8003d5e:	79bb      	ldrb	r3, [r7, #6]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	f200 8136 	bhi.w	8003fd2 <USER_SPI_ioctl+0x2a6>
 8003d66:	a201      	add	r2, pc, #4	@ (adr r2, 8003d6c <USER_SPI_ioctl+0x40>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d81 	.word	0x08003d81
 8003d70:	08003d95 	.word	0x08003d95
 8003d74:	08003fd3 	.word	0x08003fd3
 8003d78:	08003e41 	.word	0x08003e41
 8003d7c:	08003f37 	.word	0x08003f37
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003d80:	f7ff fd10 	bl	80037a4 <spiselect>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8127 	beq.w	8003fda <USER_SPI_ioctl+0x2ae>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8003d92:	e122      	b.n	8003fda <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003d94:	2100      	movs	r1, #0
 8003d96:	2009      	movs	r0, #9
 8003d98:	f7ff fd79 	bl	800388e <send_cmd>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f040 811d 	bne.w	8003fde <USER_SPI_ioctl+0x2b2>
 8003da4:	f107 030c 	add.w	r3, r7, #12
 8003da8:	2110      	movs	r1, #16
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fd14 	bl	80037d8 <rcvr_datablock>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 8113 	beq.w	8003fde <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003db8:	7b3b      	ldrb	r3, [r7, #12]
 8003dba:	099b      	lsrs	r3, r3, #6
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d111      	bne.n	8003de6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003dc2:	7d7b      	ldrb	r3, [r7, #21]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	7d3b      	ldrb	r3, [r7, #20]
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	4413      	add	r3, r2
 8003dcc:	461a      	mov	r2, r3
 8003dce:	7cfb      	ldrb	r3, [r7, #19]
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3301      	adds	r3, #1
 8003dda:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	029a      	lsls	r2, r3, #10
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e028      	b.n	8003e38 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003de6:	7c7b      	ldrb	r3, [r7, #17]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	7dbb      	ldrb	r3, [r7, #22]
 8003df0:	09db      	lsrs	r3, r3, #7
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	4413      	add	r3, r2
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	7d7b      	ldrb	r3, [r7, #21]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f003 0306 	and.w	r3, r3, #6
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	3302      	adds	r3, #2
 8003e0a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003e0e:	7d3b      	ldrb	r3, [r7, #20]
 8003e10:	099b      	lsrs	r3, r3, #6
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	7cfb      	ldrb	r3, [r7, #19]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	441a      	add	r2, r3
 8003e1c:	7cbb      	ldrb	r3, [r7, #18]
 8003e1e:	029b      	lsls	r3, r3, #10
 8003e20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e24:	4413      	add	r3, r2
 8003e26:	3301      	adds	r3, #1
 8003e28:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003e2a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e2e:	3b09      	subs	r3, #9
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	409a      	lsls	r2, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8003e3e:	e0ce      	b.n	8003fde <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003e40:	4b71      	ldr	r3, [pc, #452]	@ (8004008 <USER_SPI_ioctl+0x2dc>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d031      	beq.n	8003eb0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	208d      	movs	r0, #141	@ 0x8d
 8003e50:	f7ff fd1d 	bl	800388e <send_cmd>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 80c3 	bne.w	8003fe2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003e5c:	20ff      	movs	r0, #255	@ 0xff
 8003e5e:	f7ff fc29 	bl	80036b4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003e62:	f107 030c 	add.w	r3, r7, #12
 8003e66:	2110      	movs	r1, #16
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fcb5 	bl	80037d8 <rcvr_datablock>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 80b6 	beq.w	8003fe2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003e76:	2330      	movs	r3, #48	@ 0x30
 8003e78:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003e7c:	e007      	b.n	8003e8e <USER_SPI_ioctl+0x162>
 8003e7e:	20ff      	movs	r0, #255	@ 0xff
 8003e80:	f7ff fc18 	bl	80036b4 <xchg_spi>
 8003e84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003e8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f3      	bne.n	8003e7e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003e96:	7dbb      	ldrb	r3, [r7, #22]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2310      	movs	r3, #16
 8003ea0:	fa03 f202 	lsl.w	r2, r3, r2
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003eae:	e098      	b.n	8003fe2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	2009      	movs	r0, #9
 8003eb4:	f7ff fceb 	bl	800388e <send_cmd>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 8091 	bne.w	8003fe2 <USER_SPI_ioctl+0x2b6>
 8003ec0:	f107 030c 	add.w	r3, r7, #12
 8003ec4:	2110      	movs	r1, #16
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fc86 	bl	80037d8 <rcvr_datablock>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8087 	beq.w	8003fe2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003ed4:	4b4c      	ldr	r3, [pc, #304]	@ (8004008 <USER_SPI_ioctl+0x2dc>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d012      	beq.n	8003f06 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003ee0:	7dbb      	ldrb	r3, [r7, #22]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003ee8:	7dfa      	ldrb	r2, [r7, #23]
 8003eea:	09d2      	lsrs	r2, r2, #7
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	4413      	add	r3, r2
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	7e7b      	ldrb	r3, [r7, #25]
 8003ef4:	099b      	lsrs	r3, r3, #6
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e013      	b.n	8003f2e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003f06:	7dbb      	ldrb	r3, [r7, #22]
 8003f08:	109b      	asrs	r3, r3, #2
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	3301      	adds	r3, #1
 8003f12:	7dfa      	ldrb	r2, [r7, #23]
 8003f14:	00d2      	lsls	r2, r2, #3
 8003f16:	f002 0218 	and.w	r2, r2, #24
 8003f1a:	7df9      	ldrb	r1, [r7, #23]
 8003f1c:	0949      	lsrs	r1, r1, #5
 8003f1e:	b2c9      	uxtb	r1, r1
 8003f20:	440a      	add	r2, r1
 8003f22:	3201      	adds	r2, #1
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8003f34:	e055      	b.n	8003fe2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003f36:	4b34      	ldr	r3, [pc, #208]	@ (8004008 <USER_SPI_ioctl+0x2dc>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	f003 0306 	and.w	r3, r3, #6
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d051      	beq.n	8003fe6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003f42:	f107 020c 	add.w	r2, r7, #12
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	210b      	movs	r1, #11
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff feee 	bl	8003d2c <USER_SPI_ioctl>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d149      	bne.n	8003fea <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003f56:	7b3b      	ldrb	r3, [r7, #12]
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d104      	bne.n	8003f6a <USER_SPI_ioctl+0x23e>
 8003f60:	7dbb      	ldrb	r3, [r7, #22]
 8003f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d041      	beq.n	8003fee <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	623b      	str	r3, [r7, #32]
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8003f7a:	4b23      	ldr	r3, [pc, #140]	@ (8004008 <USER_SPI_ioctl+0x2dc>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d105      	bne.n	8003f92 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8003f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f88:	025b      	lsls	r3, r3, #9
 8003f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	025b      	lsls	r3, r3, #9
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003f92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f94:	2020      	movs	r0, #32
 8003f96:	f7ff fc7a 	bl	800388e <send_cmd>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d128      	bne.n	8003ff2 <USER_SPI_ioctl+0x2c6>
 8003fa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fa2:	2021      	movs	r0, #33	@ 0x21
 8003fa4:	f7ff fc73 	bl	800388e <send_cmd>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d121      	bne.n	8003ff2 <USER_SPI_ioctl+0x2c6>
 8003fae:	2100      	movs	r1, #0
 8003fb0:	2026      	movs	r0, #38	@ 0x26
 8003fb2:	f7ff fc6c 	bl	800388e <send_cmd>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d11a      	bne.n	8003ff2 <USER_SPI_ioctl+0x2c6>
 8003fbc:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003fc0:	f7ff fbbe 	bl	8003740 <wait_ready>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d013      	beq.n	8003ff2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8003fd0:	e00f      	b.n	8003ff2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003fd8:	e00c      	b.n	8003ff4 <USER_SPI_ioctl+0x2c8>
		break;
 8003fda:	bf00      	nop
 8003fdc:	e00a      	b.n	8003ff4 <USER_SPI_ioctl+0x2c8>
		break;
 8003fde:	bf00      	nop
 8003fe0:	e008      	b.n	8003ff4 <USER_SPI_ioctl+0x2c8>
		break;
 8003fe2:	bf00      	nop
 8003fe4:	e006      	b.n	8003ff4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003fe6:	bf00      	nop
 8003fe8:	e004      	b.n	8003ff4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003fea:	bf00      	nop
 8003fec:	e002      	b.n	8003ff4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003fee:	bf00      	nop
 8003ff0:	e000      	b.n	8003ff4 <USER_SPI_ioctl+0x2c8>
		break;
 8003ff2:	bf00      	nop
	}

	despiselect();
 8003ff4:	f7ff fbc8 	bl	8003788 <despiselect>

	return res;
 8003ff8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3730      	adds	r7, #48	@ 0x30
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000020 	.word	0x20000020
 8004008:	200002b8 	.word	0x200002b8

0800400c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	4a08      	ldr	r2, [pc, #32]	@ (800403c <disk_status+0x30>)
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	79fa      	ldrb	r2, [r7, #7]
 8004024:	4905      	ldr	r1, [pc, #20]	@ (800403c <disk_status+0x30>)
 8004026:	440a      	add	r2, r1
 8004028:	7a12      	ldrb	r2, [r2, #8]
 800402a:	4610      	mov	r0, r2
 800402c:	4798      	blx	r3
 800402e:	4603      	mov	r3, r0
 8004030:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004032:	7bfb      	ldrb	r3, [r7, #15]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	200002e4 	.word	0x200002e4

08004040 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	4a0d      	ldr	r2, [pc, #52]	@ (8004088 <disk_initialize+0x48>)
 8004052:	5cd3      	ldrb	r3, [r2, r3]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d111      	bne.n	800407c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	4a0b      	ldr	r2, [pc, #44]	@ (8004088 <disk_initialize+0x48>)
 800405c:	2101      	movs	r1, #1
 800405e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	4a09      	ldr	r2, [pc, #36]	@ (8004088 <disk_initialize+0x48>)
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	79fa      	ldrb	r2, [r7, #7]
 800406e:	4906      	ldr	r1, [pc, #24]	@ (8004088 <disk_initialize+0x48>)
 8004070:	440a      	add	r2, r1
 8004072:	7a12      	ldrb	r2, [r2, #8]
 8004074:	4610      	mov	r0, r2
 8004076:	4798      	blx	r3
 8004078:	4603      	mov	r3, r0
 800407a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800407c:	7bfb      	ldrb	r3, [r7, #15]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	200002e4 	.word	0x200002e4

0800408c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	4603      	mov	r3, r0
 800409a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800409c:	7bfb      	ldrb	r3, [r7, #15]
 800409e:	4a0a      	ldr	r2, [pc, #40]	@ (80040c8 <disk_read+0x3c>)
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	689c      	ldr	r4, [r3, #8]
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	4a07      	ldr	r2, [pc, #28]	@ (80040c8 <disk_read+0x3c>)
 80040ac:	4413      	add	r3, r2
 80040ae:	7a18      	ldrb	r0, [r3, #8]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	47a0      	blx	r4
 80040b8:	4603      	mov	r3, r0
 80040ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd90      	pop	{r4, r7, pc}
 80040c6:	bf00      	nop
 80040c8:	200002e4 	.word	0x200002e4

080040cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	4603      	mov	r3, r0
 80040da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	4a0a      	ldr	r2, [pc, #40]	@ (8004108 <disk_write+0x3c>)
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	68dc      	ldr	r4, [r3, #12]
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	4a07      	ldr	r2, [pc, #28]	@ (8004108 <disk_write+0x3c>)
 80040ec:	4413      	add	r3, r2
 80040ee:	7a18      	ldrb	r0, [r3, #8]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	47a0      	blx	r4
 80040f8:	4603      	mov	r3, r0
 80040fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	bd90      	pop	{r4, r7, pc}
 8004106:	bf00      	nop
 8004108:	200002e4 	.word	0x200002e4

0800410c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	603a      	str	r2, [r7, #0]
 8004116:	71fb      	strb	r3, [r7, #7]
 8004118:	460b      	mov	r3, r1
 800411a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	4a09      	ldr	r2, [pc, #36]	@ (8004144 <disk_ioctl+0x38>)
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	79fa      	ldrb	r2, [r7, #7]
 800412a:	4906      	ldr	r1, [pc, #24]	@ (8004144 <disk_ioctl+0x38>)
 800412c:	440a      	add	r2, r1
 800412e:	7a10      	ldrb	r0, [r2, #8]
 8004130:	79b9      	ldrb	r1, [r7, #6]
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	4798      	blx	r3
 8004136:	4603      	mov	r3, r0
 8004138:	73fb      	strb	r3, [r7, #15]
  return res;
 800413a:	7bfb      	ldrb	r3, [r7, #15]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	200002e4 	.word	0x200002e4

08004148 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800415c:	e007      	b.n	800416e <mem_cpy+0x26>
		*d++ = *s++;
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	1c53      	adds	r3, r2, #1
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	1c59      	adds	r1, r3, #1
 8004168:	6179      	str	r1, [r7, #20]
 800416a:	7812      	ldrb	r2, [r2, #0]
 800416c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	1e5a      	subs	r2, r3, #1
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f2      	bne.n	800415e <mem_cpy+0x16>
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004194:	e005      	b.n	80041a2 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	617a      	str	r2, [r7, #20]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	1e5a      	subs	r2, r3, #1
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f4      	bne.n	8004196 <mem_set+0x12>
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	@ 0x24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80041d0:	bf00      	nop
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	1e5a      	subs	r2, r3, #1
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00d      	beq.n	80041f8 <mem_cmp+0x40>
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	61fa      	str	r2, [r7, #28]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	4619      	mov	r1, r3
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	61ba      	str	r2, [r7, #24]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	1acb      	subs	r3, r1, r3
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0ec      	beq.n	80041d2 <mem_cmp+0x1a>
	return r;
 80041f8:	697b      	ldr	r3, [r7, #20]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3724      	adds	r7, #36	@ 0x24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800420e:	e002      	b.n	8004216 <chk_chr+0x12>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3301      	adds	r3, #1
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <chk_chr+0x26>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	4293      	cmp	r3, r2
 8004228:	d1f2      	bne.n	8004210 <chk_chr+0xc>
	return *str;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	781b      	ldrb	r3, [r3, #0]
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004242:	2300      	movs	r3, #0
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	e038      	b.n	80042be <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800424c:	492f      	ldr	r1, [pc, #188]	@ (800430c <chk_lock+0xd4>)
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4613      	mov	r3, r2
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d029      	beq.n	80042b4 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004260:	492a      	ldr	r1, [pc, #168]	@ (800430c <chk_lock+0xd4>)
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4613      	mov	r3, r2
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004276:	429a      	cmp	r2, r3
 8004278:	d11e      	bne.n	80042b8 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800427a:	4924      	ldr	r1, [pc, #144]	@ (800430c <chk_lock+0xd4>)
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4613      	mov	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	3304      	adds	r3, #4
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004292:	429a      	cmp	r2, r3
 8004294:	d110      	bne.n	80042b8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004296:	491d      	ldr	r1, [pc, #116]	@ (800430c <chk_lock+0xd4>)
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4613      	mov	r3, r2
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	3308      	adds	r3, #8
 80042a6:	881a      	ldrh	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d102      	bne.n	80042b8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80042b2:	e007      	b.n	80042c4 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80042b4:	2301      	movs	r3, #1
 80042b6:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3301      	adds	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d9c3      	bls.n	800424c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d109      	bne.n	80042de <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <chk_lock+0x9e>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d101      	bne.n	80042da <chk_lock+0xa2>
 80042d6:	2300      	movs	r3, #0
 80042d8:	e013      	b.n	8004302 <chk_lock+0xca>
 80042da:	2312      	movs	r3, #18
 80042dc:	e011      	b.n	8004302 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <chk_lock+0xc4>
 80042e4:	4909      	ldr	r1, [pc, #36]	@ (800430c <chk_lock+0xd4>)
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4613      	mov	r3, r2
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	330a      	adds	r3, #10
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042fa:	d101      	bne.n	8004300 <chk_lock+0xc8>
 80042fc:	2310      	movs	r3, #16
 80042fe:	e000      	b.n	8004302 <chk_lock+0xca>
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	200002cc 	.word	0x200002cc

08004310 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	e002      	b.n	8004322 <enq_lock+0x12>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3301      	adds	r3, #1
 8004320:	607b      	str	r3, [r7, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d809      	bhi.n	800433c <enq_lock+0x2c>
 8004328:	490a      	ldr	r1, [pc, #40]	@ (8004354 <enq_lock+0x44>)
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1ef      	bne.n	800431c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b02      	cmp	r3, #2
 8004340:	bf14      	ite	ne
 8004342:	2301      	movne	r3, #1
 8004344:	2300      	moveq	r3, #0
 8004346:	b2db      	uxtb	r3, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	200002cc 	.word	0x200002cc

08004358 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	e02b      	b.n	80043c0 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8004368:	4955      	ldr	r1, [pc, #340]	@ (80044c0 <inc_lock+0x168>)
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4613      	mov	r3, r2
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800437e:	429a      	cmp	r2, r3
 8004380:	d11b      	bne.n	80043ba <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8004382:	494f      	ldr	r1, [pc, #316]	@ (80044c0 <inc_lock+0x168>)
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4613      	mov	r3, r2
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	3304      	adds	r3, #4
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 800439a:	429a      	cmp	r2, r3
 800439c:	d10d      	bne.n	80043ba <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800439e:	4948      	ldr	r1, [pc, #288]	@ (80044c0 <inc_lock+0x168>)
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4613      	mov	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	3308      	adds	r3, #8
 80043ae:	881a      	ldrh	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d006      	beq.n	80043c8 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3301      	adds	r3, #1
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d9d0      	bls.n	8004368 <inc_lock+0x10>
 80043c6:	e000      	b.n	80043ca <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80043c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d145      	bne.n	800445c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	e002      	b.n	80043dc <inc_lock+0x84>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3301      	adds	r3, #1
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d809      	bhi.n	80043f6 <inc_lock+0x9e>
 80043e2:	4937      	ldr	r1, [pc, #220]	@ (80044c0 <inc_lock+0x168>)
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1ef      	bne.n	80043d6 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d101      	bne.n	8004400 <inc_lock+0xa8>
 80043fc:	2300      	movs	r3, #0
 80043fe:	e05a      	b.n	80044b6 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 8004406:	482e      	ldr	r0, [pc, #184]	@ (80044c0 <inc_lock+0x168>)
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4613      	mov	r3, r2
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4403      	add	r3, r0
 8004414:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800441c:	4828      	ldr	r0, [pc, #160]	@ (80044c0 <inc_lock+0x168>)
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4613      	mov	r3, r2
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4403      	add	r3, r0
 800442a:	3304      	adds	r3, #4
 800442c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 8004434:	4922      	ldr	r1, [pc, #136]	@ (80044c0 <inc_lock+0x168>)
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4613      	mov	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	3308      	adds	r3, #8
 8004444:	4602      	mov	r2, r0
 8004446:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004448:	491d      	ldr	r1, [pc, #116]	@ (80044c0 <inc_lock+0x168>)
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	330a      	adds	r3, #10
 8004458:	2200      	movs	r2, #0
 800445a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00c      	beq.n	800447c <inc_lock+0x124>
 8004462:	4917      	ldr	r1, [pc, #92]	@ (80044c0 <inc_lock+0x168>)
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4613      	mov	r3, r2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	330a      	adds	r3, #10
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <inc_lock+0x124>
 8004478:	2300      	movs	r3, #0
 800447a:	e01c      	b.n	80044b6 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <inc_lock+0x142>
 8004482:	490f      	ldr	r1, [pc, #60]	@ (80044c0 <inc_lock+0x168>)
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4613      	mov	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	330a      	adds	r3, #10
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	b299      	uxth	r1, r3
 8004498:	e001      	b.n	800449e <inc_lock+0x146>
 800449a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800449e:	4808      	ldr	r0, [pc, #32]	@ (80044c0 <inc_lock+0x168>)
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4613      	mov	r3, r2
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4403      	add	r3, r0
 80044ac:	330a      	adds	r3, #10
 80044ae:	460a      	mov	r2, r1
 80044b0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3301      	adds	r3, #1
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr
 80044c0:	200002cc 	.word	0x200002cc

080044c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d82e      	bhi.n	8004536 <dec_lock+0x72>
		n = Files[i].ctr;
 80044d8:	491b      	ldr	r1, [pc, #108]	@ (8004548 <dec_lock+0x84>)
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	330a      	adds	r3, #10
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80044ec:	89fb      	ldrh	r3, [r7, #14]
 80044ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044f2:	d101      	bne.n	80044f8 <dec_lock+0x34>
 80044f4:	2300      	movs	r3, #0
 80044f6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80044f8:	89fb      	ldrh	r3, [r7, #14]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <dec_lock+0x40>
 80044fe:	89fb      	ldrh	r3, [r7, #14]
 8004500:	3b01      	subs	r3, #1
 8004502:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004504:	4910      	ldr	r1, [pc, #64]	@ (8004548 <dec_lock+0x84>)
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	330a      	adds	r3, #10
 8004514:	89fa      	ldrh	r2, [r7, #14]
 8004516:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004518:	89fb      	ldrh	r3, [r7, #14]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d108      	bne.n	8004530 <dec_lock+0x6c>
 800451e:	490a      	ldr	r1, [pc, #40]	@ (8004548 <dec_lock+0x84>)
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	737b      	strb	r3, [r7, #13]
 8004534:	e001      	b.n	800453a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004536:	2302      	movs	r3, #2
 8004538:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800453a:	7b7b      	ldrb	r3, [r7, #13]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	200002cc 	.word	0x200002cc

0800454c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	e016      	b.n	8004588 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800455a:	4910      	ldr	r1, [pc, #64]	@ (800459c <clear_lock+0x50>)
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4613      	mov	r3, r2
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	d108      	bne.n	8004582 <clear_lock+0x36>
 8004570:	490a      	ldr	r1, [pc, #40]	@ (800459c <clear_lock+0x50>)
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4613      	mov	r3, r2
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3301      	adds	r3, #1
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d9e5      	bls.n	800455a <clear_lock+0xe>
	}
}
 800458e:	bf00      	nop
 8004590:	bf00      	nop
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	200002cc 	.word	0x200002cc

080045a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d038      	beq.n	8004628 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80045bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	2301      	movs	r3, #1
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	f7ff fd7f 	bl	80040cc <disk_write>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <sync_window+0x3a>
			res = FR_DISK_ERR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	e026      	b.n	8004628 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	1ad2      	subs	r2, r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d218      	bcs.n	8004628 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	e010      	b.n	8004622 <sync_window+0x82>
					wsect += fs->fsize;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4413      	add	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	2301      	movs	r3, #1
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	f7ff fd58 	bl	80040cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	3b01      	subs	r3, #1
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d8eb      	bhi.n	8004600 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8004628:	7bfb      	ldrb	r3, [r7, #15]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d01b      	beq.n	8004684 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ffa7 	bl	80045a0 <sync_window>
 8004652:	4603      	mov	r3, r0
 8004654:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d113      	bne.n	8004684 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	2301      	movs	r3, #1
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	f7ff fd10 	bl	800408c <disk_read>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d004      	beq.n	800467c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004672:	f04f 33ff 	mov.w	r3, #4294967295
 8004676:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
		}
	}
	return res;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff ff82 	bl	80045a0 <sync_window>
 800469c:	4603      	mov	r3, r0
 800469e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f040 809b 	bne.w	80047de <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	f040 8088 	bne.w	80047c4 <sync_fs+0x136>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	f040 8082 	bne.w	80047c4 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046c6:	2100      	movs	r1, #0
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fd5b 	bl	8004184 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2255      	movs	r2, #85	@ 0x55
 80046d2:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	22aa      	movs	r2, #170	@ 0xaa
 80046da:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2252      	movs	r2, #82	@ 0x52
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2252      	movs	r2, #82	@ 0x52
 80046e8:	705a      	strb	r2, [r3, #1]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2261      	movs	r2, #97	@ 0x61
 80046ee:	709a      	strb	r2, [r3, #2]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2241      	movs	r2, #65	@ 0x41
 80046f4:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2272      	movs	r2, #114	@ 0x72
 80046fa:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2272      	movs	r2, #114	@ 0x72
 8004702:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2241      	movs	r2, #65	@ 0x41
 800470a:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2261      	movs	r2, #97	@ 0x61
 8004712:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800471c:	b2da      	uxtb	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800472a:	b29b      	uxth	r3, r3
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	b29b      	uxth	r3, r3
 8004730:	b2da      	uxtb	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800473e:	0c1b      	lsrs	r3, r3, #16
 8004740:	b2da      	uxtb	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800474e:	0e1b      	lsrs	r3, r3, #24
 8004750:	b2da      	uxtb	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800475e:	b2da      	uxtb	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800476c:	b29b      	uxth	r3, r3
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	b29b      	uxth	r3, r3
 8004772:	b2da      	uxtb	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004780:	0c1b      	lsrs	r3, r3, #16
 8004782:	b2da      	uxtb	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004790:	0e1b      	lsrs	r3, r3, #24
 8004792:	b2da      	uxtb	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 80047b6:	2301      	movs	r3, #1
 80047b8:	f7ff fc88 	bl	80040cc <disk_write>
			fs->fsi_flag = 0;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80047ca:	2200      	movs	r2, #0
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fc9c 	bl	800410c <disk_ioctl>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <sync_fs+0x150>
			res = FR_DISK_ERR;
 80047da:	2301      	movs	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80047de:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	3b02      	subs	r3, #2
 80047f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80047fe:	3b02      	subs	r3, #2
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d301      	bcc.n	800480a <clust2sect+0x22>
 8004806:	2300      	movs	r3, #0
 8004808:	e00a      	b.n	8004820 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8004810:	461a      	mov	r2, r3
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	fb03 f202 	mul.w	r2, r3, r2
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800481e:	4413      	add	r3, r2
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr

0800482a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b086      	sub	sp, #24
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d905      	bls.n	8004846 <get_fat+0x1c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <get_fat+0x22>
		val = 1;	/* Internal error */
 8004846:	2301      	movs	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e0a2      	b.n	8004992 <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800484c:	f04f 33ff 	mov.w	r3, #4294967295
 8004850:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004858:	2b03      	cmp	r3, #3
 800485a:	d067      	beq.n	800492c <get_fat+0x102>
 800485c:	2b03      	cmp	r3, #3
 800485e:	f300 808e 	bgt.w	800497e <get_fat+0x154>
 8004862:	2b01      	cmp	r3, #1
 8004864:	d002      	beq.n	800486c <get_fat+0x42>
 8004866:	2b02      	cmp	r3, #2
 8004868:	d03f      	beq.n	80048ea <get_fat+0xc0>
 800486a:	e088      	b.n	800497e <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	0a5b      	lsrs	r3, r3, #9
 8004884:	4413      	add	r3, r2
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fed2 	bl	8004632 <move_window>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d177      	bne.n	8004984 <get_fat+0x15a>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	60fa      	str	r2, [r7, #12]
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	5cd3      	ldrb	r3, [r2, r3]
 80048a2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	0a5b      	lsrs	r3, r3, #9
 80048ae:	4413      	add	r3, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff febd 	bl	8004632 <move_window>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d164      	bne.n	8004988 <get_fat+0x15e>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	5cd3      	ldrb	r3, [r2, r3]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <get_fat+0xb6>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	e002      	b.n	80048e6 <get_fat+0xbc>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e6:	617b      	str	r3, [r7, #20]
			break;
 80048e8:	e053      	b.n	8004992 <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	4413      	add	r3, r2
 80048f6:	4619      	mov	r1, r3
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fe9a 	bl	8004632 <move_window>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d143      	bne.n	800498c <get_fat+0x162>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4413      	add	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	3301      	adds	r3, #1
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	b21a      	sxth	r2, r3
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	b21b      	sxth	r3, r3
 8004922:	4313      	orrs	r3, r2
 8004924:	b21b      	sxth	r3, r3
 8004926:	b29b      	uxth	r3, r3
 8004928:	617b      	str	r3, [r7, #20]
			break;
 800492a:	e032      	b.n	8004992 <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	09db      	lsrs	r3, r3, #7
 8004936:	4413      	add	r3, r2
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff fe79 	bl	8004632 <move_window>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d124      	bne.n	8004990 <get_fat+0x166>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	4413      	add	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	3303      	adds	r3, #3
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	061a      	lsls	r2, r3, #24
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	3302      	adds	r3, #2
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	041b      	lsls	r3, r3, #16
 8004964:	431a      	orrs	r2, r3
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	3301      	adds	r3, #1
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	4313      	orrs	r3, r2
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	7812      	ldrb	r2, [r2, #0]
 8004974:	4313      	orrs	r3, r2
 8004976:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800497a:	617b      	str	r3, [r7, #20]
			break;
 800497c:	e009      	b.n	8004992 <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 800497e:	2301      	movs	r3, #1
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	e006      	b.n	8004992 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004984:	bf00      	nop
 8004986:	e004      	b.n	8004992 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004988:	bf00      	nop
 800498a:	e002      	b.n	8004992 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800498c:	bf00      	nop
 800498e:	e000      	b.n	8004992 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004990:	bf00      	nop
		}
	}

	return val;
 8004992:	697b      	ldr	r3, [r7, #20]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d905      	bls.n	80049ba <put_fat+0x1e>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d302      	bcc.n	80049c0 <put_fat+0x24>
		res = FR_INT_ERR;
 80049ba:	2302      	movs	r3, #2
 80049bc:	77fb      	strb	r3, [r7, #31]
 80049be:	e0f6      	b.n	8004bae <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	f000 809e 	beq.w	8004b08 <put_fat+0x16c>
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	f300 80e4 	bgt.w	8004b9a <put_fat+0x1fe>
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d002      	beq.n	80049dc <put_fat+0x40>
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d06f      	beq.n	8004aba <put_fat+0x11e>
 80049da:	e0de      	b.n	8004b9a <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	085b      	lsrs	r3, r3, #1
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4413      	add	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	0a5b      	lsrs	r3, r3, #9
 80049f4:	4413      	add	r3, r2
 80049f6:	4619      	mov	r1, r3
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff fe1a 	bl	8004632 <move_window>
 80049fe:	4603      	mov	r3, r0
 8004a00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a02:	7ffb      	ldrb	r3, [r7, #31]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f040 80cb 	bne.w	8004ba0 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	617a      	str	r2, [r7, #20]
 8004a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00d      	beq.n	8004a40 <put_fat+0xa4>
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	b25b      	sxtb	r3, r3
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	b25a      	sxtb	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	b25b      	sxtb	r3, r3
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	b25b      	sxtb	r3, r3
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e001      	b.n	8004a44 <put_fat+0xa8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	0a5b      	lsrs	r3, r3, #9
 8004a5a:	4413      	add	r3, r2
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff fde7 	bl	8004632 <move_window>
 8004a64:	4603      	mov	r3, r0
 8004a66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a68:	7ffb      	ldrb	r3, [r7, #31]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 809a 	bne.w	8004ba4 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <put_fat+0xf2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	091b      	lsrs	r3, r3, #4
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	e00e      	b.n	8004aac <put_fat+0x110>
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	b25b      	sxtb	r3, r3
 8004a94:	f023 030f 	bic.w	r3, r3, #15
 8004a98:	b25a      	sxtb	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	0a1b      	lsrs	r3, r3, #8
 8004a9e:	b25b      	sxtb	r3, r3
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	b25b      	sxtb	r3, r3
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	b25b      	sxtb	r3, r3
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8004ab8:	e079      	b.n	8004bae <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	0a1b      	lsrs	r3, r3, #8
 8004ac4:	4413      	add	r3, r2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff fdb2 	bl	8004632 <move_window>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ad2:	7ffb      	ldrb	r3, [r7, #31]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d167      	bne.n	8004ba8 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	0a1b      	lsrs	r3, r3, #8
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	3301      	adds	r3, #1
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8004b06:	e052      	b.n	8004bae <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	09db      	lsrs	r3, r3, #7
 8004b12:	4413      	add	r3, r2
 8004b14:	4619      	mov	r1, r3
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f7ff fd8b 	bl	8004632 <move_window>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b20:	7ffb      	ldrb	r3, [r7, #31]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d142      	bne.n	8004bac <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4413      	add	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	3303      	adds	r3, #3
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	061a      	lsls	r2, r3, #24
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	3302      	adds	r3, #2
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	041b      	lsls	r3, r3, #16
 8004b44:	431a      	orrs	r2, r3
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	7812      	ldrb	r2, [r2, #0]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	701a      	strb	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	0a1b      	lsrs	r3, r3, #8
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	3301      	adds	r3, #1
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	701a      	strb	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	0c1a      	lsrs	r2, r3, #16
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	3302      	adds	r3, #2
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	0e1a      	lsrs	r2, r3, #24
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	3303      	adds	r3, #3
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8004b98:	e009      	b.n	8004bae <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	77fb      	strb	r3, [r7, #31]
 8004b9e:	e006      	b.n	8004bae <put_fat+0x212>
			if (res != FR_OK) break;
 8004ba0:	bf00      	nop
 8004ba2:	e004      	b.n	8004bae <put_fat+0x212>
			if (res != FR_OK) break;
 8004ba4:	bf00      	nop
 8004ba6:	e002      	b.n	8004bae <put_fat+0x212>
			if (res != FR_OK) break;
 8004ba8:	bf00      	nop
 8004baa:	e000      	b.n	8004bae <put_fat+0x212>
			if (res != FR_OK) break;
 8004bac:	bf00      	nop
		}
	}

	return res;
 8004bae:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3720      	adds	r7, #32
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d905      	bls.n	8004bd4 <remove_chain+0x1c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d302      	bcc.n	8004bda <remove_chain+0x22>
		res = FR_INT_ERR;
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	73fb      	strb	r3, [r7, #15]
 8004bd8:	e043      	b.n	8004c62 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004bde:	e036      	b.n	8004c4e <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004be0:	6839      	ldr	r1, [r7, #0]
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff fe21 	bl	800482a <get_fat>
 8004be8:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d035      	beq.n	8004c5c <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d102      	bne.n	8004bfc <remove_chain+0x44>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	73fb      	strb	r3, [r7, #15]
 8004bfa:	e032      	b.n	8004c62 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c02:	d102      	bne.n	8004c0a <remove_chain+0x52>
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
 8004c08:	e02b      	b.n	8004c62 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	6839      	ldr	r1, [r7, #0]
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff fec4 	bl	800499c <put_fat>
 8004c14:	4603      	mov	r3, r0
 8004c16:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d120      	bne.n	8004c60 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d00f      	beq.n	8004c4a <remove_chain+0x92>
				fs->free_clust++;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				fs->fsi_flag |= 1;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d3c2      	bcc.n	8004be0 <remove_chain+0x28>
 8004c5a:	e002      	b.n	8004c62 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8004c5c:	bf00      	nop
 8004c5e:	e000      	b.n	8004c62 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8004c60:	bf00      	nop
		}
	}

	return res;
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10f      	bne.n	8004c9c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004c82:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <create_chain+0x2a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d31c      	bcc.n	8004cd0 <create_chain+0x64>
 8004c96:	2301      	movs	r3, #1
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	e019      	b.n	8004cd0 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004c9c:	6839      	ldr	r1, [r7, #0]
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff fdc3 	bl	800482a <get_fat>
 8004ca4:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d801      	bhi.n	8004cb0 <create_chain+0x44>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e076      	b.n	8004d9e <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d101      	bne.n	8004cbc <create_chain+0x50>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	e070      	b.n	8004d9e <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d201      	bcs.n	8004ccc <create_chain+0x60>
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	e068      	b.n	8004d9e <create_chain+0x132>
		scl = clst;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d307      	bcc.n	8004cf6 <create_chain+0x8a>
			ncl = 2;
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d901      	bls.n	8004cf6 <create_chain+0x8a>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	e053      	b.n	8004d9e <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004cf6:	6979      	ldr	r1, [r7, #20]
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff fd96 	bl	800482a <get_fat>
 8004cfe:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00e      	beq.n	8004d24 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d002      	beq.n	8004d14 <create_chain+0xa8>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <create_chain+0xac>
			return cs;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	e042      	b.n	8004d9e <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d1d9      	bne.n	8004cd4 <create_chain+0x68>
 8004d20:	2300      	movs	r3, #0
 8004d22:	e03c      	b.n	8004d9e <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8004d24:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004d26:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8004d2a:	6979      	ldr	r1, [r7, #20]
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff fe35 	bl	800499c <put_fat>
 8004d32:	4603      	mov	r3, r0
 8004d34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d109      	bne.n	8004d50 <create_chain+0xe4>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d006      	beq.n	8004d50 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	6839      	ldr	r1, [r7, #0]
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff fe28 	bl	800499c <put_fat>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d11a      	bne.n	8004d8c <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d018      	beq.n	8004d9c <create_chain+0x130>
			fs->free_clust--;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004d70:	1e5a      	subs	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fs->fsi_flag |= 1;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 8004d8a:	e007      	b.n	8004d9c <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d102      	bne.n	8004d98 <create_chain+0x12c>
 8004d92:	f04f 33ff 	mov.w	r3, #4294967295
 8004d96:	e000      	b.n	8004d9a <create_chain+0x12e>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004d9c:	697b      	ldr	r3, [r7, #20]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b087      	sub	sp, #28
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8004db6:	3304      	adds	r3, #4
 8004db8:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	0a5b      	lsrs	r3, r3, #9
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8004dc4:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8004dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1d1a      	adds	r2, r3, #4
 8004dd2:	613a      	str	r2, [r7, #16]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <clmt_clust+0x3c>
 8004dde:	2300      	movs	r3, #0
 8004de0:	e010      	b.n	8004e04 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d307      	bcc.n	8004dfa <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	3304      	adds	r3, #4
 8004df6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004df8:	e7e9      	b.n	8004dce <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8004dfa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	4413      	add	r3, r2
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr

08004e0e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b086      	sub	sp, #24
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8004e28:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d007      	beq.n	8004e40 <dir_sdi+0x32>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004e36:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d301      	bcc.n	8004e44 <dir_sdi+0x36>
		return FR_INT_ERR;
 8004e40:	2302      	movs	r3, #2
 8004e42:	e074      	b.n	8004f2e <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10c      	bne.n	8004e64 <dir_sdi+0x56>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004e50:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d105      	bne.n	8004e64 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004e5e:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8004e62:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d111      	bne.n	8004e8e <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004e70:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8004e74:	461a      	mov	r2, r3
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d301      	bcc.n	8004e80 <dir_sdi+0x72>
			return FR_INT_ERR;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e056      	b.n	8004f2e <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004e86:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	e032      	b.n	8004ef4 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004e94:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004e9c:	e01e      	b.n	8004edc <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004ea4:	6979      	ldr	r1, [r7, #20]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fcbf 	bl	800482a <get_fat>
 8004eac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d101      	bne.n	8004eba <dir_sdi+0xac>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e039      	b.n	8004f2e <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d907      	bls.n	8004ed0 <dir_sdi+0xc2>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004ec6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d301      	bcc.n	8004ed4 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e02c      	b.n	8004f2e <dir_sdi+0x120>
			idx -= ic;
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d2dc      	bcs.n	8004e9e <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004eea:	6979      	ldr	r1, [r7, #20]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff fc7b 	bl	80047e8 <clust2sect>
 8004ef2:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <dir_sdi+0xf8>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e013      	b.n	8004f2e <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	091a      	lsrs	r2, r3, #4
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	441a      	add	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	015b      	lsls	r3, r3, #5
 8004f24:	441a      	add	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004f36:	b590      	push	{r4, r7, lr}
 8004f38:	b087      	sub	sp, #28
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d004      	beq.n	8004f5c <dir_next+0x26>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <dir_next+0x2a>
		return FR_NO_FILE;
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	e0dd      	b.n	800511c <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f040 80c6 	bne.w	80050f8 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10b      	bne.n	8004f9c <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004f8a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8004f8e:	461a      	mov	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4293      	cmp	r3, r2
 8004f94:	f0c0 80b0 	bcc.w	80050f8 <dir_next+0x1c2>
				return FR_NO_FILE;
 8004f98:	2304      	movs	r3, #4
 8004f9a:	e0bf      	b.n	800511c <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	091b      	lsrs	r3, r3, #4
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8004fa6:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8004faa:	3a01      	subs	r2, #1
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f040 80a2 	bne.w	80050f8 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f7ff fc31 	bl	800482a <get_fat>
 8004fc8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d801      	bhi.n	8004fd4 <dir_next+0x9e>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e0a3      	b.n	800511c <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fda:	d101      	bne.n	8004fe0 <dir_next+0xaa>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e09d      	b.n	800511c <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004fe6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d374      	bcc.n	80050da <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <dir_next+0xc4>
 8004ff6:	2304      	movs	r3, #4
 8004ff8:	e090      	b.n	800511c <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005006:	4619      	mov	r1, r3
 8005008:	4610      	mov	r0, r2
 800500a:	f7ff fe2f 	bl	8004c6c <create_chain>
 800500e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <dir_next+0xe4>
 8005016:	2307      	movs	r3, #7
 8005018:	e080      	b.n	800511c <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <dir_next+0xee>
 8005020:	2302      	movs	r3, #2
 8005022:	e07b      	b.n	800511c <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502a:	d101      	bne.n	8005030 <dir_next+0xfa>
 800502c:	2301      	movs	r3, #1
 800502e:	e075      	b.n	800511c <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fab2 	bl	80045a0 <sync_window>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <dir_next+0x110>
 8005042:	2301      	movs	r3, #1
 8005044:	e06a      	b.n	800511c <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800504c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005050:	2100      	movs	r1, #0
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff f896 	bl	8004184 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 8005064:	6979      	ldr	r1, [r7, #20]
 8005066:	4610      	mov	r0, r2
 8005068:	f7ff fbbe 	bl	80047e8 <clust2sect>
 800506c:	4603      	mov	r3, r0
 800506e:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	e01b      	b.n	80050b0 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fa88 	bl	80045a0 <sync_window>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <dir_next+0x164>
 8005096:	2301      	movs	r3, #1
 8005098:	e040      	b.n	800511c <dir_next+0x1e6>
						dp->fs->winsect++;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80050a0:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 80050a4:	3201      	adds	r2, #1
 80050a6:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	3301      	adds	r3, #1
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80050b6:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80050ba:	461a      	mov	r2, r3
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4293      	cmp	r3, r2
 80050c0:	d3da      	bcc.n	8005078 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80050c8:	f8d3 122c 	ldr.w	r1, [r3, #556]	@ 0x22c
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	1a8a      	subs	r2, r1, r2
 80050d6:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80050e8:	6979      	ldr	r1, [r7, #20]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fb7c 	bl	80047e8 <clust2sect>
 80050f0:	4602      	mov	r2, r0
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005108:	461a      	mov	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	015b      	lsls	r3, r3, #5
 8005112:	441a      	add	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	bd90      	pop	{r4, r7, pc}

08005124 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800512e:	2100      	movs	r1, #0
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fe6c 	bl	8004e0e <dir_sdi>
 8005136:	4603      	mov	r3, r0
 8005138:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d131      	bne.n	80051a4 <dir_alloc+0x80>
		n = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005150:	4619      	mov	r1, r3
 8005152:	4610      	mov	r0, r2
 8005154:	f7ff fa6d 	bl	8004632 <move_window>
 8005158:	4603      	mov	r3, r0
 800515a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d11f      	bne.n	80051a2 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2be5      	cmp	r3, #229	@ 0xe5
 800516c:	d005      	beq.n	800517a <dir_alloc+0x56>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d107      	bne.n	800518a <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	3301      	adds	r3, #1
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d102      	bne.n	800518e <dir_alloc+0x6a>
 8005188:	e00c      	b.n	80051a4 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800518a:	2300      	movs	r3, #0
 800518c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800518e:	2101      	movs	r1, #1
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff fed0 	bl	8004f36 <dir_next>
 8005196:	4603      	mov	r3, r0
 8005198:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0d1      	beq.n	8005144 <dir_alloc+0x20>
 80051a0:	e000      	b.n	80051a4 <dir_alloc+0x80>
			if (res != FR_OK) break;
 80051a2:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d101      	bne.n	80051ae <dir_alloc+0x8a>
 80051aa:	2307      	movs	r3, #7
 80051ac:	73fb      	strb	r3, [r7, #15]
	return res;
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	331b      	adds	r3, #27
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	b21a      	sxth	r2, r3
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	331a      	adds	r3, #26
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	b21b      	sxth	r3, r3
 80051d4:	4313      	orrs	r3, r2
 80051d6:	b21b      	sxth	r3, r3
 80051d8:	b29b      	uxth	r3, r3
 80051da:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d10f      	bne.n	8005206 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	3315      	adds	r3, #21
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	b21a      	sxth	r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	3314      	adds	r3, #20
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	b21b      	sxth	r3, r3
 80051f8:	4313      	orrs	r3, r2
 80051fa:	b21b      	sxth	r3, r3
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

	return cl;
 8005206:	68fb      	ldr	r3, [r7, #12]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr

08005212 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	331a      	adds	r3, #26
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	0a1b      	lsrs	r3, r3, #8
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	331b      	adds	r3, #27
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	0c1a      	lsrs	r2, r3, #16
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3314      	adds	r3, #20
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	0c1b      	lsrs	r3, r3, #16
 8005246:	b29b      	uxth	r3, r3
 8005248:	0a1b      	lsrs	r3, r3, #8
 800524a:	b29a      	uxth	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3315      	adds	r3, #21
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr

0800525e <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b086      	sub	sp, #24
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005266:	2100      	movs	r1, #0
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff fdd0 	bl	8004e0e <dir_sdi>
 800526e:	4603      	mov	r3, r0
 8005270:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005272:	7dfb      	ldrb	r3, [r7, #23]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <dir_find+0x1e>
 8005278:	7dfb      	ldrb	r3, [r7, #23]
 800527a:	e03b      	b.n	80052f4 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005288:	4619      	mov	r1, r3
 800528a:	4610      	mov	r0, r2
 800528c:	f7ff f9d1 	bl	8004632 <move_window>
 8005290:	4603      	mov	r3, r0
 8005292:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005294:	7dfb      	ldrb	r3, [r7, #23]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d128      	bne.n	80052ec <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80052a0:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d102      	bne.n	80052b4 <dir_find+0x56>
 80052ae:	2304      	movs	r3, #4
 80052b0:	75fb      	strb	r3, [r7, #23]
 80052b2:	e01e      	b.n	80052f2 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	330b      	adds	r3, #11
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <dir_find+0x7a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80052c8:	220b      	movs	r2, #11
 80052ca:	4619      	mov	r1, r3
 80052cc:	6938      	ldr	r0, [r7, #16]
 80052ce:	f7fe ff73 	bl	80041b8 <mem_cmp>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00b      	beq.n	80052f0 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80052d8:	2100      	movs	r1, #0
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff fe2b 	bl	8004f36 <dir_next>
 80052e0:	4603      	mov	r3, r0
 80052e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80052e4:	7dfb      	ldrb	r3, [r7, #23]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0c8      	beq.n	800527c <dir_find+0x1e>
 80052ea:	e002      	b.n	80052f2 <dir_find+0x94>
		if (res != FR_OK) break;
 80052ec:	bf00      	nop
 80052ee:	e000      	b.n	80052f2 <dir_find+0x94>
			break;
 80052f0:	bf00      	nop

	return res;
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005304:	2101      	movs	r1, #1
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff ff0c 	bl	8005124 <dir_alloc>
 800530c:	4603      	mov	r3, r0
 800530e:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d126      	bne.n	8005364 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005322:	4619      	mov	r1, r3
 8005324:	4610      	mov	r0, r2
 8005326:	f7ff f984 	bl	8004632 <move_window>
 800532a:	4603      	mov	r3, r0
 800532c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d117      	bne.n	8005364 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800533a:	2220      	movs	r2, #32
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f7fe ff20 	bl	8004184 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005350:	220b      	movs	r2, #11
 8005352:	4619      	mov	r1, r3
 8005354:	f7fe fef8 	bl	8004148 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	e002      	b.n	8005388 <create_name+0x18>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3301      	adds	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b2f      	cmp	r3, #47	@ 0x2f
 800538e:	d0f8      	beq.n	8005382 <create_name+0x12>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b5c      	cmp	r3, #92	@ 0x5c
 8005396:	d0f4      	beq.n	8005382 <create_name+0x12>
	sfn = dp->fn;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800539e:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80053a0:	220b      	movs	r2, #11
 80053a2:	2120      	movs	r1, #32
 80053a4:	68b8      	ldr	r0, [r7, #8]
 80053a6:	f7fe feed 	bl	8004184 <mem_set>
	si = i = b = 0; ni = 8;
 80053aa:	2300      	movs	r3, #0
 80053ac:	77fb      	strb	r3, [r7, #31]
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	2308      	movs	r3, #8
 80053b8:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	617a      	str	r2, [r7, #20]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80053c8:	7fbb      	ldrb	r3, [r7, #30]
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d953      	bls.n	8005476 <create_name+0x106>
 80053ce:	7fbb      	ldrb	r3, [r7, #30]
 80053d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80053d2:	d050      	beq.n	8005476 <create_name+0x106>
 80053d4:	7fbb      	ldrb	r3, [r7, #30]
 80053d6:	2b5c      	cmp	r3, #92	@ 0x5c
 80053d8:	d04d      	beq.n	8005476 <create_name+0x106>
		if (c == '.' || i >= ni) {
 80053da:	7fbb      	ldrb	r3, [r7, #30]
 80053dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80053de:	d003      	beq.n	80053e8 <create_name+0x78>
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d30f      	bcc.n	8005408 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d102      	bne.n	80053f4 <create_name+0x84>
 80053ee:	7fbb      	ldrb	r3, [r7, #30]
 80053f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80053f2:	d001      	beq.n	80053f8 <create_name+0x88>
 80053f4:	2306      	movs	r3, #6
 80053f6:	e073      	b.n	80054e0 <create_name+0x170>
			i = 8; ni = 11;
 80053f8:	2308      	movs	r3, #8
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	230b      	movs	r3, #11
 80053fe:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8005400:	7ffb      	ldrb	r3, [r7, #31]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e035      	b.n	8005474 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005408:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800540c:	2b00      	cmp	r3, #0
 800540e:	da08      	bge.n	8005422 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8005410:	7ffb      	ldrb	r3, [r7, #31]
 8005412:	f043 0303 	orr.w	r3, r3, #3
 8005416:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005418:	7fbb      	ldrb	r3, [r7, #30]
 800541a:	3b80      	subs	r3, #128	@ 0x80
 800541c:	4a32      	ldr	r2, [pc, #200]	@ (80054e8 <create_name+0x178>)
 800541e:	5cd3      	ldrb	r3, [r2, r3]
 8005420:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8005422:	7fbb      	ldrb	r3, [r7, #30]
 8005424:	4619      	mov	r1, r3
 8005426:	4831      	ldr	r0, [pc, #196]	@ (80054ec <create_name+0x17c>)
 8005428:	f7fe feec 	bl	8004204 <chk_chr>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <create_name+0xc6>
				return FR_INVALID_NAME;
 8005432:	2306      	movs	r3, #6
 8005434:	e054      	b.n	80054e0 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8005436:	7fbb      	ldrb	r3, [r7, #30]
 8005438:	2b40      	cmp	r3, #64	@ 0x40
 800543a:	d907      	bls.n	800544c <create_name+0xdc>
 800543c:	7fbb      	ldrb	r3, [r7, #30]
 800543e:	2b5a      	cmp	r3, #90	@ 0x5a
 8005440:	d804      	bhi.n	800544c <create_name+0xdc>
				b |= 2;
 8005442:	7ffb      	ldrb	r3, [r7, #31]
 8005444:	f043 0302 	orr.w	r3, r3, #2
 8005448:	77fb      	strb	r3, [r7, #31]
 800544a:	e00c      	b.n	8005466 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800544c:	7fbb      	ldrb	r3, [r7, #30]
 800544e:	2b60      	cmp	r3, #96	@ 0x60
 8005450:	d909      	bls.n	8005466 <create_name+0xf6>
 8005452:	7fbb      	ldrb	r3, [r7, #30]
 8005454:	2b7a      	cmp	r3, #122	@ 0x7a
 8005456:	d806      	bhi.n	8005466 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8005458:	7ffb      	ldrb	r3, [r7, #31]
 800545a:	f043 0301 	orr.w	r3, r3, #1
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	7fbb      	ldrb	r3, [r7, #30]
 8005462:	3b20      	subs	r3, #32
 8005464:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	613a      	str	r2, [r7, #16]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	4413      	add	r3, r2
 8005470:	7fba      	ldrb	r2, [r7, #30]
 8005472:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005474:	e7a1      	b.n	80053ba <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	441a      	add	r2, r3
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005480:	7fbb      	ldrb	r3, [r7, #30]
 8005482:	2b20      	cmp	r3, #32
 8005484:	d801      	bhi.n	800548a <create_name+0x11a>
 8005486:	2304      	movs	r3, #4
 8005488:	e000      	b.n	800548c <create_name+0x11c>
 800548a:	2300      	movs	r3, #0
 800548c:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <create_name+0x128>
 8005494:	2306      	movs	r3, #6
 8005496:	e023      	b.n	80054e0 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2be5      	cmp	r3, #229	@ 0xe5
 800549e:	d102      	bne.n	80054a6 <create_name+0x136>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2205      	movs	r2, #5
 80054a4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d102      	bne.n	80054b2 <create_name+0x142>
 80054ac:	7ffb      	ldrb	r3, [r7, #31]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80054b2:	7ffb      	ldrb	r3, [r7, #31]
 80054b4:	f003 0303 	and.w	r3, r3, #3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d103      	bne.n	80054c4 <create_name+0x154>
 80054bc:	7fbb      	ldrb	r3, [r7, #30]
 80054be:	f043 0310 	orr.w	r3, r3, #16
 80054c2:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80054c4:	7ffb      	ldrb	r3, [r7, #31]
 80054c6:	f003 030c 	and.w	r3, r3, #12
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d103      	bne.n	80054d6 <create_name+0x166>
 80054ce:	7fbb      	ldrb	r3, [r7, #30]
 80054d0:	f043 0308 	orr.w	r3, r3, #8
 80054d4:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	330b      	adds	r3, #11
 80054da:	7fba      	ldrb	r2, [r7, #30]
 80054dc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80054de:	2300      	movs	r3, #0
#endif
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	08007920 	.word	0x08007920
 80054ec:	080078b8 	.word	0x080078b8

080054f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8005500:	d003      	beq.n	800550a <follow_path+0x1a>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b5c      	cmp	r3, #92	@ 0x5c
 8005508:	d102      	bne.n	8005510 <follow_path+0x20>
		path++;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	3301      	adds	r3, #1
 800550e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b1f      	cmp	r3, #31
 800551e:	d80a      	bhi.n	8005536 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8005520:	2100      	movs	r1, #0
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff fc73 	bl	8004e0e <dir_sdi>
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005534:	e045      	b.n	80055c2 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005536:	463b      	mov	r3, r7
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff ff18 	bl	8005370 <create_name>
 8005540:	4603      	mov	r3, r0
 8005542:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d136      	bne.n	80055b8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff fe87 	bl	800525e <dir_find>
 8005550:	4603      	mov	r3, r0
 8005552:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800555a:	7adb      	ldrb	r3, [r3, #11]
 800555c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	2b04      	cmp	r3, #4
 8005568:	d128      	bne.n	80055bc <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800556a:	7bbb      	ldrb	r3, [r7, #14]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d123      	bne.n	80055bc <follow_path+0xcc>
 8005574:	2305      	movs	r3, #5
 8005576:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005578:	e020      	b.n	80055bc <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800557a:	7bbb      	ldrb	r3, [r7, #14]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d11d      	bne.n	80055c0 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800558a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	330b      	adds	r3, #11
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800559a:	2305      	movs	r3, #5
 800559c:	73fb      	strb	r3, [r7, #15]
 800559e:	e010      	b.n	80055c2 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff fe05 	bl	80051b8 <ld_clust>
 80055ae:	4602      	mov	r2, r0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80055b6:	e7be      	b.n	8005536 <follow_path+0x46>
			if (res != FR_OK) break;
 80055b8:	bf00      	nop
 80055ba:	e002      	b.n	80055c2 <follow_path+0xd2>
				break;
 80055bc:	bf00      	nop
 80055be:	e000      	b.n	80055c2 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80055c0:	bf00      	nop
		}
	}

	return res;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80055d4:	f04f 33ff 	mov.w	r3, #4294967295
 80055d8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d031      	beq.n	8005646 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	e002      	b.n	80055f0 <get_ldnumber+0x24>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	3301      	adds	r3, #1
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d903      	bls.n	8005600 <get_ldnumber+0x34>
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80055fe:	d1f4      	bne.n	80055ea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b3a      	cmp	r3, #58	@ 0x3a
 8005606:	d11c      	bne.n	8005642 <get_ldnumber+0x76>
			tp = *path;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	60fa      	str	r2, [r7, #12]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	3b30      	subs	r3, #48	@ 0x30
 8005618:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b09      	cmp	r3, #9
 800561e:	d80e      	bhi.n	800563e <get_ldnumber+0x72>
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	429a      	cmp	r2, r3
 8005626:	d10a      	bne.n	800563e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d107      	bne.n	800563e <get_ldnumber+0x72>
					vol = (int)i;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	3301      	adds	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	e002      	b.n	8005648 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005642:	2300      	movs	r3, #0
 8005644:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005646:	693b      	ldr	r3, [r7, #16]
}
 8005648:	4618      	mov	r0, r3
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr
	...

08005654 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f04f 32ff 	mov.w	r2, #4294967295
 800566c:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fe ffdd 	bl	8004632 <move_window>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <check_fs+0x2e>
		return 3;
 800567e:	2303      	movs	r3, #3
 8005680:	e04a      	b.n	8005718 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005688:	3301      	adds	r3, #1
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	b21a      	sxth	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8005696:	b21b      	sxth	r3, r3
 8005698:	4313      	orrs	r3, r2
 800569a:	b21b      	sxth	r3, r3
 800569c:	4a20      	ldr	r2, [pc, #128]	@ (8005720 <check_fs+0xcc>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d001      	beq.n	80056a6 <check_fs+0x52>
		return 2;
 80056a2:	2302      	movs	r3, #2
 80056a4:	e038      	b.n	8005718 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3336      	adds	r3, #54	@ 0x36
 80056aa:	3303      	adds	r3, #3
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	061a      	lsls	r2, r3, #24
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3336      	adds	r3, #54	@ 0x36
 80056b4:	3302      	adds	r3, #2
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	041b      	lsls	r3, r3, #16
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3336      	adds	r3, #54	@ 0x36
 80056c0:	3301      	adds	r3, #1
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	4313      	orrs	r3, r2
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80056d4:	4a13      	ldr	r2, [pc, #76]	@ (8005724 <check_fs+0xd0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <check_fs+0x8a>
		return 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	e01c      	b.n	8005718 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3352      	adds	r3, #82	@ 0x52
 80056e2:	3303      	adds	r3, #3
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	061a      	lsls	r2, r3, #24
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3352      	adds	r3, #82	@ 0x52
 80056ec:	3302      	adds	r3, #2
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3352      	adds	r3, #82	@ 0x52
 80056f8:	3301      	adds	r3, #1
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	4313      	orrs	r3, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8005706:	4313      	orrs	r3, r2
 8005708:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800570c:	4a05      	ldr	r2, [pc, #20]	@ (8005724 <check_fs+0xd0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d101      	bne.n	8005716 <check_fs+0xc2>
		return 0;
 8005712:	2300      	movs	r3, #0
 8005714:	e000      	b.n	8005718 <check_fs+0xc4>

	return 1;
 8005716:	2301      	movs	r3, #1
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	ffffaa55 	.word	0xffffaa55
 8005724:	00544146 	.word	0x00544146

08005728 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b096      	sub	sp, #88	@ 0x58
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	4613      	mov	r3, r2
 8005734:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800573c:	68b8      	ldr	r0, [r7, #8]
 800573e:	f7ff ff45 	bl	80055cc <get_ldnumber>
 8005742:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005746:	2b00      	cmp	r3, #0
 8005748:	da01      	bge.n	800574e <find_volume+0x26>
 800574a:	230b      	movs	r3, #11
 800574c:	e2a8      	b.n	8005ca0 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800574e:	4a9d      	ldr	r2, [pc, #628]	@ (80059c4 <find_volume+0x29c>)
 8005750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005756:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <find_volume+0x3a>
 800575e:	230c      	movs	r3, #12
 8005760:	e29e      	b.n	8005ca0 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005766:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800576e:	2b00      	cmp	r3, #0
 8005770:	d01b      	beq.n	80057aa <find_volume+0x82>
		stat = disk_status(fs->drv);
 8005772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005774:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe fc47 	bl	800400c <disk_status>
 800577e:	4603      	mov	r3, r0
 8005780:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005784:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10c      	bne.n	80057aa <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <find_volume+0x7e>
 8005796:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80057a2:	230a      	movs	r3, #10
 80057a4:	e27c      	b.n	8005ca0 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 80057a6:	2300      	movs	r3, #0
 80057a8:	e27a      	b.n	8005ca0 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80057aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80057b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80057bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fc3c 	bl	8004040 <disk_initialize>
 80057c8:	4603      	mov	r3, r0
 80057ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80057ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80057da:	2303      	movs	r3, #3
 80057dc:	e260      	b.n	8005ca0 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d007      	beq.n	80057f4 <find_volume+0xcc>
 80057e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80057f0:	230a      	movs	r3, #10
 80057f2:	e255      	b.n	8005ca0 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80057f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80057fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80057fc:	f7ff ff2a 	bl	8005654 <check_fs>
 8005800:	4603      	mov	r3, r0
 8005802:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005806:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800580a:	2b01      	cmp	r3, #1
 800580c:	d153      	bne.n	80058b6 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800580e:	2300      	movs	r3, #0
 8005810:	643b      	str	r3, [r7, #64]	@ 0x40
 8005812:	e028      	b.n	8005866 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005814:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800581e:	4413      	add	r3, r2
 8005820:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	3304      	adds	r3, #4
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d012      	beq.n	8005852 <find_volume+0x12a>
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	330b      	adds	r3, #11
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	061a      	lsls	r2, r3, #24
 8005834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005836:	330a      	adds	r3, #10
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	041b      	lsls	r3, r3, #16
 800583c:	431a      	orrs	r2, r3
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	3309      	adds	r3, #9
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	4313      	orrs	r3, r2
 8005848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800584a:	3208      	adds	r2, #8
 800584c:	7812      	ldrb	r2, [r2, #0]
 800584e:	431a      	orrs	r2, r3
 8005850:	e000      	b.n	8005854 <find_volume+0x12c>
 8005852:	2200      	movs	r2, #0
 8005854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	3358      	adds	r3, #88	@ 0x58
 800585a:	443b      	add	r3, r7
 800585c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005862:	3301      	adds	r3, #1
 8005864:	643b      	str	r3, [r7, #64]	@ 0x40
 8005866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005868:	2b03      	cmp	r3, #3
 800586a:	d9d3      	bls.n	8005814 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800586c:	2300      	movs	r3, #0
 800586e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <find_volume+0x154>
 8005876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005878:	3b01      	subs	r3, #1
 800587a:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800587c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	3358      	adds	r3, #88	@ 0x58
 8005882:	443b      	add	r3, r7
 8005884:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005888:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800588a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <find_volume+0x174>
 8005890:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005892:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005894:	f7ff fede 	bl	8005654 <check_fs>
 8005898:	4603      	mov	r3, r0
 800589a:	e000      	b.n	800589e <find_volume+0x176>
 800589c:	2302      	movs	r3, #2
 800589e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80058a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <find_volume+0x18e>
 80058aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058ac:	3301      	adds	r3, #1
 80058ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80058b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d9e2      	bls.n	800587c <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80058b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d101      	bne.n	80058c2 <find_volume+0x19a>
 80058be:	2301      	movs	r3, #1
 80058c0:	e1ee      	b.n	8005ca0 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80058c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <find_volume+0x1a6>
 80058ca:	230d      	movs	r3, #13
 80058cc:	e1e8      	b.n	8005ca0 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	7b1b      	ldrb	r3, [r3, #12]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	b21a      	sxth	r2, r3
 80058d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d8:	7adb      	ldrb	r3, [r3, #11]
 80058da:	b21b      	sxth	r3, r3
 80058dc:	4313      	orrs	r3, r2
 80058de:	b21b      	sxth	r3, r3
 80058e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058e4:	d001      	beq.n	80058ea <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 80058e6:	230d      	movs	r3, #13
 80058e8:	e1da      	b.n	8005ca0 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80058ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ec:	7ddb      	ldrb	r3, [r3, #23]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	b21a      	sxth	r2, r3
 80058f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f4:	7d9b      	ldrb	r3, [r3, #22]
 80058f6:	b21b      	sxth	r3, r3
 80058f8:	4313      	orrs	r3, r2
 80058fa:	b21b      	sxth	r3, r3
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d112      	bne.n	800592c <find_volume+0x204>
 8005906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005908:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800590c:	061a      	lsls	r2, r3, #24
 800590e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005910:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8005914:	041b      	lsls	r3, r3, #16
 8005916:	431a      	orrs	r2, r3
 8005918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	4313      	orrs	r3, r2
 8005922:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005924:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8005928:	4313      	orrs	r3, r2
 800592a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 800592c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005930:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005936:	7c1a      	ldrb	r2, [r3, #16]
 8005938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593a:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800593e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005940:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8005944:	2b01      	cmp	r3, #1
 8005946:	d006      	beq.n	8005956 <find_volume+0x22e>
 8005948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594a:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800594e:	2b02      	cmp	r3, #2
 8005950:	d001      	beq.n	8005956 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8005952:	230d      	movs	r3, #13
 8005954:	e1a4      	b.n	8005ca0 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005958:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800595c:	461a      	mov	r2, r3
 800595e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005960:	fb02 f303 	mul.w	r3, r2, r3
 8005964:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005968:	7b5a      	ldrb	r2, [r3, #13]
 800596a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596c:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005972:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <find_volume+0x268>
 800597a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597c:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8005980:	461a      	mov	r2, r3
 8005982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005984:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8005988:	3b01      	subs	r3, #1
 800598a:	4013      	ands	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8005990:	230d      	movs	r3, #13
 8005992:	e185      	b.n	8005ca0 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005996:	7c9b      	ldrb	r3, [r3, #18]
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	b21a      	sxth	r2, r3
 800599c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599e:	7c5b      	ldrb	r3, [r3, #17]
 80059a0:	b21b      	sxth	r3, r3
 80059a2:	4313      	orrs	r3, r2
 80059a4:	b21b      	sxth	r3, r3
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059aa:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80059ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d004      	beq.n	80059c8 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 80059be:	230d      	movs	r3, #13
 80059c0:	e16e      	b.n	8005ca0 <find_volume+0x578>
 80059c2:	bf00      	nop
 80059c4:	200002c4 	.word	0x200002c4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80059c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ca:	7d1b      	ldrb	r3, [r3, #20]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	b21a      	sxth	r2, r3
 80059d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d2:	7cdb      	ldrb	r3, [r3, #19]
 80059d4:	b21b      	sxth	r3, r3
 80059d6:	4313      	orrs	r3, r2
 80059d8:	b21b      	sxth	r3, r3
 80059da:	b29b      	uxth	r3, r3
 80059dc:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80059de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d112      	bne.n	8005a0a <find_volume+0x2e2>
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80059ea:	061a      	lsls	r2, r3, #24
 80059ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ee:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80059f2:	041b      	lsls	r3, r3, #16
 80059f4:	431a      	orrs	r2, r3
 80059f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	4313      	orrs	r3, r2
 8005a00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a02:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0c:	7bdb      	ldrb	r3, [r3, #15]
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	b21a      	sxth	r2, r3
 8005a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a14:	7b9b      	ldrb	r3, [r3, #14]
 8005a16:	b21b      	sxth	r3, r3
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	b21b      	sxth	r3, r3
 8005a1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005a1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <find_volume+0x300>
 8005a24:	230d      	movs	r3, #13
 8005a26:	e13b      	b.n	8005ca0 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005a28:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a2c:	4413      	add	r3, r2
 8005a2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a30:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 8005a34:	0912      	lsrs	r2, r2, #4
 8005a36:	b292      	uxth	r2, r2
 8005a38:	4413      	add	r3, r2
 8005a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005a3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d201      	bcs.n	8005a48 <find_volume+0x320>
 8005a44:	230d      	movs	r3, #13
 8005a46:	e12b      	b.n	8005ca0 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005a48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a50:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8005a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <find_volume+0x33c>
 8005a60:	230d      	movs	r3, #13
 8005a62:	e11d      	b.n	8005ca0 <find_volume+0x578>
	fmt = FS_FAT12;
 8005a64:	2301      	movs	r3, #1
 8005a66:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d902      	bls.n	8005a7a <find_volume+0x352>
 8005a74:	2302      	movs	r3, #2
 8005a76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d902      	bls.n	8005a8a <find_volume+0x362>
 8005a84:	2303      	movs	r3, #3
 8005a86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	1c9a      	adds	r2, r3, #2
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8005a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005a98:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005a9c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005a9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aa0:	441a      	add	r2, r3
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa4:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8005aa8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aac:	441a      	add	r2, r3
 8005aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab0:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
	if (fmt == FS_FAT32) {
 8005ab4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d121      	bne.n	8005b00 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abe:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <find_volume+0x3a2>
 8005ac6:	230d      	movs	r3, #13
 8005ac8:	e0ea      	b.n	8005ca0 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005acc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005ad0:	061a      	lsls	r2, r3, #24
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005ad8:	041b      	lsls	r3, r3, #16
 8005ada:	431a      	orrs	r2, r3
 8005adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ade:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ae2:	021b      	lsls	r3, r3, #8
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ae8:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8005aec:	431a      	orrs	r2, r3
 8005aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af0:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005afe:	e025      	b.n	8005b4c <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b02:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <find_volume+0x3e6>
 8005b0a:	230d      	movs	r3, #13
 8005b0c:	e0c8      	b.n	8005ca0 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8005b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b16:	441a      	add	r2, r3
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005b1e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d104      	bne.n	8005b30 <find_volume+0x408>
 8005b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b28:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	e00c      	b.n	8005b4a <find_volume+0x422>
 8005b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b32:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005b36:	4613      	mov	r3, r2
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	4413      	add	r3, r2
 8005b3c:	085a      	lsrs	r2, r3, #1
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b40:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005b4a:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8005b52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b54:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8005b58:	0a5b      	lsrs	r3, r3, #9
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d201      	bcs.n	8005b62 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8005b5e:	230d      	movs	r3, #13
 8005b60:	e09e      	b.n	8005ca0 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b64:	f04f 32ff 	mov.w	r2, #4294967295
 8005b68:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8005b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b74:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7a:	2280      	movs	r2, #128	@ 0x80
 8005b7c:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005b80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d177      	bne.n	8005c78 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	b21a      	sxth	r2, r3
 8005b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b98:	b21b      	sxth	r3, r3
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	b21b      	sxth	r3, r3
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d16a      	bne.n	8005c78 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005ba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005baa:	f7fe fd42 	bl	8004632 <move_window>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d161      	bne.n	8005c78 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbe:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	b21a      	sxth	r2, r3
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc8:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8005bcc:	b21b      	sxth	r3, r3
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	b21b      	sxth	r3, r3
 8005bd2:	4a35      	ldr	r2, [pc, #212]	@ (8005ca8 <find_volume+0x580>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d14f      	bne.n	8005c78 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bda:	78db      	ldrb	r3, [r3, #3]
 8005bdc:	061a      	lsls	r2, r3, #24
 8005bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be0:	789b      	ldrb	r3, [r3, #2]
 8005be2:	041b      	lsls	r3, r3, #16
 8005be4:	431a      	orrs	r2, r3
 8005be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	4313      	orrs	r3, r2
 8005bee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bf0:	7812      	ldrb	r2, [r2, #0]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8005cac <find_volume+0x584>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d13e      	bne.n	8005c78 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bfc:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8005c00:	061a      	lsls	r2, r3, #24
 8005c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c04:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8005c08:	041b      	lsls	r3, r3, #16
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0e:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	4313      	orrs	r3, r2
 8005c16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c18:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	4a24      	ldr	r2, [pc, #144]	@ (8005cb0 <find_volume+0x588>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d129      	bne.n	8005c78 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c26:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8005c2a:	061a      	lsls	r2, r3, #24
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2e:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8005c32:	041b      	lsls	r3, r3, #16
 8005c34:	431a      	orrs	r2, r3
 8005c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c38:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8005c3c:	021b      	lsls	r3, r3, #8
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c42:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8005c46:	431a      	orrs	r2, r3
 8005c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c50:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8005c54:	061a      	lsls	r2, r3, #24
 8005c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c58:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8005c5c:	041b      	lsls	r3, r3, #16
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c62:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c6c:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8005c70:	431a      	orrs	r2, r3
 8005c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c74:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005c7e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8005c82:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb4 <find_volume+0x58c>)
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	3301      	adds	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb4 <find_volume+0x58c>)
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	4b09      	ldr	r3, [pc, #36]	@ (8005cb4 <find_volume+0x58c>)
 8005c90:	881a      	ldrh	r2, [r3, #0]
 8005c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c94:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005c98:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c9a:	f7fe fc57 	bl	800454c <clear_lock>
#endif

	return FR_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3758      	adds	r7, #88	@ 0x58
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	ffffaa55 	.word	0xffffaa55
 8005cac:	41615252 	.word	0x41615252
 8005cb0:	61417272 	.word	0x61417272
 8005cb4:	200002c8 	.word	0x200002c8

08005cb8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d022      	beq.n	8005d10 <validate+0x58>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01d      	beq.n	8005d10 <validate+0x58>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005cda:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d016      	beq.n	8005d10 <validate+0x58>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005ce8:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d10c      	bne.n	8005d10 <validate+0x58>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005cfc:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fe f983 	bl	800400c <disk_status>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8005d10:	2309      	movs	r3, #9
 8005d12:	e000      	b.n	8005d16 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005d32:	f107 0310 	add.w	r3, r7, #16
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff fc48 	bl	80055cc <get_ldnumber>
 8005d3c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	da01      	bge.n	8005d48 <f_mount+0x28>
 8005d44:	230b      	movs	r3, #11
 8005d46:	e02d      	b.n	8005da4 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005d48:	4a18      	ldr	r2, [pc, #96]	@ (8005dac <f_mount+0x8c>)
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d50:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d006      	beq.n	8005d66 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8005d58:	69b8      	ldr	r0, [r7, #24]
 8005d5a:	f7fe fbf7 	bl	800454c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	490d      	ldr	r1, [pc, #52]	@ (8005dac <f_mount+0x8c>)
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <f_mount+0x6a>
 8005d84:	79fb      	ldrb	r3, [r7, #7]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d001      	beq.n	8005d8e <f_mount+0x6e>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e00a      	b.n	8005da4 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005d8e:	f107 0108 	add.w	r1, r7, #8
 8005d92:	f107 030c 	add.w	r3, r7, #12
 8005d96:	2200      	movs	r2, #0
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff fcc5 	bl	8005728 <find_volume>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3720      	adds	r7, #32
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	200002c4 	.word	0x200002c4

08005db0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005dbc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005dc0:	6018      	str	r0, [r3, #0]
 8005dc2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005dc6:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8005dca:	6019      	str	r1, [r3, #0]
 8005dcc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005dd0:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005dd4:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005dd6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005dda:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <f_open+0x38>
 8005de4:	2309      	movs	r3, #9
 8005de6:	e253      	b.n	8006290 <f_open+0x4e0>
	fp->fs = 0;			/* Clear file object */
 8005de8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005dec:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005df8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005dfc:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005e00:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8005e04:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8005e08:	7812      	ldrb	r2, [r2, #0]
 8005e0a:	f002 021f 	and.w	r2, r2, #31
 8005e0e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005e10:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005e14:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	f107 0108 	add.w	r1, r7, #8
 8005e24:	f107 0320 	add.w	r3, r7, #32
 8005e28:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff fc7b 	bl	8005728 <find_volume>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005e38:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 8225 	bne.w	800628c <f_open+0x4dc>
		INIT_BUF(dj);
 8005e42:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005e46:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8005e4a:	f107 0214 	add.w	r2, r7, #20
 8005e4e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8005e52:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005e56:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	f107 0320 	add.w	r3, r7, #32
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff fb44 	bl	80054f0 <follow_path>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
		dir = dj.dir;
 8005e6e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005e72:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8005e76:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005e7a:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005e7e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d11b      	bne.n	8005ebe <f_open+0x10e>
			if (!dir)	/* Default directory itself */
 8005e86:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d103      	bne.n	8005e96 <f_open+0xe6>
				res = FR_INVALID_NAME;
 8005e8e:	2306      	movs	r3, #6
 8005e90:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8005e94:	e013      	b.n	8005ebe <f_open+0x10e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005e96:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005e9a:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	bf8c      	ite	hi
 8005ea4:	2301      	movhi	r3, #1
 8005ea6:	2300      	movls	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f107 0320 	add.w	r3, r7, #32
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe f9c0 	bl	8004238 <chk_lock>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005ebe:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005ec2:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	f003 031c 	and.w	r3, r3, #28
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 80e6 	beq.w	800609e <f_open+0x2ee>
			if (res != FR_OK) {					/* No file, create new */
 8005ed2:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d027      	beq.n	8005f2a <f_open+0x17a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005eda:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d10e      	bne.n	8005f00 <f_open+0x150>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005ee2:	f7fe fa15 	bl	8004310 <enq_lock>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d006      	beq.n	8005efa <f_open+0x14a>
 8005eec:	f107 0320 	add.w	r3, r7, #32
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff fa03 	bl	80052fc <dir_register>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	e000      	b.n	8005efc <f_open+0x14c>
 8005efa:	2312      	movs	r3, #18
 8005efc:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005f00:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005f04:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005f08:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8005f0c:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8005f10:	7812      	ldrb	r2, [r2, #0]
 8005f12:	f042 0208 	orr.w	r2, r2, #8
 8005f16:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8005f18:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005f1c:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8005f20:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005f24:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8005f28:	e017      	b.n	8005f5a <f_open+0x1aa>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005f2a:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005f2e:	330b      	adds	r3, #11
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	f003 0311 	and.w	r3, r3, #17
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <f_open+0x192>
					res = FR_DENIED;
 8005f3a:	2307      	movs	r3, #7
 8005f3c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8005f40:	e00b      	b.n	8005f5a <f_open+0x1aa>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005f42:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005f46:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <f_open+0x1aa>
						res = FR_EXIST;
 8005f54:	2308      	movs	r3, #8
 8005f56:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005f5a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f040 80c1 	bne.w	80060e6 <f_open+0x336>
 8005f64:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005f68:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 80b7 	beq.w	80060e6 <f_open+0x336>
				dw = GET_FATTIME();				/* Created time */
 8005f78:	f7fd fb04 	bl	8003584 <get_fattime>
 8005f7c:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005f80:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005f84:	330e      	adds	r3, #14
 8005f86:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	0a1b      	lsrs	r3, r3, #8
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005f9c:	330f      	adds	r3, #15
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8005fa6:	0c1a      	lsrs	r2, r3, #16
 8005fa8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005fac:	3310      	adds	r3, #16
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8005fb6:	0e1a      	lsrs	r2, r3, #24
 8005fb8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005fbc:	3311      	adds	r3, #17
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005fc2:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005fc6:	330b      	adds	r3, #11
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005fcc:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005fd0:	331c      	adds	r3, #28
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005fda:	331d      	adds	r3, #29
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005fe4:	331e      	adds	r3, #30
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005fee:	331f      	adds	r3, #31
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005ff4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005ff8:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8005ffc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006000:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff f8d7 	bl	80051b8 <ld_clust>
 800600a:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800600e:	2100      	movs	r1, #0
 8006010:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8006014:	f7ff f8fd 	bl	8005212 <st_clust>
				dj.fs->wflag = 1;
 8006018:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800601c:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006020:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800602a:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800602e:	2b00      	cmp	r3, #0
 8006030:	d059      	beq.n	80060e6 <f_open+0x336>
					dw = dj.fs->winsect;
 8006032:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006036:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800603a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800603e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8006042:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
					res = remove_chain(dj.fs, cl);
 8006046:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800604a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800604e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006052:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe fdae 	bl	8004bb8 <remove_chain>
 800605c:	4603      	mov	r3, r0
 800605e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
					if (res == FR_OK) {
 8006062:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8006066:	2b00      	cmp	r3, #0
 8006068:	d13d      	bne.n	80060e6 <f_open+0x336>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800606a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800606e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006072:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006076:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 800607a:	3a01      	subs	r2, #1
 800607c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
						res = move_window(dj.fs, dw);
 8006080:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006084:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006088:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800608c:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe face 	bl	8004632 <move_window>
 8006096:	4603      	mov	r3, r0
 8006098:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 800609c:	e023      	b.n	80060e6 <f_open+0x336>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800609e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d11f      	bne.n	80060e6 <f_open+0x336>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80060a6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80060aa:	330b      	adds	r3, #11
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <f_open+0x30e>
					res = FR_NO_FILE;
 80060b6:	2304      	movs	r3, #4
 80060b8:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80060bc:	e013      	b.n	80060e6 <f_open+0x336>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80060be:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80060c2:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <f_open+0x336>
 80060d0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80060d4:	330b      	adds	r3, #11
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <f_open+0x336>
						res = FR_DENIED;
 80060e0:	2307      	movs	r3, #7
 80060e2:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80060e6:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d151      	bne.n	8006192 <f_open+0x3e2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80060ee:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80060f2:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	f003 0308 	and.w	r3, r3, #8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00b      	beq.n	8006118 <f_open+0x368>
				mode |= FA__WRITTEN;
 8006100:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006104:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8006108:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800610c:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8006110:	7812      	ldrb	r2, [r2, #0]
 8006112:	f042 0220 	orr.w	r2, r2, #32
 8006116:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006118:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800611c:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006120:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006124:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 8006128:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800612c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 8006136:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800613a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8006144:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006148:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800614c:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b01      	cmp	r3, #1
 8006154:	bf8c      	ite	hi
 8006156:	2301      	movhi	r3, #1
 8006158:	2300      	movls	r3, #0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	f107 0320 	add.w	r3, r7, #32
 8006162:	4611      	mov	r1, r2
 8006164:	4618      	mov	r0, r3
 8006166:	f7fe f8f7 	bl	8004358 <inc_lock>
 800616a:	4602      	mov	r2, r0
 800616c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006170:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800617a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800617e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8006188:	2b00      	cmp	r3, #0
 800618a:	d102      	bne.n	8006192 <f_open+0x3e2>
 800618c:	2302      	movs	r3, #2
 800618e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006192:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8006196:	2b00      	cmp	r3, #0
 8006198:	d178      	bne.n	800628c <f_open+0x4dc>
			fp->flag = mode;					/* File access mode */
 800619a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800619e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80061a8:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 80061ac:	7812      	ldrb	r2, [r2, #0]
 80061ae:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 80061b2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80061b6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80061c2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80061c6:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80061ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80061ce:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fff0 	bl	80051b8 <ld_clust>
 80061d8:	4602      	mov	r2, r0
 80061da:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80061de:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80061e8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80061ec:	331f      	adds	r3, #31
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	061a      	lsls	r2, r3, #24
 80061f2:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80061f6:	331e      	adds	r3, #30
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	041b      	lsls	r3, r3, #16
 80061fc:	431a      	orrs	r2, r3
 80061fe:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006202:	331d      	adds	r3, #29
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	4313      	orrs	r3, r2
 800620a:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 800620e:	321c      	adds	r2, #28
 8006210:	7812      	ldrb	r2, [r2, #0]
 8006212:	431a      	orrs	r2, r3
 8006214:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006218:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 8006222:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006226:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2200      	movs	r2, #0
 800622e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 8006232:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006236:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2200      	movs	r2, #0
 800623e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006242:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006246:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2200      	movs	r2, #0
 800624e:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006252:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006256:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800625a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800625e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006262:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 800626c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006270:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800627a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800627e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006282:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800628c:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
}
 8006290:	4618      	mov	r0, r3
 8006292:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b08c      	sub	sp, #48	@ 0x30
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f7ff fd00 	bl	8005cb8 <validate>
 80062b8:	4603      	mov	r3, r0
 80062ba:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80062bc:	7ffb      	ldrb	r3, [r7, #31]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <f_read+0x2c>
 80062c2:	7ffb      	ldrb	r3, [r7, #31]
 80062c4:	e150      	b.n	8006568 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80062d6:	e147      	b.n	8006568 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80062e6:	2307      	movs	r3, #7
 80062e8:	e13e      	b.n	8006568 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	429a      	cmp	r2, r3
 8006300:	f240 812d 	bls.w	800655e <f_read+0x2c4>
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006308:	e129      	b.n	800655e <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006314:	2b00      	cmp	r3, #0
 8006316:	f040 80f2 	bne.w	80064fe <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006320:	0a5b      	lsrs	r3, r3, #9
 8006322:	b2da      	uxtb	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800632a:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800632e:	3b01      	subs	r3, #1
 8006330:	b2db      	uxtb	r3, r3
 8006332:	4013      	ands	r3, r2
 8006334:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006336:	7dfb      	ldrb	r3, [r7, #23]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d139      	bne.n	80063b0 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800634c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800634e:	e018      	b.n	8006382 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006360:	4619      	mov	r1, r3
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f7fe fd1f 	bl	8004da6 <clmt_clust>
 8006368:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800636a:	e00a      	b.n	8006382 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f7fe fa55 	bl	800482a <get_fat>
 8006380:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006384:	2b01      	cmp	r3, #1
 8006386:	d805      	bhi.n	8006394 <f_read+0xfa>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2202      	movs	r2, #2
 800638c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8006390:	2302      	movs	r3, #2
 8006392:	e0e9      	b.n	8006568 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639a:	d105      	bne.n	80063a8 <f_read+0x10e>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80063a4:	2301      	movs	r3, #1
 80063a6:	e0df      	b.n	8006568 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80063bc:	4619      	mov	r1, r3
 80063be:	4610      	mov	r0, r2
 80063c0:	f7fe fa12 	bl	80047e8 <clust2sect>
 80063c4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d105      	bne.n	80063d8 <f_read+0x13e>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80063d4:	2302      	movs	r3, #2
 80063d6:	e0c7      	b.n	8006568 <f_read+0x2ce>
			sect += csect;
 80063d8:	7dfb      	ldrb	r3, [r7, #23]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4413      	add	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	0a5b      	lsrs	r3, r3, #9
 80063e4:	627b      	str	r3, [r7, #36]	@ 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80063e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d046      	beq.n	800647a <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80063ec:	7dfa      	ldrb	r2, [r7, #23]
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	4413      	add	r3, r2
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80063f8:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d908      	bls.n	8006412 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006406:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800640a:	461a      	mov	r2, r3
 800640c:	7dfb      	ldrb	r3, [r7, #23]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	627b      	str	r3, [r7, #36]	@ 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006418:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800641c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	6a39      	ldr	r1, [r7, #32]
 8006422:	f7fd fe33 	bl	800408c <disk_read>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d005      	beq.n	8006438 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8006434:	2301      	movs	r3, #1
 8006436:	e097      	b.n	8006568 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800643e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d015      	beq.n	8006472 <f_read+0x1d8>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006452:	429a      	cmp	r2, r3
 8006454:	d90d      	bls.n	8006472 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	025b      	lsls	r3, r3, #9
 8006462:	6a3a      	ldr	r2, [r7, #32]
 8006464:	4413      	add	r3, r2
 8006466:	68f9      	ldr	r1, [r7, #12]
 8006468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800646c:	4618      	mov	r0, r3
 800646e:	f7fd fe6b 	bl	8004148 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	025b      	lsls	r3, r3, #9
 8006476:	62bb      	str	r3, [r7, #40]	@ 0x28
				continue;
 8006478:	e05b      	b.n	8006532 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	429a      	cmp	r2, r3
 8006484:	d037      	beq.n	80064f6 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800648c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01d      	beq.n	80064d0 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800649a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800649e:	68f9      	ldr	r1, [r7, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80064a6:	2301      	movs	r3, #1
 80064a8:	f7fd fe10 	bl	80040cc <disk_write>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80064ba:	2301      	movs	r3, #1
 80064bc:	e054      	b.n	8006568 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80064c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80064d6:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80064da:	68f9      	ldr	r1, [r7, #12]
 80064dc:	2301      	movs	r3, #1
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	f7fd fdd4 	bl	800408c <disk_read>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80064f2:	2301      	movs	r3, #1
 80064f4:	e038      	b.n	8006568 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006508:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800650c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (rcnt > btr) rcnt = btr;
 800650e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	429a      	cmp	r2, r3
 8006514:	d901      	bls.n	800651a <f_read+0x280>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	62bb      	str	r3, [r7, #40]	@ 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800652a:	4619      	mov	r1, r3
 800652c:	6a38      	ldr	r0, [r7, #32]
 800652e:	f7fd fe0b 	bl	8004148 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006532:	6a3a      	ldr	r2, [r7, #32]
 8006534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006536:	4413      	add	r3, r2
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006542:	441a      	add	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006550:	441a      	add	r2, r3
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	f47f aed2 	bne.w	800630a <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3730      	adds	r7, #48	@ 0x30
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08a      	sub	sp, #40	@ 0x28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f7ff fb95 	bl	8005cb8 <validate>
 800658e:	4603      	mov	r3, r0
 8006590:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006592:	7dfb      	ldrb	r3, [r7, #23]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <f_write+0x2c>
 8006598:	7dfb      	ldrb	r3, [r7, #23]
 800659a:	e192      	b.n	80068c2 <f_write+0x352>
	if (fp->err)							/* Check error */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80065ac:	e189      	b.n	80068c2 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80065bc:	2307      	movs	r3, #7
 80065be:	e180      	b.n	80068c2 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	441a      	add	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80065d0:	429a      	cmp	r2, r3
 80065d2:	f080 8158 	bcs.w	8006886 <f_write+0x316>
 80065d6:	2300      	movs	r3, #0
 80065d8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80065da:	e154      	b.n	8006886 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80065e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f040 8114 	bne.w	8006814 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80065f2:	0a5b      	lsrs	r3, r3, #9
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80065fc:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8006600:	3b01      	subs	r3, #1
 8006602:	b2db      	uxtb	r3, r3
 8006604:	4013      	ands	r3, r2
 8006606:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006608:	7dbb      	ldrb	r3, [r7, #22]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d151      	bne.n	80066b2 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10f      	bne.n	8006638 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800661e:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006622:	2b00      	cmp	r3, #0
 8006624:	d121      	bne.n	800666a <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800662c:	2100      	movs	r1, #0
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe fb1c 	bl	8004c6c <create_chain>
 8006634:	6278      	str	r0, [r7, #36]	@ 0x24
 8006636:	e018      	b.n	800666a <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800663e:	2b00      	cmp	r3, #0
 8006640:	d008      	beq.n	8006654 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006648:	4619      	mov	r1, r3
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7fe fbab 	bl	8004da6 <clmt_clust>
 8006650:	6278      	str	r0, [r7, #36]	@ 0x24
 8006652:	e00a      	b.n	800666a <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006660:	4619      	mov	r1, r3
 8006662:	4610      	mov	r0, r2
 8006664:	f7fe fb02 	bl	8004c6c <create_chain>
 8006668:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 810f 	beq.w	8006890 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	2b01      	cmp	r3, #1
 8006676:	d105      	bne.n	8006684 <f_write+0x114>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8006680:	2302      	movs	r3, #2
 8006682:	e11e      	b.n	80068c2 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d105      	bne.n	8006698 <f_write+0x128>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8006694:	2301      	movs	r3, #1
 8006696:	e114      	b.n	80068c2 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800669c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d103      	bne.n	80066b2 <f_write+0x142>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80066b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01d      	beq.n	80066fc <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80066c6:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80066ca:	68f9      	ldr	r1, [r7, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80066d2:	2301      	movs	r3, #1
 80066d4:	f7fd fcfa 	bl	80040cc <disk_write>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80066e6:	2301      	movs	r3, #1
 80066e8:	e0eb      	b.n	80068c2 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80066f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f7fe f86c 	bl	80047e8 <clust2sect>
 8006710:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d105      	bne.n	8006724 <f_write+0x1b4>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8006720:	2302      	movs	r3, #2
 8006722:	e0ce      	b.n	80068c2 <f_write+0x352>
			sect += csect;
 8006724:	7dbb      	ldrb	r3, [r7, #22]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4413      	add	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	0a5b      	lsrs	r3, r3, #9
 8006730:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d048      	beq.n	80067ca <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006738:	7dba      	ldrb	r2, [r7, #22]
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	4413      	add	r3, r2
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8006744:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8006748:	4293      	cmp	r3, r2
 800674a:	d908      	bls.n	800675e <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006752:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8006756:	461a      	mov	r2, r3
 8006758:	7dbb      	ldrb	r3, [r7, #22]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006764:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	69b9      	ldr	r1, [r7, #24]
 800676e:	f7fd fcad 	bl	80040cc <disk_write>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8006780:	2301      	movs	r3, #1
 8006782:	e09e      	b.n	80068c2 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	429a      	cmp	r2, r3
 8006792:	d916      	bls.n	80067c2 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	025b      	lsls	r3, r3, #9
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	4413      	add	r3, r2
 80067a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067aa:	4619      	mov	r1, r3
 80067ac:	f7fd fccc 	bl	8004148 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80067b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	025b      	lsls	r3, r3, #9
 80067c6:	623b      	str	r3, [r7, #32]
				continue;
 80067c8:	e047      	b.n	800685a <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d01a      	beq.n	800680c <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d212      	bcs.n	800680c <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80067ec:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80067f0:	68f9      	ldr	r1, [r7, #12]
 80067f2:	2301      	movs	r3, #1
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	f7fd fc49 	bl	800408c <disk_read>
 80067fa:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8006808:	2301      	movs	r3, #1
 800680a:	e05a      	b.n	80068c2 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800681a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006822:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8006824:	6a3a      	ldr	r2, [r7, #32]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	429a      	cmp	r2, r3
 800682a:	d901      	bls.n	8006830 <f_write+0x2c0>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	6a3a      	ldr	r2, [r7, #32]
 8006840:	69b9      	ldr	r1, [r7, #24]
 8006842:	4618      	mov	r0, r3
 8006844:	f7fd fc80 	bl	8004148 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800684e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006852:	b2da      	uxtb	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	4413      	add	r3, r2
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	441a      	add	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	441a      	add	r2, r3
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	f47f aea7 	bne.w	80065dc <f_write+0x6c>
 800688e:	e000      	b.n	8006892 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006890:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800689e:	429a      	cmp	r2, r3
 80068a0:	d905      	bls.n	80068ae <f_write+0x33e>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80068b4:	f043 0320 	orr.w	r3, r3, #32
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3728      	adds	r7, #40	@ 0x28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b086      	sub	sp, #24
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7ff f9f0 	bl	8005cb8 <validate>
 80068d8:	4603      	mov	r3, r0
 80068da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f040 80a8 	bne.w	8006a34 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80068ea:	f003 0320 	and.w	r3, r3, #32
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 80a0 	beq.w	8006a34 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80068fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d019      	beq.n	8006936 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006908:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8006914:	2301      	movs	r3, #1
 8006916:	f7fd fbd9 	bl	80040cc <disk_write>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006920:	2301      	movs	r3, #1
 8006922:	e088      	b.n	8006a36 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800692a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800692e:	b2da      	uxtb	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8006942:	4619      	mov	r1, r3
 8006944:	4610      	mov	r0, r2
 8006946:	f7fd fe74 	bl	8004632 <move_window>
 800694a:	4603      	mov	r3, r0
 800694c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800694e:	7dfb      	ldrb	r3, [r7, #23]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d16f      	bne.n	8006a34 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800695a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	330b      	adds	r3, #11
 8006960:	781a      	ldrb	r2, [r3, #0]
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	330b      	adds	r3, #11
 8006966:	f042 0220 	orr.w	r2, r2, #32
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	331c      	adds	r3, #28
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8006982:	b29b      	uxth	r3, r3
 8006984:	0a1b      	lsrs	r3, r3, #8
 8006986:	b29a      	uxth	r2, r3
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	331d      	adds	r3, #29
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8006996:	0c1a      	lsrs	r2, r3, #16
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	331e      	adds	r3, #30
 800699c:	b2d2      	uxtb	r2, r2
 800699e:	701a      	strb	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80069a6:	0e1a      	lsrs	r2, r3, #24
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	331f      	adds	r3, #31
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80069b6:	4619      	mov	r1, r3
 80069b8:	6938      	ldr	r0, [r7, #16]
 80069ba:	f7fe fc2a 	bl	8005212 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80069be:	f7fc fde1 	bl	8003584 <get_fattime>
 80069c2:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	3316      	adds	r3, #22
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	0a1b      	lsrs	r3, r3, #8
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	3317      	adds	r3, #23
 80069da:	b2d2      	uxtb	r2, r2
 80069dc:	701a      	strb	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	0c1a      	lsrs	r2, r3, #16
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	3318      	adds	r3, #24
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	0e1a      	lsrs	r2, r3, #24
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	3319      	adds	r3, #25
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	3312      	adds	r3, #18
 80069fa:	2200      	movs	r2, #0
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	3313      	adds	r3, #19
 8006a02:	2200      	movs	r2, #0
 8006a04:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8006a0c:	f023 0320 	bic.w	r3, r3, #32
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fd fe2f 	bl	800468e <sync_fs>
 8006a30:	4603      	mov	r3, r0
 8006a32:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff ff3f 	bl	80068ca <f_sync>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d116      	bne.n	8006a84 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff f92e 	bl	8005cb8 <validate>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10e      	bne.n	8006a84 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fd fd29 	bl	80044c4 <dec_lock>
 8006a72:	4603      	mov	r3, r0
 8006a74:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d103      	bne.n	8006a84 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b08e      	sub	sp, #56	@ 0x38
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006a9a:	f107 030c 	add.w	r3, r7, #12
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fe fe40 	bl	8005728 <find_volume>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	fs = *fatfs;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8006ab4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f040 80af 	bne.w	8006c1c <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006aca:	3b02      	subs	r3, #2
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d805      	bhi.n	8006adc <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	e09f      	b.n	8006c1c <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006ae2:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fat == FS_FAT12) {
 8006ae8:	7efb      	ldrb	r3, [r7, #27]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d125      	bne.n	8006b3a <f_getfree+0xac>
				clst = 2;
 8006aee:	2302      	movs	r3, #2
 8006af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
				do {
					stat = get_fat(fs, clst);
 8006af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006af4:	69f8      	ldr	r0, [r7, #28]
 8006af6:	f7fd fe98 	bl	800482a <get_fat>
 8006afa:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b02:	d103      	bne.n	8006b0c <f_getfree+0x7e>
 8006b04:	2301      	movs	r3, #1
 8006b06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006b0a:	e077      	b.n	8006bfc <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d103      	bne.n	8006b1a <f_getfree+0x8c>
 8006b12:	2302      	movs	r3, #2
 8006b14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006b18:	e070      	b.n	8006bfc <f_getfree+0x16e>
					if (stat == 0) n++;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d102      	bne.n	8006b26 <f_getfree+0x98>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	3301      	adds	r3, #1
 8006b24:	633b      	str	r3, [r7, #48]	@ 0x30
				} while (++clst < fs->n_fatent);
 8006b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b28:	3301      	adds	r3, #1
 8006b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006b32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d3dc      	bcc.n	8006af2 <f_getfree+0x64>
 8006b38:	e060      	b.n	8006bfc <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
				sect = fs->fatbase;
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8006b48:	62bb      	str	r3, [r7, #40]	@ 0x28
				i = 0; p = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b4e:	2300      	movs	r3, #0
 8006b50:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d112      	bne.n	8006b7e <f_getfree+0xf0>
						res = move_window(fs, sect++);
 8006b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006b5e:	4619      	mov	r1, r3
 8006b60:	69f8      	ldr	r0, [r7, #28]
 8006b62:	f7fd fd66 	bl	8004632 <move_window>
 8006b66:	4603      	mov	r3, r0
 8006b68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (res != FR_OK) break;
 8006b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d142      	bne.n	8006bfa <f_getfree+0x16c>
						p = fs->win.d8;
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8006b78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b7c:	627b      	str	r3, [r7, #36]	@ 0x24
					}
					if (fat == FS_FAT16) {
 8006b7e:	7efb      	ldrb	r3, [r7, #27]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d115      	bne.n	8006bb0 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	3301      	adds	r3, #1
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	021b      	lsls	r3, r3, #8
 8006b8c:	b21a      	sxth	r2, r3
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	b21b      	sxth	r3, r3
 8006b94:	4313      	orrs	r3, r2
 8006b96:	b21b      	sxth	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d102      	bne.n	8006ba2 <f_getfree+0x114>
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 2; i -= 2;
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	3302      	adds	r3, #2
 8006ba6:	623b      	str	r3, [r7, #32]
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006baa:	3b02      	subs	r3, #2
 8006bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bae:	e01d      	b.n	8006bec <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	3303      	adds	r3, #3
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	061a      	lsls	r2, r3, #24
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	3302      	adds	r3, #2
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	041b      	lsls	r3, r3, #16
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	021b      	lsls	r3, r3, #8
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	6a3a      	ldr	r2, [r7, #32]
 8006bce:	7812      	ldrb	r2, [r2, #0]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d102      	bne.n	8006be0 <f_getfree+0x152>
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	3301      	adds	r3, #1
 8006bde:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 4; i -= 4;
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	3304      	adds	r3, #4
 8006be4:	623b      	str	r3, [r7, #32]
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	3b04      	subs	r3, #4
 8006bea:	627b      	str	r3, [r7, #36]	@ 0x24
					}
				} while (--clst);
 8006bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1ac      	bne.n	8006b52 <f_getfree+0xc4>
 8006bf8:	e000      	b.n	8006bfc <f_getfree+0x16e>
						if (res != FR_OK) break;
 8006bfa:	bf00      	nop
			}
			fs->free_clust = n;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c00:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fs->fsi_flag |= 1;
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8006c0a:	f043 0301 	orr.w	r3, r3, #1
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
			*nclst = n;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c1a:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8006c1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3738      	adds	r7, #56	@ 0x38
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006c3c:	e01c      	b.n	8006c78 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006c3e:	f107 0310 	add.w	r3, r7, #16
 8006c42:	f107 0114 	add.w	r1, r7, #20
 8006c46:	2201      	movs	r2, #1
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff fb26 	bl	800629a <f_read>
		if (rc != 1) break;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d117      	bne.n	8006c84 <f_gets+0x5c>
		c = s[0];
 8006c54:	7d3b      	ldrb	r3, [r7, #20]
 8006c56:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	2b0d      	cmp	r3, #13
 8006c5c:	d00b      	beq.n	8006c76 <f_gets+0x4e>
		*p++ = c;
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	61ba      	str	r2, [r7, #24]
 8006c64:	7dfa      	ldrb	r2, [r7, #23]
 8006c66:	701a      	strb	r2, [r3, #0]
		n++;
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
 8006c70:	2b0a      	cmp	r3, #10
 8006c72:	d009      	beq.n	8006c88 <f_gets+0x60>
 8006c74:	e000      	b.n	8006c78 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006c76:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	69fa      	ldr	r2, [r7, #28]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	dbdd      	blt.n	8006c3e <f_gets+0x16>
 8006c82:	e002      	b.n	8006c8a <f_gets+0x62>
		if (rc != 1) break;
 8006c84:	bf00      	nop
 8006c86:	e000      	b.n	8006c8a <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8006c88:	bf00      	nop
	}
	*p = 0;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <f_gets+0x72>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	e000      	b.n	8006c9c <f_gets+0x74>
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3720      	adds	r7, #32
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006cba:	4b1e      	ldr	r3, [pc, #120]	@ (8006d34 <FATFS_LinkDriverEx+0x90>)
 8006cbc:	7a5b      	ldrb	r3, [r3, #9]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d831      	bhi.n	8006d28 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d34 <FATFS_LinkDriverEx+0x90>)
 8006cc6:	7a5b      	ldrb	r3, [r3, #9]
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	461a      	mov	r2, r3
 8006ccc:	4b19      	ldr	r3, [pc, #100]	@ (8006d34 <FATFS_LinkDriverEx+0x90>)
 8006cce:	2100      	movs	r1, #0
 8006cd0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006cd2:	4b18      	ldr	r3, [pc, #96]	@ (8006d34 <FATFS_LinkDriverEx+0x90>)
 8006cd4:	7a5b      	ldrb	r3, [r3, #9]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	4a16      	ldr	r2, [pc, #88]	@ (8006d34 <FATFS_LinkDriverEx+0x90>)
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006ce2:	4b14      	ldr	r3, [pc, #80]	@ (8006d34 <FATFS_LinkDriverEx+0x90>)
 8006ce4:	7a5b      	ldrb	r3, [r3, #9]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4b12      	ldr	r3, [pc, #72]	@ (8006d34 <FATFS_LinkDriverEx+0x90>)
 8006cec:	4413      	add	r3, r2
 8006cee:	79fa      	ldrb	r2, [r7, #7]
 8006cf0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006cf2:	4b10      	ldr	r3, [pc, #64]	@ (8006d34 <FATFS_LinkDriverEx+0x90>)
 8006cf4:	7a5b      	ldrb	r3, [r3, #9]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	b2d1      	uxtb	r1, r2
 8006cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8006d34 <FATFS_LinkDriverEx+0x90>)
 8006cfe:	7251      	strb	r1, [r2, #9]
 8006d00:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006d02:	7dbb      	ldrb	r3, [r7, #22]
 8006d04:	3330      	adds	r3, #48	@ 0x30
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	223a      	movs	r2, #58	@ 0x3a
 8006d12:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	3302      	adds	r3, #2
 8006d18:	222f      	movs	r2, #47	@ 0x2f
 8006d1a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	3303      	adds	r3, #3
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr
 8006d34:	200002e4 	.word	0x200002e4

08006d38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006d42:	2200      	movs	r2, #0
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff ffac 	bl	8006ca4 <FATFS_LinkDriverEx>
 8006d4c:	4603      	mov	r3, r0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <_vsniprintf_r>:
 8006d56:	b530      	push	{r4, r5, lr}
 8006d58:	4614      	mov	r4, r2
 8006d5a:	2c00      	cmp	r4, #0
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	461a      	mov	r2, r3
 8006d60:	b09b      	sub	sp, #108	@ 0x6c
 8006d62:	da05      	bge.n	8006d70 <_vsniprintf_r+0x1a>
 8006d64:	238b      	movs	r3, #139	@ 0x8b
 8006d66:	6003      	str	r3, [r0, #0]
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	b01b      	add	sp, #108	@ 0x6c
 8006d6e:	bd30      	pop	{r4, r5, pc}
 8006d70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006d74:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006d78:	bf0c      	ite	eq
 8006d7a:	4623      	moveq	r3, r4
 8006d7c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d80:	9302      	str	r3, [sp, #8]
 8006d82:	9305      	str	r3, [sp, #20]
 8006d84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d88:	9100      	str	r1, [sp, #0]
 8006d8a:	9104      	str	r1, [sp, #16]
 8006d8c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006d90:	4669      	mov	r1, sp
 8006d92:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006d94:	f000 f99e 	bl	80070d4 <_svfiprintf_r>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	bfbc      	itt	lt
 8006d9c:	238b      	movlt	r3, #139	@ 0x8b
 8006d9e:	602b      	strlt	r3, [r5, #0]
 8006da0:	2c00      	cmp	r4, #0
 8006da2:	d0e3      	beq.n	8006d6c <_vsniprintf_r+0x16>
 8006da4:	2200      	movs	r2, #0
 8006da6:	9b00      	ldr	r3, [sp, #0]
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	e7df      	b.n	8006d6c <_vsniprintf_r+0x16>

08006dac <vsniprintf>:
 8006dac:	b507      	push	{r0, r1, r2, lr}
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	4613      	mov	r3, r2
 8006db2:	460a      	mov	r2, r1
 8006db4:	4601      	mov	r1, r0
 8006db6:	4803      	ldr	r0, [pc, #12]	@ (8006dc4 <vsniprintf+0x18>)
 8006db8:	6800      	ldr	r0, [r0, #0]
 8006dba:	f7ff ffcc 	bl	8006d56 <_vsniprintf_r>
 8006dbe:	b003      	add	sp, #12
 8006dc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8006dc4:	20000024 	.word	0x20000024

08006dc8 <memset>:
 8006dc8:	4603      	mov	r3, r0
 8006dca:	4402      	add	r2, r0
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d100      	bne.n	8006dd2 <memset+0xa>
 8006dd0:	4770      	bx	lr
 8006dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8006dd6:	e7f9      	b.n	8006dcc <memset+0x4>

08006dd8 <__errno>:
 8006dd8:	4b01      	ldr	r3, [pc, #4]	@ (8006de0 <__errno+0x8>)
 8006dda:	6818      	ldr	r0, [r3, #0]
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	20000024 	.word	0x20000024

08006de4 <__libc_init_array>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	2600      	movs	r6, #0
 8006de8:	4d0c      	ldr	r5, [pc, #48]	@ (8006e1c <__libc_init_array+0x38>)
 8006dea:	4c0d      	ldr	r4, [pc, #52]	@ (8006e20 <__libc_init_array+0x3c>)
 8006dec:	1b64      	subs	r4, r4, r5
 8006dee:	10a4      	asrs	r4, r4, #2
 8006df0:	42a6      	cmp	r6, r4
 8006df2:	d109      	bne.n	8006e08 <__libc_init_array+0x24>
 8006df4:	f000 fc78 	bl	80076e8 <_init>
 8006df8:	2600      	movs	r6, #0
 8006dfa:	4d0a      	ldr	r5, [pc, #40]	@ (8006e24 <__libc_init_array+0x40>)
 8006dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8006e28 <__libc_init_array+0x44>)
 8006dfe:	1b64      	subs	r4, r4, r5
 8006e00:	10a4      	asrs	r4, r4, #2
 8006e02:	42a6      	cmp	r6, r4
 8006e04:	d105      	bne.n	8006e12 <__libc_init_array+0x2e>
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
 8006e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e0c:	4798      	blx	r3
 8006e0e:	3601      	adds	r6, #1
 8006e10:	e7ee      	b.n	8006df0 <__libc_init_array+0xc>
 8006e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e16:	4798      	blx	r3
 8006e18:	3601      	adds	r6, #1
 8006e1a:	e7f2      	b.n	8006e02 <__libc_init_array+0x1e>
 8006e1c:	080079dc 	.word	0x080079dc
 8006e20:	080079dc 	.word	0x080079dc
 8006e24:	080079dc 	.word	0x080079dc
 8006e28:	080079e0 	.word	0x080079e0

08006e2c <__retarget_lock_acquire_recursive>:
 8006e2c:	4770      	bx	lr

08006e2e <__retarget_lock_release_recursive>:
 8006e2e:	4770      	bx	lr

08006e30 <_free_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4605      	mov	r5, r0
 8006e34:	2900      	cmp	r1, #0
 8006e36:	d040      	beq.n	8006eba <_free_r+0x8a>
 8006e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e3c:	1f0c      	subs	r4, r1, #4
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	bfb8      	it	lt
 8006e42:	18e4      	addlt	r4, r4, r3
 8006e44:	f000 f8de 	bl	8007004 <__malloc_lock>
 8006e48:	4a1c      	ldr	r2, [pc, #112]	@ (8006ebc <_free_r+0x8c>)
 8006e4a:	6813      	ldr	r3, [r2, #0]
 8006e4c:	b933      	cbnz	r3, 8006e5c <_free_r+0x2c>
 8006e4e:	6063      	str	r3, [r4, #4]
 8006e50:	6014      	str	r4, [r2, #0]
 8006e52:	4628      	mov	r0, r5
 8006e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e58:	f000 b8da 	b.w	8007010 <__malloc_unlock>
 8006e5c:	42a3      	cmp	r3, r4
 8006e5e:	d908      	bls.n	8006e72 <_free_r+0x42>
 8006e60:	6820      	ldr	r0, [r4, #0]
 8006e62:	1821      	adds	r1, r4, r0
 8006e64:	428b      	cmp	r3, r1
 8006e66:	bf01      	itttt	eq
 8006e68:	6819      	ldreq	r1, [r3, #0]
 8006e6a:	685b      	ldreq	r3, [r3, #4]
 8006e6c:	1809      	addeq	r1, r1, r0
 8006e6e:	6021      	streq	r1, [r4, #0]
 8006e70:	e7ed      	b.n	8006e4e <_free_r+0x1e>
 8006e72:	461a      	mov	r2, r3
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	b10b      	cbz	r3, 8006e7c <_free_r+0x4c>
 8006e78:	42a3      	cmp	r3, r4
 8006e7a:	d9fa      	bls.n	8006e72 <_free_r+0x42>
 8006e7c:	6811      	ldr	r1, [r2, #0]
 8006e7e:	1850      	adds	r0, r2, r1
 8006e80:	42a0      	cmp	r0, r4
 8006e82:	d10b      	bne.n	8006e9c <_free_r+0x6c>
 8006e84:	6820      	ldr	r0, [r4, #0]
 8006e86:	4401      	add	r1, r0
 8006e88:	1850      	adds	r0, r2, r1
 8006e8a:	4283      	cmp	r3, r0
 8006e8c:	6011      	str	r1, [r2, #0]
 8006e8e:	d1e0      	bne.n	8006e52 <_free_r+0x22>
 8006e90:	6818      	ldr	r0, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	4408      	add	r0, r1
 8006e96:	6010      	str	r0, [r2, #0]
 8006e98:	6053      	str	r3, [r2, #4]
 8006e9a:	e7da      	b.n	8006e52 <_free_r+0x22>
 8006e9c:	d902      	bls.n	8006ea4 <_free_r+0x74>
 8006e9e:	230c      	movs	r3, #12
 8006ea0:	602b      	str	r3, [r5, #0]
 8006ea2:	e7d6      	b.n	8006e52 <_free_r+0x22>
 8006ea4:	6820      	ldr	r0, [r4, #0]
 8006ea6:	1821      	adds	r1, r4, r0
 8006ea8:	428b      	cmp	r3, r1
 8006eaa:	bf01      	itttt	eq
 8006eac:	6819      	ldreq	r1, [r3, #0]
 8006eae:	685b      	ldreq	r3, [r3, #4]
 8006eb0:	1809      	addeq	r1, r1, r0
 8006eb2:	6021      	streq	r1, [r4, #0]
 8006eb4:	6063      	str	r3, [r4, #4]
 8006eb6:	6054      	str	r4, [r2, #4]
 8006eb8:	e7cb      	b.n	8006e52 <_free_r+0x22>
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	20000434 	.word	0x20000434

08006ec0 <sbrk_aligned>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	4e0f      	ldr	r6, [pc, #60]	@ (8006f00 <sbrk_aligned+0x40>)
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	6831      	ldr	r1, [r6, #0]
 8006ec8:	4605      	mov	r5, r0
 8006eca:	b911      	cbnz	r1, 8006ed2 <sbrk_aligned+0x12>
 8006ecc:	f000 fbaa 	bl	8007624 <_sbrk_r>
 8006ed0:	6030      	str	r0, [r6, #0]
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	f000 fba5 	bl	8007624 <_sbrk_r>
 8006eda:	1c43      	adds	r3, r0, #1
 8006edc:	d103      	bne.n	8006ee6 <sbrk_aligned+0x26>
 8006ede:	f04f 34ff 	mov.w	r4, #4294967295
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	bd70      	pop	{r4, r5, r6, pc}
 8006ee6:	1cc4      	adds	r4, r0, #3
 8006ee8:	f024 0403 	bic.w	r4, r4, #3
 8006eec:	42a0      	cmp	r0, r4
 8006eee:	d0f8      	beq.n	8006ee2 <sbrk_aligned+0x22>
 8006ef0:	1a21      	subs	r1, r4, r0
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f000 fb96 	bl	8007624 <_sbrk_r>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d1f2      	bne.n	8006ee2 <sbrk_aligned+0x22>
 8006efc:	e7ef      	b.n	8006ede <sbrk_aligned+0x1e>
 8006efe:	bf00      	nop
 8006f00:	20000430 	.word	0x20000430

08006f04 <_malloc_r>:
 8006f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f08:	1ccd      	adds	r5, r1, #3
 8006f0a:	f025 0503 	bic.w	r5, r5, #3
 8006f0e:	3508      	adds	r5, #8
 8006f10:	2d0c      	cmp	r5, #12
 8006f12:	bf38      	it	cc
 8006f14:	250c      	movcc	r5, #12
 8006f16:	2d00      	cmp	r5, #0
 8006f18:	4606      	mov	r6, r0
 8006f1a:	db01      	blt.n	8006f20 <_malloc_r+0x1c>
 8006f1c:	42a9      	cmp	r1, r5
 8006f1e:	d904      	bls.n	8006f2a <_malloc_r+0x26>
 8006f20:	230c      	movs	r3, #12
 8006f22:	6033      	str	r3, [r6, #0]
 8006f24:	2000      	movs	r0, #0
 8006f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007000 <_malloc_r+0xfc>
 8006f2e:	f000 f869 	bl	8007004 <__malloc_lock>
 8006f32:	f8d8 3000 	ldr.w	r3, [r8]
 8006f36:	461c      	mov	r4, r3
 8006f38:	bb44      	cbnz	r4, 8006f8c <_malloc_r+0x88>
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f7ff ffbf 	bl	8006ec0 <sbrk_aligned>
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	4604      	mov	r4, r0
 8006f46:	d158      	bne.n	8006ffa <_malloc_r+0xf6>
 8006f48:	f8d8 4000 	ldr.w	r4, [r8]
 8006f4c:	4627      	mov	r7, r4
 8006f4e:	2f00      	cmp	r7, #0
 8006f50:	d143      	bne.n	8006fda <_malloc_r+0xd6>
 8006f52:	2c00      	cmp	r4, #0
 8006f54:	d04b      	beq.n	8006fee <_malloc_r+0xea>
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	4639      	mov	r1, r7
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	eb04 0903 	add.w	r9, r4, r3
 8006f60:	f000 fb60 	bl	8007624 <_sbrk_r>
 8006f64:	4581      	cmp	r9, r0
 8006f66:	d142      	bne.n	8006fee <_malloc_r+0xea>
 8006f68:	6821      	ldr	r1, [r4, #0]
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	1a6d      	subs	r5, r5, r1
 8006f6e:	4629      	mov	r1, r5
 8006f70:	f7ff ffa6 	bl	8006ec0 <sbrk_aligned>
 8006f74:	3001      	adds	r0, #1
 8006f76:	d03a      	beq.n	8006fee <_malloc_r+0xea>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	442b      	add	r3, r5
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	bb62      	cbnz	r2, 8006fe0 <_malloc_r+0xdc>
 8006f86:	f8c8 7000 	str.w	r7, [r8]
 8006f8a:	e00f      	b.n	8006fac <_malloc_r+0xa8>
 8006f8c:	6822      	ldr	r2, [r4, #0]
 8006f8e:	1b52      	subs	r2, r2, r5
 8006f90:	d420      	bmi.n	8006fd4 <_malloc_r+0xd0>
 8006f92:	2a0b      	cmp	r2, #11
 8006f94:	d917      	bls.n	8006fc6 <_malloc_r+0xc2>
 8006f96:	1961      	adds	r1, r4, r5
 8006f98:	42a3      	cmp	r3, r4
 8006f9a:	6025      	str	r5, [r4, #0]
 8006f9c:	bf18      	it	ne
 8006f9e:	6059      	strne	r1, [r3, #4]
 8006fa0:	6863      	ldr	r3, [r4, #4]
 8006fa2:	bf08      	it	eq
 8006fa4:	f8c8 1000 	streq.w	r1, [r8]
 8006fa8:	5162      	str	r2, [r4, r5]
 8006faa:	604b      	str	r3, [r1, #4]
 8006fac:	4630      	mov	r0, r6
 8006fae:	f000 f82f 	bl	8007010 <__malloc_unlock>
 8006fb2:	f104 000b 	add.w	r0, r4, #11
 8006fb6:	1d23      	adds	r3, r4, #4
 8006fb8:	f020 0007 	bic.w	r0, r0, #7
 8006fbc:	1ac2      	subs	r2, r0, r3
 8006fbe:	bf1c      	itt	ne
 8006fc0:	1a1b      	subne	r3, r3, r0
 8006fc2:	50a3      	strne	r3, [r4, r2]
 8006fc4:	e7af      	b.n	8006f26 <_malloc_r+0x22>
 8006fc6:	6862      	ldr	r2, [r4, #4]
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	bf0c      	ite	eq
 8006fcc:	f8c8 2000 	streq.w	r2, [r8]
 8006fd0:	605a      	strne	r2, [r3, #4]
 8006fd2:	e7eb      	b.n	8006fac <_malloc_r+0xa8>
 8006fd4:	4623      	mov	r3, r4
 8006fd6:	6864      	ldr	r4, [r4, #4]
 8006fd8:	e7ae      	b.n	8006f38 <_malloc_r+0x34>
 8006fda:	463c      	mov	r4, r7
 8006fdc:	687f      	ldr	r7, [r7, #4]
 8006fde:	e7b6      	b.n	8006f4e <_malloc_r+0x4a>
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	d1fb      	bne.n	8006fe0 <_malloc_r+0xdc>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	6053      	str	r3, [r2, #4]
 8006fec:	e7de      	b.n	8006fac <_malloc_r+0xa8>
 8006fee:	230c      	movs	r3, #12
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	6033      	str	r3, [r6, #0]
 8006ff4:	f000 f80c 	bl	8007010 <__malloc_unlock>
 8006ff8:	e794      	b.n	8006f24 <_malloc_r+0x20>
 8006ffa:	6005      	str	r5, [r0, #0]
 8006ffc:	e7d6      	b.n	8006fac <_malloc_r+0xa8>
 8006ffe:	bf00      	nop
 8007000:	20000434 	.word	0x20000434

08007004 <__malloc_lock>:
 8007004:	4801      	ldr	r0, [pc, #4]	@ (800700c <__malloc_lock+0x8>)
 8007006:	f7ff bf11 	b.w	8006e2c <__retarget_lock_acquire_recursive>
 800700a:	bf00      	nop
 800700c:	2000042c 	.word	0x2000042c

08007010 <__malloc_unlock>:
 8007010:	4801      	ldr	r0, [pc, #4]	@ (8007018 <__malloc_unlock+0x8>)
 8007012:	f7ff bf0c 	b.w	8006e2e <__retarget_lock_release_recursive>
 8007016:	bf00      	nop
 8007018:	2000042c 	.word	0x2000042c

0800701c <__ssputs_r>:
 800701c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007020:	461f      	mov	r7, r3
 8007022:	688e      	ldr	r6, [r1, #8]
 8007024:	4682      	mov	sl, r0
 8007026:	42be      	cmp	r6, r7
 8007028:	460c      	mov	r4, r1
 800702a:	4690      	mov	r8, r2
 800702c:	680b      	ldr	r3, [r1, #0]
 800702e:	d82d      	bhi.n	800708c <__ssputs_r+0x70>
 8007030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007034:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007038:	d026      	beq.n	8007088 <__ssputs_r+0x6c>
 800703a:	6965      	ldr	r5, [r4, #20]
 800703c:	6909      	ldr	r1, [r1, #16]
 800703e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007042:	eba3 0901 	sub.w	r9, r3, r1
 8007046:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800704a:	1c7b      	adds	r3, r7, #1
 800704c:	444b      	add	r3, r9
 800704e:	106d      	asrs	r5, r5, #1
 8007050:	429d      	cmp	r5, r3
 8007052:	bf38      	it	cc
 8007054:	461d      	movcc	r5, r3
 8007056:	0553      	lsls	r3, r2, #21
 8007058:	d527      	bpl.n	80070aa <__ssputs_r+0x8e>
 800705a:	4629      	mov	r1, r5
 800705c:	f7ff ff52 	bl	8006f04 <_malloc_r>
 8007060:	4606      	mov	r6, r0
 8007062:	b360      	cbz	r0, 80070be <__ssputs_r+0xa2>
 8007064:	464a      	mov	r2, r9
 8007066:	6921      	ldr	r1, [r4, #16]
 8007068:	f000 fafa 	bl	8007660 <memcpy>
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007076:	81a3      	strh	r3, [r4, #12]
 8007078:	6126      	str	r6, [r4, #16]
 800707a:	444e      	add	r6, r9
 800707c:	6026      	str	r6, [r4, #0]
 800707e:	463e      	mov	r6, r7
 8007080:	6165      	str	r5, [r4, #20]
 8007082:	eba5 0509 	sub.w	r5, r5, r9
 8007086:	60a5      	str	r5, [r4, #8]
 8007088:	42be      	cmp	r6, r7
 800708a:	d900      	bls.n	800708e <__ssputs_r+0x72>
 800708c:	463e      	mov	r6, r7
 800708e:	4632      	mov	r2, r6
 8007090:	4641      	mov	r1, r8
 8007092:	6820      	ldr	r0, [r4, #0]
 8007094:	f000 faac 	bl	80075f0 <memmove>
 8007098:	2000      	movs	r0, #0
 800709a:	68a3      	ldr	r3, [r4, #8]
 800709c:	1b9b      	subs	r3, r3, r6
 800709e:	60a3      	str	r3, [r4, #8]
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	4433      	add	r3, r6
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070aa:	462a      	mov	r2, r5
 80070ac:	f000 fae6 	bl	800767c <_realloc_r>
 80070b0:	4606      	mov	r6, r0
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d1e0      	bne.n	8007078 <__ssputs_r+0x5c>
 80070b6:	4650      	mov	r0, sl
 80070b8:	6921      	ldr	r1, [r4, #16]
 80070ba:	f7ff feb9 	bl	8006e30 <_free_r>
 80070be:	230c      	movs	r3, #12
 80070c0:	f8ca 3000 	str.w	r3, [sl]
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ce:	81a3      	strh	r3, [r4, #12]
 80070d0:	e7e9      	b.n	80070a6 <__ssputs_r+0x8a>
	...

080070d4 <_svfiprintf_r>:
 80070d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d8:	4698      	mov	r8, r3
 80070da:	898b      	ldrh	r3, [r1, #12]
 80070dc:	4607      	mov	r7, r0
 80070de:	061b      	lsls	r3, r3, #24
 80070e0:	460d      	mov	r5, r1
 80070e2:	4614      	mov	r4, r2
 80070e4:	b09d      	sub	sp, #116	@ 0x74
 80070e6:	d510      	bpl.n	800710a <_svfiprintf_r+0x36>
 80070e8:	690b      	ldr	r3, [r1, #16]
 80070ea:	b973      	cbnz	r3, 800710a <_svfiprintf_r+0x36>
 80070ec:	2140      	movs	r1, #64	@ 0x40
 80070ee:	f7ff ff09 	bl	8006f04 <_malloc_r>
 80070f2:	6028      	str	r0, [r5, #0]
 80070f4:	6128      	str	r0, [r5, #16]
 80070f6:	b930      	cbnz	r0, 8007106 <_svfiprintf_r+0x32>
 80070f8:	230c      	movs	r3, #12
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007100:	b01d      	add	sp, #116	@ 0x74
 8007102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007106:	2340      	movs	r3, #64	@ 0x40
 8007108:	616b      	str	r3, [r5, #20]
 800710a:	2300      	movs	r3, #0
 800710c:	9309      	str	r3, [sp, #36]	@ 0x24
 800710e:	2320      	movs	r3, #32
 8007110:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007114:	2330      	movs	r3, #48	@ 0x30
 8007116:	f04f 0901 	mov.w	r9, #1
 800711a:	f8cd 800c 	str.w	r8, [sp, #12]
 800711e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80072b8 <_svfiprintf_r+0x1e4>
 8007122:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007126:	4623      	mov	r3, r4
 8007128:	469a      	mov	sl, r3
 800712a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800712e:	b10a      	cbz	r2, 8007134 <_svfiprintf_r+0x60>
 8007130:	2a25      	cmp	r2, #37	@ 0x25
 8007132:	d1f9      	bne.n	8007128 <_svfiprintf_r+0x54>
 8007134:	ebba 0b04 	subs.w	fp, sl, r4
 8007138:	d00b      	beq.n	8007152 <_svfiprintf_r+0x7e>
 800713a:	465b      	mov	r3, fp
 800713c:	4622      	mov	r2, r4
 800713e:	4629      	mov	r1, r5
 8007140:	4638      	mov	r0, r7
 8007142:	f7ff ff6b 	bl	800701c <__ssputs_r>
 8007146:	3001      	adds	r0, #1
 8007148:	f000 80a7 	beq.w	800729a <_svfiprintf_r+0x1c6>
 800714c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800714e:	445a      	add	r2, fp
 8007150:	9209      	str	r2, [sp, #36]	@ 0x24
 8007152:	f89a 3000 	ldrb.w	r3, [sl]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 809f 	beq.w	800729a <_svfiprintf_r+0x1c6>
 800715c:	2300      	movs	r3, #0
 800715e:	f04f 32ff 	mov.w	r2, #4294967295
 8007162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007166:	f10a 0a01 	add.w	sl, sl, #1
 800716a:	9304      	str	r3, [sp, #16]
 800716c:	9307      	str	r3, [sp, #28]
 800716e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007172:	931a      	str	r3, [sp, #104]	@ 0x68
 8007174:	4654      	mov	r4, sl
 8007176:	2205      	movs	r2, #5
 8007178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717c:	484e      	ldr	r0, [pc, #312]	@ (80072b8 <_svfiprintf_r+0x1e4>)
 800717e:	f000 fa61 	bl	8007644 <memchr>
 8007182:	9a04      	ldr	r2, [sp, #16]
 8007184:	b9d8      	cbnz	r0, 80071be <_svfiprintf_r+0xea>
 8007186:	06d0      	lsls	r0, r2, #27
 8007188:	bf44      	itt	mi
 800718a:	2320      	movmi	r3, #32
 800718c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007190:	0711      	lsls	r1, r2, #28
 8007192:	bf44      	itt	mi
 8007194:	232b      	movmi	r3, #43	@ 0x2b
 8007196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800719a:	f89a 3000 	ldrb.w	r3, [sl]
 800719e:	2b2a      	cmp	r3, #42	@ 0x2a
 80071a0:	d015      	beq.n	80071ce <_svfiprintf_r+0xfa>
 80071a2:	4654      	mov	r4, sl
 80071a4:	2000      	movs	r0, #0
 80071a6:	f04f 0c0a 	mov.w	ip, #10
 80071aa:	9a07      	ldr	r2, [sp, #28]
 80071ac:	4621      	mov	r1, r4
 80071ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071b2:	3b30      	subs	r3, #48	@ 0x30
 80071b4:	2b09      	cmp	r3, #9
 80071b6:	d94b      	bls.n	8007250 <_svfiprintf_r+0x17c>
 80071b8:	b1b0      	cbz	r0, 80071e8 <_svfiprintf_r+0x114>
 80071ba:	9207      	str	r2, [sp, #28]
 80071bc:	e014      	b.n	80071e8 <_svfiprintf_r+0x114>
 80071be:	eba0 0308 	sub.w	r3, r0, r8
 80071c2:	fa09 f303 	lsl.w	r3, r9, r3
 80071c6:	4313      	orrs	r3, r2
 80071c8:	46a2      	mov	sl, r4
 80071ca:	9304      	str	r3, [sp, #16]
 80071cc:	e7d2      	b.n	8007174 <_svfiprintf_r+0xa0>
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	1d19      	adds	r1, r3, #4
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	9103      	str	r1, [sp, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	bfbb      	ittet	lt
 80071da:	425b      	neglt	r3, r3
 80071dc:	f042 0202 	orrlt.w	r2, r2, #2
 80071e0:	9307      	strge	r3, [sp, #28]
 80071e2:	9307      	strlt	r3, [sp, #28]
 80071e4:	bfb8      	it	lt
 80071e6:	9204      	strlt	r2, [sp, #16]
 80071e8:	7823      	ldrb	r3, [r4, #0]
 80071ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80071ec:	d10a      	bne.n	8007204 <_svfiprintf_r+0x130>
 80071ee:	7863      	ldrb	r3, [r4, #1]
 80071f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80071f2:	d132      	bne.n	800725a <_svfiprintf_r+0x186>
 80071f4:	9b03      	ldr	r3, [sp, #12]
 80071f6:	3402      	adds	r4, #2
 80071f8:	1d1a      	adds	r2, r3, #4
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	9203      	str	r2, [sp, #12]
 80071fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007202:	9305      	str	r3, [sp, #20]
 8007204:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80072bc <_svfiprintf_r+0x1e8>
 8007208:	2203      	movs	r2, #3
 800720a:	4650      	mov	r0, sl
 800720c:	7821      	ldrb	r1, [r4, #0]
 800720e:	f000 fa19 	bl	8007644 <memchr>
 8007212:	b138      	cbz	r0, 8007224 <_svfiprintf_r+0x150>
 8007214:	2240      	movs	r2, #64	@ 0x40
 8007216:	9b04      	ldr	r3, [sp, #16]
 8007218:	eba0 000a 	sub.w	r0, r0, sl
 800721c:	4082      	lsls	r2, r0
 800721e:	4313      	orrs	r3, r2
 8007220:	3401      	adds	r4, #1
 8007222:	9304      	str	r3, [sp, #16]
 8007224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007228:	2206      	movs	r2, #6
 800722a:	4825      	ldr	r0, [pc, #148]	@ (80072c0 <_svfiprintf_r+0x1ec>)
 800722c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007230:	f000 fa08 	bl	8007644 <memchr>
 8007234:	2800      	cmp	r0, #0
 8007236:	d036      	beq.n	80072a6 <_svfiprintf_r+0x1d2>
 8007238:	4b22      	ldr	r3, [pc, #136]	@ (80072c4 <_svfiprintf_r+0x1f0>)
 800723a:	bb1b      	cbnz	r3, 8007284 <_svfiprintf_r+0x1b0>
 800723c:	9b03      	ldr	r3, [sp, #12]
 800723e:	3307      	adds	r3, #7
 8007240:	f023 0307 	bic.w	r3, r3, #7
 8007244:	3308      	adds	r3, #8
 8007246:	9303      	str	r3, [sp, #12]
 8007248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800724a:	4433      	add	r3, r6
 800724c:	9309      	str	r3, [sp, #36]	@ 0x24
 800724e:	e76a      	b.n	8007126 <_svfiprintf_r+0x52>
 8007250:	460c      	mov	r4, r1
 8007252:	2001      	movs	r0, #1
 8007254:	fb0c 3202 	mla	r2, ip, r2, r3
 8007258:	e7a8      	b.n	80071ac <_svfiprintf_r+0xd8>
 800725a:	2300      	movs	r3, #0
 800725c:	f04f 0c0a 	mov.w	ip, #10
 8007260:	4619      	mov	r1, r3
 8007262:	3401      	adds	r4, #1
 8007264:	9305      	str	r3, [sp, #20]
 8007266:	4620      	mov	r0, r4
 8007268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800726c:	3a30      	subs	r2, #48	@ 0x30
 800726e:	2a09      	cmp	r2, #9
 8007270:	d903      	bls.n	800727a <_svfiprintf_r+0x1a6>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0c6      	beq.n	8007204 <_svfiprintf_r+0x130>
 8007276:	9105      	str	r1, [sp, #20]
 8007278:	e7c4      	b.n	8007204 <_svfiprintf_r+0x130>
 800727a:	4604      	mov	r4, r0
 800727c:	2301      	movs	r3, #1
 800727e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007282:	e7f0      	b.n	8007266 <_svfiprintf_r+0x192>
 8007284:	ab03      	add	r3, sp, #12
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	462a      	mov	r2, r5
 800728a:	4638      	mov	r0, r7
 800728c:	4b0e      	ldr	r3, [pc, #56]	@ (80072c8 <_svfiprintf_r+0x1f4>)
 800728e:	a904      	add	r1, sp, #16
 8007290:	f3af 8000 	nop.w
 8007294:	1c42      	adds	r2, r0, #1
 8007296:	4606      	mov	r6, r0
 8007298:	d1d6      	bne.n	8007248 <_svfiprintf_r+0x174>
 800729a:	89ab      	ldrh	r3, [r5, #12]
 800729c:	065b      	lsls	r3, r3, #25
 800729e:	f53f af2d 	bmi.w	80070fc <_svfiprintf_r+0x28>
 80072a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072a4:	e72c      	b.n	8007100 <_svfiprintf_r+0x2c>
 80072a6:	ab03      	add	r3, sp, #12
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	462a      	mov	r2, r5
 80072ac:	4638      	mov	r0, r7
 80072ae:	4b06      	ldr	r3, [pc, #24]	@ (80072c8 <_svfiprintf_r+0x1f4>)
 80072b0:	a904      	add	r1, sp, #16
 80072b2:	f000 f87d 	bl	80073b0 <_printf_i>
 80072b6:	e7ed      	b.n	8007294 <_svfiprintf_r+0x1c0>
 80072b8:	080079a0 	.word	0x080079a0
 80072bc:	080079a6 	.word	0x080079a6
 80072c0:	080079aa 	.word	0x080079aa
 80072c4:	00000000 	.word	0x00000000
 80072c8:	0800701d 	.word	0x0800701d

080072cc <_printf_common>:
 80072cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d0:	4616      	mov	r6, r2
 80072d2:	4698      	mov	r8, r3
 80072d4:	688a      	ldr	r2, [r1, #8]
 80072d6:	690b      	ldr	r3, [r1, #16]
 80072d8:	4607      	mov	r7, r0
 80072da:	4293      	cmp	r3, r2
 80072dc:	bfb8      	it	lt
 80072de:	4613      	movlt	r3, r2
 80072e0:	6033      	str	r3, [r6, #0]
 80072e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80072e6:	460c      	mov	r4, r1
 80072e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072ec:	b10a      	cbz	r2, 80072f2 <_printf_common+0x26>
 80072ee:	3301      	adds	r3, #1
 80072f0:	6033      	str	r3, [r6, #0]
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	0699      	lsls	r1, r3, #26
 80072f6:	bf42      	ittt	mi
 80072f8:	6833      	ldrmi	r3, [r6, #0]
 80072fa:	3302      	addmi	r3, #2
 80072fc:	6033      	strmi	r3, [r6, #0]
 80072fe:	6825      	ldr	r5, [r4, #0]
 8007300:	f015 0506 	ands.w	r5, r5, #6
 8007304:	d106      	bne.n	8007314 <_printf_common+0x48>
 8007306:	f104 0a19 	add.w	sl, r4, #25
 800730a:	68e3      	ldr	r3, [r4, #12]
 800730c:	6832      	ldr	r2, [r6, #0]
 800730e:	1a9b      	subs	r3, r3, r2
 8007310:	42ab      	cmp	r3, r5
 8007312:	dc2b      	bgt.n	800736c <_printf_common+0xa0>
 8007314:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007318:	6822      	ldr	r2, [r4, #0]
 800731a:	3b00      	subs	r3, #0
 800731c:	bf18      	it	ne
 800731e:	2301      	movne	r3, #1
 8007320:	0692      	lsls	r2, r2, #26
 8007322:	d430      	bmi.n	8007386 <_printf_common+0xba>
 8007324:	4641      	mov	r1, r8
 8007326:	4638      	mov	r0, r7
 8007328:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800732c:	47c8      	blx	r9
 800732e:	3001      	adds	r0, #1
 8007330:	d023      	beq.n	800737a <_printf_common+0xae>
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	6922      	ldr	r2, [r4, #16]
 8007336:	f003 0306 	and.w	r3, r3, #6
 800733a:	2b04      	cmp	r3, #4
 800733c:	bf14      	ite	ne
 800733e:	2500      	movne	r5, #0
 8007340:	6833      	ldreq	r3, [r6, #0]
 8007342:	f04f 0600 	mov.w	r6, #0
 8007346:	bf08      	it	eq
 8007348:	68e5      	ldreq	r5, [r4, #12]
 800734a:	f104 041a 	add.w	r4, r4, #26
 800734e:	bf08      	it	eq
 8007350:	1aed      	subeq	r5, r5, r3
 8007352:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007356:	bf08      	it	eq
 8007358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800735c:	4293      	cmp	r3, r2
 800735e:	bfc4      	itt	gt
 8007360:	1a9b      	subgt	r3, r3, r2
 8007362:	18ed      	addgt	r5, r5, r3
 8007364:	42b5      	cmp	r5, r6
 8007366:	d11a      	bne.n	800739e <_printf_common+0xd2>
 8007368:	2000      	movs	r0, #0
 800736a:	e008      	b.n	800737e <_printf_common+0xb2>
 800736c:	2301      	movs	r3, #1
 800736e:	4652      	mov	r2, sl
 8007370:	4641      	mov	r1, r8
 8007372:	4638      	mov	r0, r7
 8007374:	47c8      	blx	r9
 8007376:	3001      	adds	r0, #1
 8007378:	d103      	bne.n	8007382 <_printf_common+0xb6>
 800737a:	f04f 30ff 	mov.w	r0, #4294967295
 800737e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007382:	3501      	adds	r5, #1
 8007384:	e7c1      	b.n	800730a <_printf_common+0x3e>
 8007386:	2030      	movs	r0, #48	@ 0x30
 8007388:	18e1      	adds	r1, r4, r3
 800738a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007394:	4422      	add	r2, r4
 8007396:	3302      	adds	r3, #2
 8007398:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800739c:	e7c2      	b.n	8007324 <_printf_common+0x58>
 800739e:	2301      	movs	r3, #1
 80073a0:	4622      	mov	r2, r4
 80073a2:	4641      	mov	r1, r8
 80073a4:	4638      	mov	r0, r7
 80073a6:	47c8      	blx	r9
 80073a8:	3001      	adds	r0, #1
 80073aa:	d0e6      	beq.n	800737a <_printf_common+0xae>
 80073ac:	3601      	adds	r6, #1
 80073ae:	e7d9      	b.n	8007364 <_printf_common+0x98>

080073b0 <_printf_i>:
 80073b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073b4:	7e0f      	ldrb	r7, [r1, #24]
 80073b6:	4691      	mov	r9, r2
 80073b8:	2f78      	cmp	r7, #120	@ 0x78
 80073ba:	4680      	mov	r8, r0
 80073bc:	460c      	mov	r4, r1
 80073be:	469a      	mov	sl, r3
 80073c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073c6:	d807      	bhi.n	80073d8 <_printf_i+0x28>
 80073c8:	2f62      	cmp	r7, #98	@ 0x62
 80073ca:	d80a      	bhi.n	80073e2 <_printf_i+0x32>
 80073cc:	2f00      	cmp	r7, #0
 80073ce:	f000 80d3 	beq.w	8007578 <_printf_i+0x1c8>
 80073d2:	2f58      	cmp	r7, #88	@ 0x58
 80073d4:	f000 80ba 	beq.w	800754c <_printf_i+0x19c>
 80073d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073e0:	e03a      	b.n	8007458 <_printf_i+0xa8>
 80073e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80073e6:	2b15      	cmp	r3, #21
 80073e8:	d8f6      	bhi.n	80073d8 <_printf_i+0x28>
 80073ea:	a101      	add	r1, pc, #4	@ (adr r1, 80073f0 <_printf_i+0x40>)
 80073ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073f0:	08007449 	.word	0x08007449
 80073f4:	0800745d 	.word	0x0800745d
 80073f8:	080073d9 	.word	0x080073d9
 80073fc:	080073d9 	.word	0x080073d9
 8007400:	080073d9 	.word	0x080073d9
 8007404:	080073d9 	.word	0x080073d9
 8007408:	0800745d 	.word	0x0800745d
 800740c:	080073d9 	.word	0x080073d9
 8007410:	080073d9 	.word	0x080073d9
 8007414:	080073d9 	.word	0x080073d9
 8007418:	080073d9 	.word	0x080073d9
 800741c:	0800755f 	.word	0x0800755f
 8007420:	08007487 	.word	0x08007487
 8007424:	08007519 	.word	0x08007519
 8007428:	080073d9 	.word	0x080073d9
 800742c:	080073d9 	.word	0x080073d9
 8007430:	08007581 	.word	0x08007581
 8007434:	080073d9 	.word	0x080073d9
 8007438:	08007487 	.word	0x08007487
 800743c:	080073d9 	.word	0x080073d9
 8007440:	080073d9 	.word	0x080073d9
 8007444:	08007521 	.word	0x08007521
 8007448:	6833      	ldr	r3, [r6, #0]
 800744a:	1d1a      	adds	r2, r3, #4
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6032      	str	r2, [r6, #0]
 8007450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007458:	2301      	movs	r3, #1
 800745a:	e09e      	b.n	800759a <_printf_i+0x1ea>
 800745c:	6833      	ldr	r3, [r6, #0]
 800745e:	6820      	ldr	r0, [r4, #0]
 8007460:	1d19      	adds	r1, r3, #4
 8007462:	6031      	str	r1, [r6, #0]
 8007464:	0606      	lsls	r6, r0, #24
 8007466:	d501      	bpl.n	800746c <_printf_i+0xbc>
 8007468:	681d      	ldr	r5, [r3, #0]
 800746a:	e003      	b.n	8007474 <_printf_i+0xc4>
 800746c:	0645      	lsls	r5, r0, #25
 800746e:	d5fb      	bpl.n	8007468 <_printf_i+0xb8>
 8007470:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007474:	2d00      	cmp	r5, #0
 8007476:	da03      	bge.n	8007480 <_printf_i+0xd0>
 8007478:	232d      	movs	r3, #45	@ 0x2d
 800747a:	426d      	negs	r5, r5
 800747c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007480:	230a      	movs	r3, #10
 8007482:	4859      	ldr	r0, [pc, #356]	@ (80075e8 <_printf_i+0x238>)
 8007484:	e011      	b.n	80074aa <_printf_i+0xfa>
 8007486:	6821      	ldr	r1, [r4, #0]
 8007488:	6833      	ldr	r3, [r6, #0]
 800748a:	0608      	lsls	r0, r1, #24
 800748c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007490:	d402      	bmi.n	8007498 <_printf_i+0xe8>
 8007492:	0649      	lsls	r1, r1, #25
 8007494:	bf48      	it	mi
 8007496:	b2ad      	uxthmi	r5, r5
 8007498:	2f6f      	cmp	r7, #111	@ 0x6f
 800749a:	6033      	str	r3, [r6, #0]
 800749c:	bf14      	ite	ne
 800749e:	230a      	movne	r3, #10
 80074a0:	2308      	moveq	r3, #8
 80074a2:	4851      	ldr	r0, [pc, #324]	@ (80075e8 <_printf_i+0x238>)
 80074a4:	2100      	movs	r1, #0
 80074a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074aa:	6866      	ldr	r6, [r4, #4]
 80074ac:	2e00      	cmp	r6, #0
 80074ae:	bfa8      	it	ge
 80074b0:	6821      	ldrge	r1, [r4, #0]
 80074b2:	60a6      	str	r6, [r4, #8]
 80074b4:	bfa4      	itt	ge
 80074b6:	f021 0104 	bicge.w	r1, r1, #4
 80074ba:	6021      	strge	r1, [r4, #0]
 80074bc:	b90d      	cbnz	r5, 80074c2 <_printf_i+0x112>
 80074be:	2e00      	cmp	r6, #0
 80074c0:	d04b      	beq.n	800755a <_printf_i+0x1aa>
 80074c2:	4616      	mov	r6, r2
 80074c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80074c8:	fb03 5711 	mls	r7, r3, r1, r5
 80074cc:	5dc7      	ldrb	r7, [r0, r7]
 80074ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074d2:	462f      	mov	r7, r5
 80074d4:	42bb      	cmp	r3, r7
 80074d6:	460d      	mov	r5, r1
 80074d8:	d9f4      	bls.n	80074c4 <_printf_i+0x114>
 80074da:	2b08      	cmp	r3, #8
 80074dc:	d10b      	bne.n	80074f6 <_printf_i+0x146>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	07df      	lsls	r7, r3, #31
 80074e2:	d508      	bpl.n	80074f6 <_printf_i+0x146>
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	6861      	ldr	r1, [r4, #4]
 80074e8:	4299      	cmp	r1, r3
 80074ea:	bfde      	ittt	le
 80074ec:	2330      	movle	r3, #48	@ 0x30
 80074ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074f6:	1b92      	subs	r2, r2, r6
 80074f8:	6122      	str	r2, [r4, #16]
 80074fa:	464b      	mov	r3, r9
 80074fc:	4621      	mov	r1, r4
 80074fe:	4640      	mov	r0, r8
 8007500:	f8cd a000 	str.w	sl, [sp]
 8007504:	aa03      	add	r2, sp, #12
 8007506:	f7ff fee1 	bl	80072cc <_printf_common>
 800750a:	3001      	adds	r0, #1
 800750c:	d14a      	bne.n	80075a4 <_printf_i+0x1f4>
 800750e:	f04f 30ff 	mov.w	r0, #4294967295
 8007512:	b004      	add	sp, #16
 8007514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	f043 0320 	orr.w	r3, r3, #32
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	2778      	movs	r7, #120	@ 0x78
 8007522:	4832      	ldr	r0, [pc, #200]	@ (80075ec <_printf_i+0x23c>)
 8007524:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	6831      	ldr	r1, [r6, #0]
 800752c:	061f      	lsls	r7, r3, #24
 800752e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007532:	d402      	bmi.n	800753a <_printf_i+0x18a>
 8007534:	065f      	lsls	r7, r3, #25
 8007536:	bf48      	it	mi
 8007538:	b2ad      	uxthmi	r5, r5
 800753a:	6031      	str	r1, [r6, #0]
 800753c:	07d9      	lsls	r1, r3, #31
 800753e:	bf44      	itt	mi
 8007540:	f043 0320 	orrmi.w	r3, r3, #32
 8007544:	6023      	strmi	r3, [r4, #0]
 8007546:	b11d      	cbz	r5, 8007550 <_printf_i+0x1a0>
 8007548:	2310      	movs	r3, #16
 800754a:	e7ab      	b.n	80074a4 <_printf_i+0xf4>
 800754c:	4826      	ldr	r0, [pc, #152]	@ (80075e8 <_printf_i+0x238>)
 800754e:	e7e9      	b.n	8007524 <_printf_i+0x174>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	f023 0320 	bic.w	r3, r3, #32
 8007556:	6023      	str	r3, [r4, #0]
 8007558:	e7f6      	b.n	8007548 <_printf_i+0x198>
 800755a:	4616      	mov	r6, r2
 800755c:	e7bd      	b.n	80074da <_printf_i+0x12a>
 800755e:	6833      	ldr	r3, [r6, #0]
 8007560:	6825      	ldr	r5, [r4, #0]
 8007562:	1d18      	adds	r0, r3, #4
 8007564:	6961      	ldr	r1, [r4, #20]
 8007566:	6030      	str	r0, [r6, #0]
 8007568:	062e      	lsls	r6, r5, #24
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	d501      	bpl.n	8007572 <_printf_i+0x1c2>
 800756e:	6019      	str	r1, [r3, #0]
 8007570:	e002      	b.n	8007578 <_printf_i+0x1c8>
 8007572:	0668      	lsls	r0, r5, #25
 8007574:	d5fb      	bpl.n	800756e <_printf_i+0x1be>
 8007576:	8019      	strh	r1, [r3, #0]
 8007578:	2300      	movs	r3, #0
 800757a:	4616      	mov	r6, r2
 800757c:	6123      	str	r3, [r4, #16]
 800757e:	e7bc      	b.n	80074fa <_printf_i+0x14a>
 8007580:	6833      	ldr	r3, [r6, #0]
 8007582:	2100      	movs	r1, #0
 8007584:	1d1a      	adds	r2, r3, #4
 8007586:	6032      	str	r2, [r6, #0]
 8007588:	681e      	ldr	r6, [r3, #0]
 800758a:	6862      	ldr	r2, [r4, #4]
 800758c:	4630      	mov	r0, r6
 800758e:	f000 f859 	bl	8007644 <memchr>
 8007592:	b108      	cbz	r0, 8007598 <_printf_i+0x1e8>
 8007594:	1b80      	subs	r0, r0, r6
 8007596:	6060      	str	r0, [r4, #4]
 8007598:	6863      	ldr	r3, [r4, #4]
 800759a:	6123      	str	r3, [r4, #16]
 800759c:	2300      	movs	r3, #0
 800759e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075a2:	e7aa      	b.n	80074fa <_printf_i+0x14a>
 80075a4:	4632      	mov	r2, r6
 80075a6:	4649      	mov	r1, r9
 80075a8:	4640      	mov	r0, r8
 80075aa:	6923      	ldr	r3, [r4, #16]
 80075ac:	47d0      	blx	sl
 80075ae:	3001      	adds	r0, #1
 80075b0:	d0ad      	beq.n	800750e <_printf_i+0x15e>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	079b      	lsls	r3, r3, #30
 80075b6:	d413      	bmi.n	80075e0 <_printf_i+0x230>
 80075b8:	68e0      	ldr	r0, [r4, #12]
 80075ba:	9b03      	ldr	r3, [sp, #12]
 80075bc:	4298      	cmp	r0, r3
 80075be:	bfb8      	it	lt
 80075c0:	4618      	movlt	r0, r3
 80075c2:	e7a6      	b.n	8007512 <_printf_i+0x162>
 80075c4:	2301      	movs	r3, #1
 80075c6:	4632      	mov	r2, r6
 80075c8:	4649      	mov	r1, r9
 80075ca:	4640      	mov	r0, r8
 80075cc:	47d0      	blx	sl
 80075ce:	3001      	adds	r0, #1
 80075d0:	d09d      	beq.n	800750e <_printf_i+0x15e>
 80075d2:	3501      	adds	r5, #1
 80075d4:	68e3      	ldr	r3, [r4, #12]
 80075d6:	9903      	ldr	r1, [sp, #12]
 80075d8:	1a5b      	subs	r3, r3, r1
 80075da:	42ab      	cmp	r3, r5
 80075dc:	dcf2      	bgt.n	80075c4 <_printf_i+0x214>
 80075de:	e7eb      	b.n	80075b8 <_printf_i+0x208>
 80075e0:	2500      	movs	r5, #0
 80075e2:	f104 0619 	add.w	r6, r4, #25
 80075e6:	e7f5      	b.n	80075d4 <_printf_i+0x224>
 80075e8:	080079b1 	.word	0x080079b1
 80075ec:	080079c2 	.word	0x080079c2

080075f0 <memmove>:
 80075f0:	4288      	cmp	r0, r1
 80075f2:	b510      	push	{r4, lr}
 80075f4:	eb01 0402 	add.w	r4, r1, r2
 80075f8:	d902      	bls.n	8007600 <memmove+0x10>
 80075fa:	4284      	cmp	r4, r0
 80075fc:	4623      	mov	r3, r4
 80075fe:	d807      	bhi.n	8007610 <memmove+0x20>
 8007600:	1e43      	subs	r3, r0, #1
 8007602:	42a1      	cmp	r1, r4
 8007604:	d008      	beq.n	8007618 <memmove+0x28>
 8007606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800760a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800760e:	e7f8      	b.n	8007602 <memmove+0x12>
 8007610:	4601      	mov	r1, r0
 8007612:	4402      	add	r2, r0
 8007614:	428a      	cmp	r2, r1
 8007616:	d100      	bne.n	800761a <memmove+0x2a>
 8007618:	bd10      	pop	{r4, pc}
 800761a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800761e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007622:	e7f7      	b.n	8007614 <memmove+0x24>

08007624 <_sbrk_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	2300      	movs	r3, #0
 8007628:	4d05      	ldr	r5, [pc, #20]	@ (8007640 <_sbrk_r+0x1c>)
 800762a:	4604      	mov	r4, r0
 800762c:	4608      	mov	r0, r1
 800762e:	602b      	str	r3, [r5, #0]
 8007630:	f7f9 fa32 	bl	8000a98 <_sbrk>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_sbrk_r+0x1a>
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	b103      	cbz	r3, 800763e <_sbrk_r+0x1a>
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	20000428 	.word	0x20000428

08007644 <memchr>:
 8007644:	4603      	mov	r3, r0
 8007646:	b510      	push	{r4, lr}
 8007648:	b2c9      	uxtb	r1, r1
 800764a:	4402      	add	r2, r0
 800764c:	4293      	cmp	r3, r2
 800764e:	4618      	mov	r0, r3
 8007650:	d101      	bne.n	8007656 <memchr+0x12>
 8007652:	2000      	movs	r0, #0
 8007654:	e003      	b.n	800765e <memchr+0x1a>
 8007656:	7804      	ldrb	r4, [r0, #0]
 8007658:	3301      	adds	r3, #1
 800765a:	428c      	cmp	r4, r1
 800765c:	d1f6      	bne.n	800764c <memchr+0x8>
 800765e:	bd10      	pop	{r4, pc}

08007660 <memcpy>:
 8007660:	440a      	add	r2, r1
 8007662:	4291      	cmp	r1, r2
 8007664:	f100 33ff 	add.w	r3, r0, #4294967295
 8007668:	d100      	bne.n	800766c <memcpy+0xc>
 800766a:	4770      	bx	lr
 800766c:	b510      	push	{r4, lr}
 800766e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007672:	4291      	cmp	r1, r2
 8007674:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007678:	d1f9      	bne.n	800766e <memcpy+0xe>
 800767a:	bd10      	pop	{r4, pc}

0800767c <_realloc_r>:
 800767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007680:	4680      	mov	r8, r0
 8007682:	4615      	mov	r5, r2
 8007684:	460c      	mov	r4, r1
 8007686:	b921      	cbnz	r1, 8007692 <_realloc_r+0x16>
 8007688:	4611      	mov	r1, r2
 800768a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800768e:	f7ff bc39 	b.w	8006f04 <_malloc_r>
 8007692:	b92a      	cbnz	r2, 80076a0 <_realloc_r+0x24>
 8007694:	f7ff fbcc 	bl	8006e30 <_free_r>
 8007698:	2400      	movs	r4, #0
 800769a:	4620      	mov	r0, r4
 800769c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a0:	f000 f81a 	bl	80076d8 <_malloc_usable_size_r>
 80076a4:	4285      	cmp	r5, r0
 80076a6:	4606      	mov	r6, r0
 80076a8:	d802      	bhi.n	80076b0 <_realloc_r+0x34>
 80076aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80076ae:	d8f4      	bhi.n	800769a <_realloc_r+0x1e>
 80076b0:	4629      	mov	r1, r5
 80076b2:	4640      	mov	r0, r8
 80076b4:	f7ff fc26 	bl	8006f04 <_malloc_r>
 80076b8:	4607      	mov	r7, r0
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d0ec      	beq.n	8007698 <_realloc_r+0x1c>
 80076be:	42b5      	cmp	r5, r6
 80076c0:	462a      	mov	r2, r5
 80076c2:	4621      	mov	r1, r4
 80076c4:	bf28      	it	cs
 80076c6:	4632      	movcs	r2, r6
 80076c8:	f7ff ffca 	bl	8007660 <memcpy>
 80076cc:	4621      	mov	r1, r4
 80076ce:	4640      	mov	r0, r8
 80076d0:	f7ff fbae 	bl	8006e30 <_free_r>
 80076d4:	463c      	mov	r4, r7
 80076d6:	e7e0      	b.n	800769a <_realloc_r+0x1e>

080076d8 <_malloc_usable_size_r>:
 80076d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076dc:	1f18      	subs	r0, r3, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bfbc      	itt	lt
 80076e2:	580b      	ldrlt	r3, [r1, r0]
 80076e4:	18c0      	addlt	r0, r0, r3
 80076e6:	4770      	bx	lr

080076e8 <_init>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	bf00      	nop
 80076ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ee:	bc08      	pop	{r3}
 80076f0:	469e      	mov	lr, r3
 80076f2:	4770      	bx	lr

080076f4 <_fini>:
 80076f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f6:	bf00      	nop
 80076f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076fa:	bc08      	pop	{r3}
 80076fc:	469e      	mov	lr, r3
 80076fe:	4770      	bx	lr
